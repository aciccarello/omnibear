{"version":3,"sources":["webpack:///page.js","webpack:///webpack/bootstrap 87a944377db35dea358e","webpack:///./src/page.js","webpack:///./~/microformat-shiv/microformat-shiv.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","18","_interopRequireDefault","obj","default","_microformatShiv","_microformatShiv2","clearItem","currentItem","chrome","runtime","sendMessage","action","removeHighlight","console","log","classList","remove","CLASS_NAME","currentItemUrl","handleMessage","request","sender","sendResponse","sendFocusMessage","payload","selectedEntry","document","body","addEventListener","e","el","target","contains","tagName","parentElement","mf","node","url","items","length","properties","add","onMessage","addListener","hidden","window","7","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","apply","undefined","this","addV1","parser","options","maps","Array","isArray","version","livingStandard","Parser","rootPrefix","propertyPrefixes","excludeTags","rels","init","rootNode","baseUrl","filters","textFormat","dateFormat","overlappingVersions","impliedPropertiesByVersion","parseLatLonGeo","lang","rootID","errors","noContentErr","out","formatEmpty","data","mergeOptions","getDOMContext","hasMicroformats","prepareDOM","newRootNode","findFilterNodes","walkRoot","domUtils","canCloneDocument","clearUpDom","findRels","push","formatError","getParent","getParentTreeWalk","count","classItems","x","findRootNodes","getAttributeList","utils","startWith","appendCount","key","indexOf","relCount","countRels","isMicroformat","classes","getTopMostNode","getUfClassNames","forEach","map","JSON","parse","stringify","recursive","parentNode","nodeName","nodes","baseTag","href","location","querySelector","getAttribute","path","newDocument","getNodePath","cloneDocument","getNodeByPath","addIncludes","rel-urls","isString","createNode","y","getMapping","v1Name","hasAttributeValue","clone","appendChild","shouldInclude","uf","type","includeRoot","arr","getNodesByAttribute","child","context","children","walkTree","concat","getChildren","itemRootID","createUfObject","typeVersion","walkChildren","impliedRules","getFirstAncestorAttribute","cleanUfObject","ufName","parentClasses","rootItem","propertyName","propertyVersion","z","addedAsRoot","text","removePropPrefix","impliedValueRule","getValue","hasRootID","isAllowedPropertyVersion","appendRootID","className","getPValue","getEValue","getUValue","getDTValue","valueParse","getValueClass","getValueTitle","getAttrValFromTagList","html","expandURLs","resolve","fromValue","format","dates","isDuration","isTime","times","parseAmPmTime","ISODate","toString","id","rootids","hasAttribute","setAttribute","join","propertyType","trim","parseText","concatFragments","getNodesByAttributeValue","hasHClass","ufNameArr","classNames","item","prop","propName","v2Name","impiedRel","hasTagName","split","isLowerCase","subTree","a","getV2RootName","findRelImpied","b","names","isOnlyWhiteSpace","altValue","microformat","prefix","substr","attrName","attr","err","removeRootIds","removeAttribute","removeIncludes","constructor","impliedBackwardComp","impliedhFeedTitle","impliedName","impliedPhoto","impliedUrl","impliedValue","impliedDate","impliedGeo","getImpliedProperty","getNameAttr","photo","getPhotoAttr","getURLAttr","newDate","dateTimeUnion","tagList","getAttrFunction","descendant","getSingleDescendantOfType","getSingleDescendant","getAltValue","parentPropertyName","title","textContent","geoPair","parts","longitude","latitude","valid","replace","parseFloat","isNumber","hasProperties","addAttributeIncludes","addClassIncludes","attributeName","idList","apppendInclude","include","getElementById","markIncludeChildren","removeChild","relList","resolved","relUrl","getRelProperties","media","hreflang","relAlt","hasRel","isNaN","isFinite","propertyIsEnumerable","isFunction","test","toLowerCase","replaceCharAt","index","character","trimWhitespace","collapseWhiteSpace","sortObjects","reverse","getDOMParser","DOMParser","Components","createInstance","interfaces","nsIDOMParser","domParser","parseFromString","nodeType","ownerDocument","innerText","innerHTML","attributeValue","docNode","selector","attList","querySelectorAll","tagNames","attrValue","getDescendant","onlyOfType","countAll","countOfType","childNode","newNode","cloneNode","removeDescendantsByTagName","getElementsByTagName","elements","getElementText","getOrderedAttributes","nodeStr","outerHTML","attrs","attributes","indexNum","sort","decodeEntities","doc","createTextNode","nodeValue","implementation","createHTMLDocument","importNode","documentElement","replaceChild","getChildIndex","parent","childNodes","createElement","createNodeWithText","_domParser","_html","_nodes","_baseNode","_linkNode","URL","URI","dateString","clear","setFormatSep","arguments","clearDate","clearTime","clearTimeZone","setAutoProfileState","dY","dM","dD","dDDD","tH","tM","tS","tD","tzH","tzM","tzPN","autoProfile","sep","dsep","tsep","tzsep","tzZulu","setFormat","tzArray","position","datePart","timePart","timeZonePart","toUpperCase","substring","parseDate","parseTime","parseTimeZone","match","timeString","toTimeString","output","hasFullDate","hasDate","hasTime","hasTimeZone","hasAM","hasPM","removeAMPM","parseInt","date","time","isodate","isotime","charAt","splitTimeAndZone","chars","slice","blockLevelTags","walkTreeForText","normalise","clonedNode","trimmedNode","formatText","j","selfClosingElt","walkTreeForHtml","containerNode","post-office-box","street-address","extended-address","locality","region","postal-code","country-name","fn","adr","agent","bday","class","category","email","geo","label","logo","mailer","honorific-prefix","given-name","additional-name","family-name","honorific-suffix","nickname","note","org","p-organization-name","p-organization-unit","rev","role","sequence","sort-string","sound","tel","tz","uid","entry-title","entry-summary","entry-content","published","updated","author","summary","dtstart","dtend","description","duration","contact","organizer","attendee","attach","status","rdate","rrule","lister","dtlisted","dtexpired","price","listing","entry","source-org","dateline","item-license","principles","childStructure","organization-name","organization-unit","brand","review","identifier","ingredient","yield","instructions","nutrition","education","experience","skill","affiliation","rating","average","best","worst","votes","reviewer","dtreviewer","friend","acquaintance","met","co-worker","colleague","co-resident","neighbor","sibling","spouse","kin","muse","crush","sweetheart","me","license","nofollow","tag","self","bookmark","home","directory","enclosure","pronunciation","payment","External","DOMParser_proto","real_parseFromString","textHTML","textXML","htmlElInnerHTML","er","markup","doc_el","first_el","firstElementChild","childElementCount","localName"],"mappings":"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","file":"page.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 18);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 18:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _microformatShiv = __webpack_require__(7);\n\nvar _microformatShiv2 = _interopRequireDefault(_microformatShiv);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function () {\n  var CLASS_NAME = '__omnibear-selected-item';\n  var currentItem = void 0,\n      currentItemUrl = void 0;\n\n  function clearItem() {\n    if (currentItem) {\n      chrome.runtime.sendMessage({\n        action: 'clear-entry'\n      });\n      removeHighlight();\n    }\n  }\n\n  function removeHighlight() {\n    if (currentItem) {\n      console.log('removing class');\n      currentItem.classList.remove(CLASS_NAME);\n      currentItem = null;\n      currentItemUrl = null;\n    } else {\n      console.log('no currentItem');\n    }\n  }\n\n  document.body.addEventListener('click', function () {\n    clearItem();\n  });\n\n  document.body.addEventListener('contextmenu', function (e) {\n    clearItem();\n    var el = e.target;\n    while (!el.classList.contains('h-entry') && el.tagName != 'BODY') {\n      el = el.parentElement;\n    }\n\n    if (!el.classList.contains('h-entry')) {\n      return;\n    }\n    var mf = _microformatShiv2.default.get({ node: el });\n    var url = void 0;\n    if (mf.items.length && mf.items[0].properties && mf.items[0].properties.url) {\n      url = mf.items[0].properties.url[0];\n    }\n    if (url) {\n      chrome.runtime.sendMessage({\n        action: 'select-entry',\n        payload: {\n          url: url\n        }\n      });\n      el.classList.add(CLASS_NAME);\n      currentItem = el;\n      currentItemUrl = url;\n    }\n  });\n\n  function handleMessage(request, sender, sendResponse) {\n    switch (request.action) {\n      case 'remove-entry-highlight':\n        removeHighlight();\n        break;\n    }\n  }\n  chrome.runtime.onMessage.addListener(handleMessage);\n\n  if (!document.hidden) {\n    sendFocusMessage();\n  }\n  window.addEventListener('focus', sendFocusMessage);\n\n  function sendFocusMessage() {\n    chrome.runtime.sendMessage({\n      action: 'focus-window',\n      payload: {\n        selectedEntry: currentItemUrl\n      }\n    });\n  }\n})();\n\n/***/ }),\n\n/***/ 7:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n   microformat-shiv - v2.0.2\n   Built: 2016-10-26 10:10 - http://microformat-shiv.com\n   Copyright (c) 2016 Glenn Jones\n   Licensed MIT \n*/\n\n\nvar Microformats; // jshint ignore:line\n\n(function (root, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.Microformats = factory();\n  }\n}(this, function () {\n    \n    var modules = {};\n    \n\n\tmodules.version = '2.0.2';\n\tmodules.livingStandard = '2016-05-25T09:22:18Z';\n\n\t/**\n\t * constructor\n\t *\n\t */\n\tmodules.Parser = function () {\n\t\tthis.rootPrefix = 'h-';\n\t\tthis.propertyPrefixes = ['p-', 'dt-', 'u-', 'e-'];\n\t\tthis.excludeTags = ['br', 'hr'];\n\t};\n\n\n\t// create objects incase the v1 map modules don't load\n\tmodules.maps = (modules.maps)? modules.maps : {};\n\tmodules.rels = (modules.rels)? modules.rels : {};\n\n\n\tmodules.Parser.prototype = {\n\n\t\tinit: function(){\n\t\t\tthis.rootNode = null;\n\t\t\tthis.document = null;\n\t\t\tthis.options = {\n\t\t\t\t'baseUrl': '',\n\t\t\t\t'filters': [],\n\t\t\t\t'textFormat': 'whitespacetrimmed',\n\t\t\t\t'dateFormat': 'auto', // microformat2 for testing\n\t\t\t\t'overlappingVersions': false,\n\t\t\t\t'impliedPropertiesByVersion': true,\n\t\t\t\t'parseLatLonGeo': false,\n\t\t\t\t'lang': false\n\t\t\t};\n\t\t\tthis.rootID = 0;\n\t\t\tthis.errors = [];\n\t\t\tthis.noContentErr = 'No options.node or options.html was provided and no document object could be found.';\n\t\t},\n\n\n\t\t/**\n\t\t * internal parse function\n\t\t *\n\t\t * @param  {Object} options\n\t\t * @return {Object}\n\t\t */\n\t\tget: function(options) {\n\t\t\tvar out = this.formatEmpty(),\n\t\t\t\tdata = [],\n\t\t\t\trels;\n\n\t\t\tthis.init();\n\t\t\toptions = (options)? options : {};\n\t\t\tthis.mergeOptions(options);\n\t\t\tthis.getDOMContext( options );\n\n\t\t\t// if we do not have any context create error\n\t\t\tif(!this.rootNode || !this.document){\n\t\t\t\tthis.errors.push(this.noContentErr);\n\t\t\t}else{\n\n\t\t\t\t// only parse h-* microformats if we need to\n\t\t\t\t// this is added to speed up parsing\n\t\t\t\tif(this.hasMicroformats(this.rootNode, options)){\n\t\t\t\t\tthis.prepareDOM( options );\n\n\t\t\t\t\tif(this.options.filters.length > 0){\n\t\t\t\t\t\t// parse flat list of items\n\t\t\t\t\t\tvar newRootNode = this.findFilterNodes(this.rootNode, this.options.filters);\n\t\t\t\t\t\tdata = this.walkRoot(newRootNode);\n\t\t\t\t\t}else{\n\t\t\t\t\t\t// parse whole document from root\n\t\t\t\t\t\tdata = this.walkRoot(this.rootNode);\n\t\t\t\t\t}\n\n\t\t\t\t\tout.items = data;\n\t\t\t\t\t// don't clear-up DOM if it was cloned\n\t\t\t\t\tif(modules.domUtils.canCloneDocument(this.document) === false){\n\t\t\t\t\t\tthis.clearUpDom(this.rootNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// find any rels\n\t\t\t\tif(this.findRels){\n\t\t\t\t\trels = this.findRels(this.rootNode);\n\t\t\t\t\tout.rels = rels.rels;\n\t\t\t\t\tout['rel-urls'] = rels['rel-urls'];\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif(this.errors.length > 0){\n\t\t\t\treturn this.formatError();\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * parse to get parent microformat of passed node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} options\n\t\t * @return {Object}\n\t\t */\n\t\tgetParent: function(node, options) {\n\t\t\tthis.init();\n\t\t\toptions = (options)? options : {};\n\n\t\t\tif(node){\n\t\t\t\treturn this.getParentTreeWalk(node, options);\n\t\t\t}else{\n\t\t\t\tthis.errors.push(this.noContentErr);\n\t\t\t\treturn this.formatError();\n\t\t\t}\n\t\t},\n\n\n\t    /**\n\t\t * get the count of microformats\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t * @return {Int}\n\t\t */\n\t\tcount: function( options ) {\n\t\t\tvar out = {},\n\t\t\t\titems,\n\t\t\t\tclassItems,\n\t\t\t\tx,\n\t\t\t\ti;\n\n\t\t\tthis.init();\n\t\t\toptions = (options)? options : {};\n\t\t\tthis.getDOMContext( options );\n\n\t\t\t// if we do not have any context create error\n\t\t\tif(!this.rootNode || !this.document){\n\t\t\t\treturn {'errors': [this.noContentErr]};\n\t\t\t}else{\n\n\t\t\t\titems = this.findRootNodes( this.rootNode, true );\n\t\t\t\ti = items.length;\n\t\t\t\twhile(i--) {\n\t\t\t\t\tclassItems = modules.domUtils.getAttributeList(items[i], 'class');\n\t\t\t\t\tx = classItems.length;\n\t\t\t\t\twhile(x--) {\n\t\t\t\t\t\t// find v2 names\n\t\t\t\t\t\tif(modules.utils.startWith( classItems[x], 'h-' )){\n\t\t\t\t\t\t\tthis.appendCount(classItems[x], 1, out);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// find v1 names\n\t\t\t\t\t\tfor(var key in modules.maps) {\n\t\t\t\t\t\t\t// dont double count if v1 and v2 roots are present\n\t\t\t\t\t\t\tif(modules.maps[key].root === classItems[x] && classItems.indexOf(key) === -1) {\n\t\t\t\t\t\t\t\tthis.appendCount(key, 1, out);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar relCount = this.countRels( this.rootNode );\n\t\t\t\tif(relCount > 0){\n\t\t\t\t\tout.rels = relCount;\n\t\t\t\t}\n\n\t\t\t\treturn out;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * does a node have a class that marks it as a microformats root\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Objecte} options\n\t\t * @return {Boolean}\n\t\t */\n\t\tisMicroformat: function( node, options ) {\n\t\t\tvar classes,\n\t\t\t\ti;\n\n\t\t\tif(!node){\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// if documemt gets topmost node\n\t\t\tnode = modules.domUtils.getTopMostNode( node );\n\n\t\t\t// look for h-* microformats\n\t\t\tclasses = this.getUfClassNames(node);\n\t\t\tif(options && options.filters && modules.utils.isArray(options.filters)){\n\t\t\t\ti = options.filters.length;\n\t\t\t\twhile(i--) {\n\t\t\t\t\tif(classes.root.indexOf(options.filters[i]) > -1){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}else{\n\t\t\t\treturn (classes.root.length > 0);\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * does a node or its children have microformats\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Objecte} options\n\t\t * @return {Boolean}\n\t\t */\n\t\thasMicroformats: function( node, options ) {\n\t\t\tvar items,\n\t\t\t\ti;\n\n\t\t\tif(!node){\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// if browser based documemt get topmost node\n\t\t\tnode = modules.domUtils.getTopMostNode( node );\n\n\t\t\t// returns all microformat roots\n\t\t\titems = this.findRootNodes( node, true );\n\t\t\tif(options && options.filters && modules.utils.isArray(options.filters)){\n\t\t\t\ti = items.length;\n\t\t\t\twhile(i--) {\n\t\t\t\t\tif( this.isMicroformat( items[i], options ) ){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}else{\n\t\t\t\treturn (items.length > 0);\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * add a new v1 mapping object to parser\n\t\t *\n\t\t * @param  {Array} maps\n\t\t */\n\t\tadd: function( maps ){\n\t\t\tmaps.forEach(function(map){\n\t\t\t\tif(map && map.root && map.name && map.properties){\n\t\t\t\tmodules.maps[map.name] = JSON.parse(JSON.stringify(map));\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\n\t\t/**\n\t\t * internal parse to get parent microformats by walking up the tree\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} options\n\t\t * @param  {Int} recursive\n\t\t * @return {Object}\n\t\t */\n\t\tgetParentTreeWalk: function (node, options, recursive) {\n\t\t\toptions = (options)? options : {};\n\n\t\t\t// recursive calls\n\t\t    if (recursive === undefined) {\n\t\t        if (node.parentNode && node.nodeName !== 'HTML'){\n\t\t            return this.getParentTreeWalk(node.parentNode, options, true);\n\t\t\t\t}else{\n\t\t            return this.formatEmpty();\n\t\t\t\t}\n\t\t    }\n\t\t    if (node !== null && node !== undefined && node.parentNode) {\n\t\t        if (this.isMicroformat( node, options )) {\n\t\t\t\t\t// if we have a match return microformat\n\t\t\t\t\toptions.node = node;\n\t\t            return this.get( options );\n\t\t        }else{\n\t\t            return this.getParentTreeWalk(node.parentNode, options, true);\n\t\t        }\n\t\t    }else{\n\t\t        return this.formatEmpty();\n\t\t    }\n\t\t},\n\n\n\n\t\t/**\n\t\t * configures what are the base DOM objects for parsing\n\t\t *\n\t\t * @param  {Object} options\n\t\t */\n\t\tgetDOMContext: function( options ){\n\t\t\tvar nodes = modules.domUtils.getDOMContext( options );\n\t\t\tthis.rootNode = nodes.rootNode;\n\t\t\tthis.document = nodes.document;\n\t\t},\n\n\n\t\t/**\n\t\t * prepares DOM before the parse begins\n\t\t *\n\t\t * @param  {Object} options\n\t\t * @return {Boolean}\n\t\t */\n\t\tprepareDOM: function( options ){\n\t\t\tvar baseTag,\n\t\t\t\thref;\n\n            // use current document to define baseUrl, try/catch needed for IE10+ error\n            try {\n                if (!options.baseUrl && this.document && this.document.location) {\n                    this.options.baseUrl = this.document.location.href;\n                }\n            } catch (e) {\n                // there is no alt action\n            }\n\n\n\t\t\t// find base tag to set baseUrl\n\t\t\tbaseTag = modules.domUtils.querySelector(this.document,'base');\n\t\t\tif(baseTag) {\n\t\t\t\thref = modules.domUtils.getAttribute(baseTag, 'href');\n\t\t\t\tif(href){\n\t\t\t\t\tthis.options.baseUrl = href;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// get path to rootNode\n\t\t\t// then clone document\n\t\t\t// then reset the rootNode to its cloned version in a new document\n\t\t\tvar path,\n\t\t\t\tnewDocument,\n\t\t\t\tnewRootNode;\n\n\t\t\tpath = modules.domUtils.getNodePath(this.rootNode);\n\t\t\tnewDocument = modules.domUtils.cloneDocument(this.document);\n\t\t\tnewRootNode = modules.domUtils.getNodeByPath(newDocument, path);\n\n\t\t\t// check results as early IE fails\n\t\t\tif(newDocument && newRootNode){\n\t\t\t\tthis.document = newDocument;\n\t\t\t\tthis.rootNode = newRootNode;\n\t\t\t}\n\n\t\t\t// add includes\n\t\t\tif(this.addIncludes){\n\t\t\t\tthis.addIncludes( this.document );\n\t\t\t}\n\n\t\t\treturn (this.rootNode && this.document);\n\t\t},\n\n\n\t\t/**\n\t\t * returns an empty structure with errors\n\t\t *\n\t\t *   @return {Object}\n\t\t */\n\t\tformatError: function(){\n\t\t\tvar out = this.formatEmpty();\n\t\t\tout.errors = this.errors;\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * returns an empty structure\n\t\t *\n\t\t *   @return {Object}\n\t\t */\n\t\tformatEmpty: function(){\n\t\t\treturn {\n\t\t\t    'items': [],\n\t\t\t    'rels': {},\n\t\t\t    'rel-urls': {}\n\t\t\t};\n\t\t},\n\n\n\t\t// find microformats of a given type and return node structures\n\t\tfindFilterNodes: function(rootNode, filters) {\n            if(modules.utils.isString(filters)){\n                filters = [filters];\n            }\n\t\t\tvar newRootNode = modules.domUtils.createNode('div'),\n\t\t\t\titems = this.findRootNodes(rootNode, true),\n\t\t\t\ti = 0,\n\t\t\t\tx = 0,\n\t\t\t\ty = 0;\n\n            // add v1 names\n            y = filters.length;\n            while (y--) {\n                if(this.getMapping(filters[y])){\n                    var v1Name = this.getMapping(filters[y]).root;\n                    filters.push(v1Name);\n                }\n            }\n\n\t\t\tif(items){\n\t\t\t\ti = items.length;\n\t\t\t\twhile(x < i) {\n\t\t\t\t\t// append matching nodes into newRootNode\n\t\t\t\t\ty = filters.length;\n\t\t\t\t\twhile (y--) {\n\t\t\t\t\t\tif(modules.domUtils.hasAttributeValue(items[x], 'class', filters[y])){\n\t\t\t\t\t\t\tvar clone = modules.domUtils.clone(items[x]);\n\t\t\t\t\t\t\tmodules.domUtils.appendChild(newRootNode, clone);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn newRootNode;\n\t\t},\n\n\n\t\t/**\n\t\t * appends data to output object for count\n\t\t *\n\t\t * @param  {string} name\n\t\t * @param  {Int} count\n\t\t * @param  {Object}\n\t\t */\n\t\tappendCount: function(name, count, out){\n\t\t\tif(out[name]){\n\t\t\t\tout[name] = out[name] + count;\n\t\t\t}else{\n\t\t\t\tout[name] = count;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * is the microformats type in the filter list\n\t\t *\n\t\t * @param  {Object} uf\n\t\t * @param  {Array} filters\n\t\t * @return {Boolean}\n\t\t */\n\t\tshouldInclude: function(uf, filters) {\n\t\t\tvar i;\n\n\t\t\tif(modules.utils.isArray(filters) && filters.length > 0) {\n\t\t\t\ti = filters.length;\n\t\t\t\twhile(i--) {\n\t\t\t\t\tif(uf.type[0] === filters[i]) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * finds all microformat roots in a rootNode\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t * @param  {Boolean} includeRoot\n\t\t * @return {Array}\n\t\t */\n\t\tfindRootNodes: function(rootNode, includeRoot) {\n\t\t\tvar arr = null,\n\t\t\t\tout = [],\n\t\t\t\tclassList = [],\n\t\t\t\titems,\n\t\t\t\tx,\n\t\t\t\ti,\n\t\t\t\ty,\n\t\t\t\tkey;\n\n\n\t\t\t// build an array of v1 root names\n\t\t\tfor(key in modules.maps) {\n\t\t\t\tif (modules.maps.hasOwnProperty(key)) {\n\t\t\t\t\tclassList.push(modules.maps[key].root);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// get all elements that have a class attribute\n\t\t\tincludeRoot = (includeRoot) ? includeRoot : false;\n\t\t\tif(includeRoot && rootNode.parentNode) {\n\t\t\t\tarr = modules.domUtils.getNodesByAttribute(rootNode.parentNode, 'class');\n\t\t\t} else {\n\t\t\t\tarr = modules.domUtils.getNodesByAttribute(rootNode, 'class');\n\t\t\t}\n\n\t\t\t// loop elements that have a class attribute\n\t\t\tx = 0;\n\t\t\ti = arr.length;\n\t\t\twhile(x < i) {\n\n\t\t\t\titems = modules.domUtils.getAttributeList(arr[x], 'class');\n\n\t\t\t\t// loop classes on an element\n\t\t\t\ty = items.length;\n\t\t\t\twhile(y--) {\n\t\t\t\t\t// match v1 root names\n\t\t\t\t\tif(classList.indexOf(items[y]) > -1) {\n\t\t\t\t\t\tout.push(arr[x]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// match v2 root name prefix\n\t\t\t\t\tif(modules.utils.startWith(items[y], 'h-')) {\n\t\t\t\t\t\tout.push(arr[x]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tx++;\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * starts the tree walk to find microformats\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {Array}\n\t\t */\n\t\twalkRoot: function(node){\n\t\t\tvar context = this,\n\t\t\t\tchildren = [],\n\t\t\t\tchild,\n\t\t\t\tclasses,\n\t\t\t\titems = [],\n\t\t\t\tout = [];\n\n\t\t\tclasses = this.getUfClassNames(node);\n\t\t\t// if it is a root microformat node\n\t\t\tif(classes && classes.root.length > 0){\n\t\t\t\titems = this.walkTree(node);\n\n\t\t\t\tif(items.length > 0){\n\t\t\t\t\tout = out.concat(items);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t// check if there are children and one of the children has a root microformat\n\t\t\t\tchildren = modules.domUtils.getChildren( node );\n\t\t\t\tif(children && children.length > 0 && this.findRootNodes(node, true).length > -1){\n\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\t\tchild = children[i];\n\t\t\t\t\t\titems = context.walkRoot(child);\n\t\t\t\t\t\tif(items.length > 0){\n\t\t\t\t\t\t\tout = out.concat(items);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * starts the tree walking for a single microformat\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {Array}\n\t\t */\n\t\twalkTree: function(node) {\n\t\t\tvar classes,\n\t\t\t\tout = [],\n\t\t\t\tobj,\n\t\t\t\titemRootID;\n\n\t\t\t// loop roots found on one element\n\t\t\tclasses = this.getUfClassNames(node);\n\t\t\tif(classes && classes.root.length && classes.root.length > 0){\n\n\t\t\t\tthis.rootID++;\n\t\t\t\titemRootID = this.rootID;\n\t\t\t\tobj = this.createUfObject(classes.root, classes.typeVersion);\n\n\t\t\t\tthis.walkChildren(node, obj, classes.root, itemRootID, classes);\n\t\t\t\tif(this.impliedRules){\n\t\t\t\t\tthis.impliedRules(node, obj, classes);\n\t\t\t\t}\n\n\t\t\t\tif(this.options.lang === true){\n\t\t\t\t\tvar lang = modules.domUtils.getFirstAncestorAttribute(node, 'lang');\n\t\t\t\t\tif(lang){\n\t\t\t\t\t\tobj.lang = lang;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tout.push( this.cleanUfObject(obj) );\n\n\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * finds child properties of microformat\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} out\n\t\t * @param  {String} ufName\n\t\t * @param  {Int} rootID\n\t\t * @param  {Object} parentClasses\n\t\t */\n\t\twalkChildren: function(node, out, ufName, rootID, parentClasses) {\n\t\t\tvar context = this,\n\t\t\t\tchildren = [],\n\t\t\t\trootItem,\n\t\t\t\titemRootID,\n\t\t\t\tvalue,\n\t\t\t\tpropertyName,\n\t\t\t\tpropertyVersion,\n\t\t\t\ti,\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t\tz,\n\t\t\t\tchild;\n\n\t\t\tchildren = modules.domUtils.getChildren( node );\n\n\t\t\ty = 0;\n\t\t\tz = children.length;\n\t\t\twhile(y < z) {\n\t\t\t\tchild = children[y];\n\n\t\t\t\t// get microformat classes for this single element\n\t\t\t\tvar classes = context.getUfClassNames(child, ufName);\n\n\t\t\t\t// a property which is a microformat\n\t\t\t\tif(classes.root.length > 0 && classes.properties.length > 0 && !child.addedAsRoot) {\n\t\t\t\t\t// create object with type, property and value\n\t\t\t\t\trootItem = context.createUfObject(\n\t\t\t\t\t\tclasses.root,\n\t\t\t\t\t\tclasses.typeVersion,\n\t\t\t\t\t\tmodules.text.parse(this.document, child, context.options.textFormat)\n\t\t\t\t\t);\n\n\t\t\t\t\t// add the microformat as an array of properties\n\t\t\t\t\tpropertyName = context.removePropPrefix(classes.properties[0][0]);\n\n\t\t\t\t\t// modifies value with \"implied value rule\"\n\t\t\t\t\tif(parentClasses && parentClasses.root.length === 1 && parentClasses.properties.length === 1){\n\t\t\t\t\t\tif(context.impliedValueRule){\n\t\t\t\t\t\t\tout = context.impliedValueRule(out, parentClasses.properties[0][0], classes.properties[0][0], value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(out.properties[propertyName]) {\n\t\t\t\t\t\tout.properties[propertyName].push(rootItem);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tout.properties[propertyName] = [rootItem];\n\t\t\t\t\t}\n\n\t\t\t\t\tcontext.rootID++;\n\t\t\t\t\t// used to stop duplication in heavily nested structures\n\t\t\t\t\tchild.addedAsRoot = true;\n\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ti = rootItem.type.length;\n\t\t\t\t\titemRootID = context.rootID;\n\t\t\t\t\twhile(x < i) {\n\t\t\t\t\t\tcontext.walkChildren(child, rootItem, rootItem.type, itemRootID, classes);\n\t\t\t\t\t\tx++;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.impliedRules){\n\t\t\t\t\t\tcontext.impliedRules(child, rootItem, classes);\n\t\t\t\t\t}\n\t\t\t\t\tthis.cleanUfObject(rootItem);\n\n\t\t\t\t}\n\n\t\t\t\t// a property which is NOT a microformat and has not been used for a given root element\n\t\t\t\tif(classes.root.length === 0 && classes.properties.length > 0) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ti = classes.properties.length;\n\t\t\t\t\twhile(x < i) {\n\n\t\t\t\t\t\tvalue = context.getValue(child, classes.properties[x][0], out);\n\t\t\t\t\t\tpropertyName = context.removePropPrefix(classes.properties[x][0]);\n\t\t\t\t\t\tpropertyVersion = classes.properties[x][1];\n\n\t\t\t\t\t\t// modifies value with \"implied value rule\"\n\t\t\t\t\t\tif(parentClasses && parentClasses.root.length === 1 && parentClasses.properties.length === 1){\n\t\t\t\t\t\t\tif(context.impliedValueRule){\n\t\t\t\t\t\t\t\tout = context.impliedValueRule(out, parentClasses.properties[0][0], classes.properties[x][0], value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if we have not added this value into a property with the same name already\n\t\t\t\t\t\tif(!context.hasRootID(child, rootID, propertyName)) {\n\t\t\t\t\t\t\t// check the root and property is the same version or if overlapping versions are allowed\n\t\t\t\t\t\t\tif( context.isAllowedPropertyVersion( out.typeVersion, propertyVersion ) ){\n\t\t\t\t\t\t\t\t// add the property as an array of properties\n\t\t\t\t\t\t\t\tif(out.properties[propertyName]) {\n\t\t\t\t\t\t\t\t\tout.properties[propertyName].push(value);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tout.properties[propertyName] = [value];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// add rootid to node so we can track its use\n\t\t\t\t\t\t\t\tcontext.appendRootID(child, rootID, propertyName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tx++;\n\t\t\t\t\t}\n\n\t\t\t\t\tcontext.walkChildren(child, out, ufName, rootID, classes);\n\t\t\t\t}\n\n\t\t\t\t// if the node has no microformat classes, see if its children have\n\t\t\t\tif(classes.root.length === 0 && classes.properties.length === 0) {\n\t\t\t\t\tcontext.walkChildren(child, out, ufName, rootID, classes);\n\t\t\t\t}\n\n\t\t\t\t// if the node is a child root add it to the children tree\n\t\t\t\tif(classes.root.length > 0 && classes.properties.length === 0) {\n\n\t\t\t\t\t// create object with type, property and value\n\t\t\t\t\trootItem = context.createUfObject(\n\t\t\t\t\t\tclasses.root,\n\t\t\t\t\t\tclasses.typeVersion,\n\t\t\t\t\t\tmodules.text.parse(this.document, child, context.options.textFormat)\n\t\t\t\t\t);\n\n\t\t\t\t\t// add the microformat as an array of properties\n\t\t\t\t\tif(!out.children){\n\t\t\t\t\t\tout.children =  [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!context.hasRootID(child, rootID, 'child-root')) {\n\t\t\t\t\t\tout.children.push( rootItem );\n\t\t\t\t\t\tcontext.appendRootID(child, rootID, 'child-root');\n\t\t\t\t\t\tcontext.rootID++;\n\t\t\t\t\t}\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ti = rootItem.type.length;\n\t\t\t\t\titemRootID = context.rootID;\n\t\t\t\t\twhile(x < i) {\n\t\t\t\t\t\tcontext.walkChildren(child, rootItem, rootItem.type, itemRootID, classes);\n\t\t\t\t\t\tx++;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.impliedRules){\n\t\t\t\t\t\tcontext.impliedRules(child, rootItem, classes);\n\t\t\t\t\t}\n\t\t\t\t\tcontext.cleanUfObject( rootItem );\n\n\t\t\t\t}\n\n\n\n\t\t\t\ty++;\n\t\t\t}\n\n\t\t},\n\n\n\n\n\t\t/**\n\t\t * gets the value of a property from a node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} className\n\t\t * @param  {Object} uf\n\t\t * @return {String || Object}\n\t\t */\n\t\tgetValue: function(node, className, uf) {\n\t\t\tvar value = '';\n\n\t\t\tif(modules.utils.startWith(className, 'p-')) {\n\t\t\t\tvalue = this.getPValue(node, true);\n\t\t\t}\n\n\t\t\tif(modules.utils.startWith(className, 'e-')) {\n\t\t\t\tvalue = this.getEValue(node);\n\t\t\t}\n\n\t\t\tif(modules.utils.startWith(className, 'u-')) {\n\t\t\t\tvalue = this.getUValue(node, true);\n\t\t\t}\n\n\t\t\tif(modules.utils.startWith(className, 'dt-')) {\n\t\t\t\tvalue = this.getDTValue(node, className, uf, true);\n\t\t\t}\n\t\t\treturn value;\n\t\t},\n\n\n\t\t/**\n\t\t * gets the value of a node which contains a 'p-' property\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Boolean} valueParse\n\t\t * @return {String}\n\t\t */\n\t\tgetPValue: function(node, valueParse) {\n\t\t\tvar out = '';\n\t\t\tif(valueParse) {\n\t\t\t\tout = this.getValueClass(node, 'p');\n\t\t\t}\n\n\t\t\tif(!out && valueParse) {\n\t\t\t\tout = this.getValueTitle(node);\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['abbr'], 'title');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['data','input'], 'value');\n\t\t\t}\n\n\t\t\tif(node.name === 'br' || node.name === 'hr') {\n\t\t\t\tout = '';\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['img', 'area'], 'alt');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.text.parse(this.document, node, this.options.textFormat);\n\t\t\t}\n\n\t\t\treturn(out) ? out : '';\n\t\t},\n\n\n\t\t/**\n\t\t * gets the value of a node which contains the 'e-' property\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {Object}\n\t\t */\n\t\tgetEValue: function(node) {\n\n\t\t\tvar out = {value: '', html: ''};\n\n\t\t\tthis.expandURLs(node, 'src', this.options.baseUrl);\n\t\t\tthis.expandURLs(node, 'href', this.options.baseUrl);\n\n\t\t\tout.value = modules.text.parse(this.document, node, this.options.textFormat);\n\t\t\tout.html = modules.html.parse(node);\n\n\t\t\tif(this.options.lang === true){\n\t\t\t\tvar lang = modules.domUtils.getFirstAncestorAttribute(node, 'lang');\n\t\t\t\tif(lang){\n\t\t\t\t\tout.lang = lang;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * gets the value of a node which contains the 'u-' property\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Boolean} valueParse\n\t\t * @return {String}\n\t\t */\n\t\tgetUValue: function(node, valueParse) {\n\t\t\tvar out = '';\n\t\t\tif(valueParse) {\n\t\t\t\tout = this.getValueClass(node, 'u');\n\t\t\t}\n\n\t\t\tif(!out && valueParse) {\n\t\t\t\tout = this.getValueTitle(node);\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['a', 'area'], 'href');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['img','audio','video','source'], 'src');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['video'], 'poster');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['object'], 'data');\n\t\t\t}\n\n\t\t\t// if we have no protocol separator, turn relative url to absolute url\n\t\t\tif(out && out !== '' && out.indexOf('://') === -1) {\n\t\t\t\tout = modules.url.resolve(out, this.options.baseUrl);\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['abbr'], 'title');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['data','input'], 'value');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.text.parse(this.document, node, this.options.textFormat);\n\t\t\t}\n\n\t\t\treturn(out) ? out : '';\n\t\t},\n\n\n\t\t/**\n\t\t * gets the value of a node which contains the 'dt-' property\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} className\n\t\t * @param  {Object} uf\n\t\t * @param  {Boolean} valueParse\n\t\t * @return {String}\n\t\t */\n\t\tgetDTValue: function(node, className, uf, valueParse) {\n\t\t\tvar out = '',\n\t\t\t\tfromValue = false;\n\n\t\t\tif(valueParse) {\n\t\t\t\tout = this.getValueClass(node, 'dt');\n\t\t\t\tif(out){\n\t\t\t\t\tfromValue = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!out && valueParse) {\n\t\t\t\tout = this.getValueTitle(node);\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['time', 'ins', 'del'], 'datetime');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['abbr'], 'title');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['data', 'input'], 'value');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.text.parse(this.document, node, this.options.textFormat);\n\t\t\t}\n\n\t\t\tif(out) {\n\t\t\t\tvar format = (fromValue)? 'microformat2' : this.options.dateFormat;\n\t\t\t\tif(modules.dates.isDuration(out)) {\n\t\t\t\t\t// just duration\n\t\t\t\t\treturn out;\n\t\t\t\t} else if(modules.dates.isTime(out)) {\n\t\t\t\t\t// just time or time+timezone\n\t\t\t\t\tif(uf) {\n\t\t\t\t\t\tuf.times.push([className, modules.dates.parseAmPmTime(out, format)]);\n\t\t\t\t\t}\n\t\t\t\t\treturn modules.dates.parseAmPmTime(out, format);\n\t\t\t\t} else {\n\t\t\t\t\t// returns a date - microformat profile\n\t\t\t\t\tif(uf) {\n\t\t\t\t\t\tuf.dates.push([className, new modules.ISODate(out).toString( format )]);\n\t\t\t\t\t}\n\t\t\t\t\treturn new modules.ISODate(out).toString( format );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * appends a new rootid to a given node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} id\n\t\t * @param  {String} propertyName\n\t\t */\n\t\tappendRootID: function(node, id, propertyName) {\n\t\t\tif(this.hasRootID(node, id, propertyName) === false){\n\t\t\t\tvar rootids = [];\n\t\t\t\tif(modules.domUtils.hasAttribute(node,'rootids')){\n\t\t\t\t\trootids = modules.domUtils.getAttributeList(node,'rootids');\n\t\t\t\t}\n\t\t\t\trootids.push('id' + id + '-' + propertyName);\n\t\t\t\tmodules.domUtils.setAttribute(node, 'rootids', rootids.join(' '));\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * does a given node already have a rootid\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} id\n\t\t * @param  {String} propertyName\n\t\t * @return {Boolean}\n\t\t */\n\t\thasRootID: function(node, id, propertyName) {\n\t\t\tvar rootids = [];\n\t\t\tif(!modules.domUtils.hasAttribute(node,'rootids')){\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\trootids = modules.domUtils.getAttributeList(node, 'rootids');\n\t\t\t\treturn (rootids.indexOf('id' + id + '-' + propertyName) > -1);\n\t\t\t}\n\t\t},\n\n\n\n\t\t/**\n\t\t * gets the text of any child nodes with a class value\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} propertyName\n\t\t * @return {String || null}\n\t\t */\n\t\tgetValueClass: function(node, propertyType) {\n\t\t\tvar context = this,\n\t\t\t\tchildren = [],\n\t\t\t\tout = [],\n\t\t\t\tchild,\n\t\t\t\tx,\n\t\t\t\ti;\n\n\t\t\tchildren = modules.domUtils.getChildren( node );\n\n\t\t\tx = 0;\n\t\t\ti = children.length;\n\t\t\twhile(x < i) {\n\t\t\t\tchild = children[x];\n\t\t\t\tvar value = null;\n\t\t\t\tif(modules.domUtils.hasAttributeValue(child, 'class', 'value')) {\n\t\t\t\t\tswitch(propertyType) {\n\t\t\t\t\tcase 'p':\n\t\t\t\t\t\tvalue = context.getPValue(child, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'u':\n\t\t\t\t\t\tvalue = context.getUValue(child, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'dt':\n\t\t\t\t\t\tvalue = context.getDTValue(child, '', null, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(value) {\n\t\t\t\t\t\tout.push(modules.utils.trim(value));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tx++;\n\t\t\t}\n\t\t\tif(out.length > 0) {\n\t\t\t\tif(propertyType === 'p') {\n\t\t\t\t\treturn modules.text.parseText( this.document, out.join(''), this.options.textFormat);\n\t\t\t\t}\n\t\t\t\tif(propertyType === 'u') {\n\t\t\t\t\treturn out.join('');\n\t\t\t\t}\n\t\t\t\tif(propertyType === 'dt') {\n\t\t\t\t\tvar format = 'microformat2';\n\t\t\t\t\treturn modules.dates.concatFragments(out,format).toString(format);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * returns a single string of the 'title' attr from all\n\t\t * the child nodes with the class 'value-title'\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\tgetValueTitle: function(node) {\n\t\t\tvar out = [],\n\t\t\t\titems,\n\t\t\t\ti,\n\t\t\t\tx;\n\n\t\t\titems = modules.domUtils.getNodesByAttributeValue(node, 'class', 'value-title');\n\t\t\tx = 0;\n\t\t\ti = items.length;\n\t\t\twhile(x < i) {\n\t\t\t\tif(modules.domUtils.hasAttribute(items[x], 'title')) {\n\t\t\t\t\tout.push(modules.domUtils.getAttribute(items[x], 'title'));\n\t\t\t\t}\n\t\t\t\tx++;\n\t\t\t}\n\t\t\treturn out.join('');\n\t\t},\n\n\n\t   /**\n\t\t * finds out whether a node has h-* class v1 and v2\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {Boolean}\n\t\t */\n\t\thasHClass: function(node){\n\t\t\tvar classes = this.getUfClassNames(node);\n\t\t\tif(classes.root && classes.root.length > 0){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * get both the root and property class names from a node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Array} ufNameArr\n\t\t * @return {Object}\n\t\t */\n\t\tgetUfClassNames: function(node, ufNameArr) {\n\t\t\tvar context = this,\n\t\t\t\tout = {\n\t\t\t\t\t'root': [],\n\t\t\t\t\t'properties': []\n\t\t\t\t},\n\t\t\t\tclassNames,\n\t\t\t\tkey,\n\t\t\t\titems,\n\t\t\t\titem,\n\t\t\t\ti,\n\t\t\t\tx,\n\t\t\t\tz,\n\t\t\t\ty,\n\t\t\t\tmap,\n\t\t\t\tprop,\n\t\t\t\tpropName,\n\t\t\t\tv2Name,\n\t\t\t\timpiedRel,\n\t\t\t\tufName;\n\n\t\t\t// don't get classes from excluded list of tags\n\t\t\tif(modules.domUtils.hasTagName(node, this.excludeTags) === false){\n\n\t\t\t\t// find classes for node\n\t\t\t\tclassNames = modules.domUtils.getAttribute(node, 'class');\n\t\t\t\tif(classNames) {\n\t\t\t\t\titems = classNames.split(' ');\n\t\t\t\t\tx = 0;\n\t\t\t\t\ti = items.length;\n\t\t\t\t\twhile(x < i) {\n\n\t\t\t\t\t\titem = modules.utils.trim(items[x]);\n\n\t\t\t\t\t\t// test for root prefix - v2\n\t\t\t\t\t\tif(modules.utils.startWith(item, context.rootPrefix) && modules.utils.isLowerCase(item)) {\n\t\t\t\t\t\t\tif(out.root.indexOf(item) === -1){\n\t\t\t\t\t\t\t\tout.root.push(item);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.typeVersion = 'v2';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// test for property prefix - v2\n\t\t\t\t\t\tz = context.propertyPrefixes.length;\n\t\t\t\t\t\twhile(z--) {\n\t\t\t\t\t\t\tif(modules.utils.startWith(item, context.propertyPrefixes[z]) && modules.utils.isLowerCase(item)) {\n\t\t\t\t\t\t\t\tout.properties.push([item,'v2']);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// test for mapped root classnames v1\n\t\t\t\t\t\tfor(key in modules.maps) {\n\t\t\t\t\t\t\tif(modules.maps.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\t// only add a root once\n\t\t\t\t\t\t\t\tif(modules.maps[key].root === item && out.root.indexOf(key) === -1) {\n\t\t\t\t\t\t\t\t\t// if root map has subTree set to true\n\t\t\t\t\t\t\t\t\t// test to see if we should create a property or root\n\t\t\t\t\t\t\t\t\tif(modules.maps[key].subTree) {\n\t\t\t\t\t\t\t\t\t\tout.properties.push(['p-' + modules.maps[key].root, 'v1']);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tout.root.push(key);\n\t\t\t\t\t\t\t\t\t\tif(!out.typeVersion){\n\t\t\t\t\t\t\t\t\t\t\tout.typeVersion = 'v1';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t// test for mapped property classnames v1\n\t\t\t\t\t\tif(ufNameArr){\n\t\t\t\t\t\t\tfor (var a = 0; a < ufNameArr.length; a++) {\n\t\t\t\t\t\t\t\tufName = ufNameArr[a];\n\t\t\t\t\t\t\t\t// get mapped property v1 microformat\n\t\t\t\t\t\t\t\tmap = context.getMapping(ufName);\n\t\t\t\t\t\t\t\tif(map) {\n\t\t\t\t\t\t\t\t\tfor(key in map.properties) {\n\t\t\t\t\t\t\t\t\t\tif (map.properties.hasOwnProperty(key)) {\n\n\t\t\t\t\t\t\t\t\t\t\tprop = map.properties[key];\n\t\t\t\t\t\t\t\t\t\t\tpropName = (prop.map) ? prop.map : 'p-' + key;\n\n\t\t\t\t\t\t\t\t\t\t\tif(key === item) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(prop.uf) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// loop all the classList make sure\n\t\t\t\t\t\t\t\t\t\t\t\t\t//   1. this property is a root\n\t\t\t\t\t\t\t\t\t\t\t\t\t//   2. that there is not already an equivalent v2 property i.e. url and u-url on the same element\n\t\t\t\t\t\t\t\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\twhile(y < i) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tv2Name = context.getV2RootName(items[y]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// add new root\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(prop.uf.indexOf(v2Name) > -1 && out.root.indexOf(v2Name) === -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout.root.push(v2Name);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout.typeVersion = 'v1';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ty++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t//only add property once\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(out.properties.indexOf(propName) === -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tout.properties.push([propName,'v1']);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(out.properties.indexOf(propName) === -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tout.properties.push([propName,'v1']);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tx++;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// finds any alt rel=* mappings for a given node/microformat\n\t\t\tif(ufNameArr && this.findRelImpied){\n\t\t\t\tfor (var b = 0; b < ufNameArr.length; b++) {\n\t\t\t\t\tufName = ufNameArr[b];\n\t\t\t\t\timpiedRel = this.findRelImpied(node, ufName);\n\t\t\t\t\tif(impiedRel && out.properties.indexOf(impiedRel) === -1) {\n\t\t\t\t\t\tout.properties.push([impiedRel, 'v1']);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t//if(out.root.length === 1 && out.properties.length === 1) {\n\t\t\t//\tif(out.root[0].replace('h-','') === this.removePropPrefix(out.properties[0][0])) {\n\t\t\t//\t\tout.typeVersion = 'v2';\n\t\t\t//\t}\n\t\t\t//}\n\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * given a v1 or v2 root name, return mapping object\n\t\t *\n\t\t * @param  {String} name\n\t\t * @return {Object || null}\n\t\t */\n\t\tgetMapping: function(name) {\n\t\t\tvar key;\n\t\t\tfor(key in modules.maps) {\n\t\t\t\tif(modules.maps[key].root === name || key === name) {\n\t\t\t\t\treturn modules.maps[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\n\n\t\t/**\n\t\t * given a v1 root name returns a v2 root name i.e. vcard >>> h-card\n\t\t *\n\t\t * @param  {String} name\n\t\t * @return {String || null}\n\t\t */\n\t\tgetV2RootName: function(name) {\n\t\t\tvar key;\n\t\t\tfor(key in modules.maps) {\n\t\t\t\tif(modules.maps[key].root === name) {\n\t\t\t\t\treturn key;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\n\n\t\t/**\n\t\t * whether a property is the right microformats version for its root type\n\t\t *\n\t\t * @param  {String} typeVersion\n\t\t * @param  {String} propertyVersion\n\t\t * @return {Boolean}\n\t\t */\n\t\tisAllowedPropertyVersion: function(typeVersion, propertyVersion){\n\t\t\tif(this.options.overlappingVersions === true){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn (typeVersion === propertyVersion);\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * creates a blank microformats object\n\t\t *\n\t\t * @param  {String} name\n\t\t * @param  {String} value\n\t\t * @return {Object}\n\t\t */\n\t\tcreateUfObject: function(names, typeVersion, value) {\n\t\t\tvar out = {};\n\n\t\t\t// is more than just whitespace\n\t\t\tif(value && modules.utils.isOnlyWhiteSpace(value) === false) {\n\t\t\t\tout.value = value;\n\t\t\t}\n\t\t\t// add type i.e. [\"h-card\", \"h-org\"]\n\t\t\tif(modules.utils.isArray(names)) {\n\t\t\t\tout.type = names;\n\t\t\t} else {\n\t\t\t\tout.type = [names];\n\t\t\t}\n\t\t\tout.properties = {};\n\t\t\t// metadata properties for parsing\n\t\t\tout.typeVersion = typeVersion;\n\t\t\tout.times = [];\n\t\t\tout.dates = [];\n\t\t\tout.altValue = null;\n\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * removes unwanted microformats property before output\n\t\t *\n\t\t * @param  {Object} microformat\n\t\t */\n\t\tcleanUfObject: function( microformat ) {\n\t\t\tdelete microformat.times;\n\t\t\tdelete microformat.dates;\n\t\t\tdelete microformat.typeVersion;\n\t\t\tdelete microformat.altValue;\n\t\t\treturn microformat;\n\t\t},\n\n\n\n\t\t/**\n\t\t * removes microformat property prefixes from text\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {String}\n\t\t */\n\t\tremovePropPrefix: function(text) {\n\t\t\tvar i;\n\n\t\t\ti = this.propertyPrefixes.length;\n\t\t\twhile(i--) {\n\t\t\t\tvar prefix = this.propertyPrefixes[i];\n\t\t\t\tif(modules.utils.startWith(text, prefix) && modules.utils.isLowerCase(text)) {\n\t\t\t\t\ttext = text.substr(prefix.length);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn text;\n\t\t},\n\n\n\t\t/**\n\t\t * expands all relative URLs to absolute ones where it can\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attrName\n\t\t * @param  {String} baseUrl\n\t\t */\n\t\texpandURLs: function(node, attrName, baseUrl){\n\t\t\tvar i,\n\t\t\t\tnodes,\n\t\t\t\tattr;\n\n\t\t\tnodes = modules.domUtils.getNodesByAttribute(node, attrName);\n\t\t\ti = nodes.length;\n\t\t\twhile (i--) {\n\t\t\t\ttry{\n\t\t\t\t\t// the url parser can blow up if the format is not right\n\t\t\t\t\tattr = modules.domUtils.getAttribute(nodes[i], attrName);\n\t\t\t\t\tif(attr && attr !== '' && baseUrl !== '' && attr.indexOf('://') === -1) {\n\t\t\t\t\t\t//attr = urlParser.resolve(baseUrl, attr);\n\t\t\t\t\t\tattr = modules.url.resolve(attr, baseUrl);\n\t\t\t\t\t\tmodules.domUtils.setAttribute(nodes[i], attrName, attr);\n\t\t\t\t\t}\n\t\t\t\t}catch(err){\n\t\t\t\t\t// do nothing - convert only the urls we can, leave the rest as they are\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\n\t\t/**\n\t\t * merges passed and default options -single level clone of properties\n\t\t *\n\t\t * @param  {Object} options\n\t\t */\n\t\tmergeOptions: function(options) {\n\t\t\tvar key;\n\t\t\tfor(key in options) {\n\t\t\t\tif(options.hasOwnProperty(key)) {\n\t\t\t\t\tthis.options[key] = options[key];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * removes all rootid attributes\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t */\n\t\tremoveRootIds: function(rootNode){\n\t\t\tvar arr,\n\t\t\t\ti;\n\n\t\t\tarr = modules.domUtils.getNodesByAttribute(rootNode, 'rootids');\n\t\t\ti = arr.length;\n\t\t\twhile(i--) {\n\t\t\t\tmodules.domUtils.removeAttribute(arr[i],'rootids');\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * removes all changes made to the DOM\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t */\n\t\tclearUpDom: function(rootNode){\n\t\t\tif(this.removeIncludes){\n\t\t\t\tthis.removeIncludes(rootNode);\n\t\t\t}\n\t\t\tthis.removeRootIds(rootNode);\n\t\t}\n\n\n\t};\n\n\n\tmodules.Parser.prototype.constructor = modules.Parser;\n\n\n\t// check parser module is loaded\n\tif(modules.Parser){\n\n\t\t/**\n\t\t * applies \"implied rules\" microformat output structure i.e. feed-title, name, photo, url and date\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} uf (microformat output structure)\n\t\t * @param  {Object} parentClasses (classes structure)\n\t\t * @param  {Boolean} impliedPropertiesByVersion\n\t\t * @return {Object}\n\t\t */\n\t\t modules.Parser.prototype.impliedRules = function(node, uf, parentClasses) {\n\t\t\tvar typeVersion = (uf.typeVersion)? uf.typeVersion: 'v2';\n\n\t\t\t// TEMP: override to allow v1 implied properties while spec changes\n\t\t\tif(this.options.impliedPropertiesByVersion === false){\n\t\t\t\ttypeVersion = 'v2';\n\t\t\t}\n\n\t\t\tif(node && uf && uf.properties) {\n\t\t\t\tuf = this.impliedBackwardComp( node, uf, parentClasses );\n\t\t\t\tif(typeVersion === 'v2'){\n\t\t\t\t\tuf = this.impliedhFeedTitle( uf );\n\t\t\t\t\tuf = this.impliedName( node, uf );\n\t\t\t\t\tuf = this.impliedPhoto( node, uf );\n\t\t\t\t\tuf = this.impliedUrl( node, uf );\n\t\t\t\t}\n\t\t\t\tuf = this.impliedValue( node, uf, parentClasses );\n\t\t\t\tuf = this.impliedDate( uf );\n\n\t\t\t\t// TEMP: flagged while spec changes are put forward\n\t\t\t\tif(this.options.parseLatLonGeo === true){\n\t\t\t\t\tuf = this.impliedGeo( uf );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * apply implied name rule\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedName = function(node, uf) {\n\t\t\t// implied name rule\n\t\t\t/*\n\t\t\t\timg.h-x[alt]\t\t\t\t\t\t\t\t\t\t<img class=\"h-card\" src=\"glenn.htm\" alt=\"Glenn Jones\"></a>\n\t\t\t\tarea.h-x[alt] \t\t\t\t\t\t\t\t\t\t<area class=\"h-card\" href=\"glenn.htm\" alt=\"Glenn Jones\"></area>\n\t\t\t\tabbr.h-x[title]\t\t\t\t\t\t\t\t\t\t<abbr class=\"h-card\" title=\"Glenn Jones\"GJ</abbr>\n\n\t\t\t\t.h-x>img:only-child[alt]:not[.h-*]\t\t\t\t\t<div class=\"h-card\"><a src=\"glenn.htm\" alt=\"Glenn Jones\"></a></div>\n\t\t\t\t.h-x>area:only-child[alt]:not[.h-*] \t\t\t\t<div class=\"h-card\"><area href=\"glenn.htm\" alt=\"Glenn Jones\"></area></div>\n\t\t\t\t.h-x>abbr:only-child[title] \t\t\t\t\t\t<div class=\"h-card\"><abbr title=\"Glenn Jones\">GJ</abbr></div>\n\n\t\t\t\t.h-x>:only-child>img:only-child[alt]:not[.h-*] \t\t<div class=\"h-card\"><span><img src=\"jane.html\" alt=\"Jane Doe\"/></span></div>\n\t\t\t\t.h-x>:only-child>area:only-child[alt]:not[.h-*] \t<div class=\"h-card\"><span><area href=\"jane.html\" alt=\"Jane Doe\"></area></span></div>\n\t\t\t\t.h-x>:only-child>abbr:only-child[title]\t\t\t\t<div class=\"h-card\"><span><abbr title=\"Jane Doe\">JD</abbr></span></div>\n\t\t\t*/\n\t\t\tvar name,\n\t\t\t\tvalue;\n\n\t\t\tif(!uf.properties.name) {\n\t\t\t\tvalue = this.getImpliedProperty(node, ['img', 'area', 'abbr'], this.getNameAttr);\n\t\t\t\tvar textFormat = this.options.textFormat;\n\t\t\t\t// if no value for tags/properties use text\n\t\t\t\tif(!value) {\n\t\t\t\t\tname = [modules.text.parse(this.document, node, textFormat)];\n\t\t\t\t}else{\n\t\t\t\t\tname = [modules.text.parseText(this.document, value, textFormat)];\n\t\t\t\t}\n\t\t\t\tif(name && name[0] !== ''){\n\t\t\t\t\tuf.properties.name = name;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * apply implied photo rule\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedPhoto = function(node, uf) {\n\t\t\t// implied photo rule\n\t\t\t/*\n\t\t\t\timg.h-x[src] \t\t\t\t\t\t\t\t\t\t\t\t<img class=\"h-card\" alt=\"Jane Doe\" src=\"jane.jpeg\"/>\n\t\t\t\tobject.h-x[data] \t\t\t\t\t\t\t\t\t\t\t<object class=\"h-card\" data=\"jane.jpeg\"/>Jane Doe</object>\n\t\t\t\t.h-x>img[src]:only-of-type:not[.h-*]\t\t\t\t\t\t<div class=\"h-card\"><img alt=\"Jane Doe\" src=\"jane.jpeg\"/></div>\n\t\t\t\t.h-x>object[data]:only-of-type:not[.h-*] \t\t\t\t\t<div class=\"h-card\"><object data=\"jane.jpeg\"/>Jane Doe</object></div>\n\t\t\t\t.h-x>:only-child>img[src]:only-of-type:not[.h-*] \t\t\t<div class=\"h-card\"><span><img alt=\"Jane Doe\" src=\"jane.jpeg\"/></span></div>\n\t\t\t\t.h-x>:only-child>object[data]:only-of-type:not[.h-*] \t\t<div class=\"h-card\"><span><object data=\"jane.jpeg\"/>Jane Doe</object></span></div>\n\t\t\t*/\n\t\t\tvar value;\n\t\t\tif(!uf.properties.photo) {\n\t\t\t\tvalue = this.getImpliedProperty(node, ['img', 'object'], this.getPhotoAttr);\n\t\t\t\tif(value) {\n\t\t\t\t\t// relative to absolute URL\n\t\t\t\t\tif(value && value !== '' && this.options.baseUrl !== '' && value.indexOf('://') === -1) {\n\t\t\t\t\t\tvalue = modules.url.resolve(value, this.options.baseUrl);\n\t\t\t\t\t}\n\t\t\t\t\tuf.properties.photo = [modules.utils.trim(value)];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * apply implied URL rule\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedUrl = function(node, uf) {\n\t\t\t// implied URL rule\n\t\t\t/*\n\t\t\t\ta.h-x[href]  \t\t\t\t\t\t\t<a class=\"h-card\" href=\"glenn.html\">Glenn</a>\n\t\t\t\tarea.h-x[href]  \t\t\t\t\t\t<area class=\"h-card\" href=\"glenn.html\">Glenn</area>\n\t\t\t\t.h-x>a[href]:only-of-type:not[.h-*]  \t<div class=\"h-card\" ><a href=\"glenn.html\">Glenn</a><p>...</p></div>\n\t\t\t\t.h-x>area[href]:only-of-type:not[.h-*]  <div class=\"h-card\" ><area href=\"glenn.html\">Glenn</area><p>...</p></div>\n\t\t\t*/\n\t\t\tvar value;\n\t\t\tif(!uf.properties.url) {\n\t\t\t\tvalue = this.getImpliedProperty(node, ['a', 'area'], this.getURLAttr);\n\t\t\t\tif(value) {\n\t\t\t\t\t// relative to absolute URL\n\t\t\t\t\tif(value && value !== '' && this.options.baseUrl !== '' && value.indexOf('://') === -1) {\n\t\t\t\t\t\tvalue = modules.url.resolve(value, this.options.baseUrl);\n\t\t\t\t\t}\n\t\t\t\t\tuf.properties.url = [modules.utils.trim(value)];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * apply implied date rule - if there is a time only property try to concat it with any date property\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedDate = function(uf) {\n\t\t\t// implied date rule\n\t\t\t// http://microformats.org/wiki/value-class-pattern#microformats2_parsers\n\t\t\t// http://microformats.org/wiki/microformats2-parsing-issues#implied_date_for_dt_properties_both_mf2_and_backcompat\n\t\t\tvar newDate;\n\t\t\tif(uf.times.length > 0 && uf.dates.length > 0) {\n\t\t\t\tnewDate = modules.dates.dateTimeUnion(uf.dates[0][1], uf.times[0][1], 'microformat2');\n\t\t\t\t//uf.properties[this.removePropPrefix(uf.times[0][0])][0] = newDate.toString('microformat2');\n\t\t\t\tvar key = this.removePropPrefix(uf.times[0][0]);\n \t\t\t\tif (!!(key.length) && Array.isArray(uf.properties[key])) {\n \t\t\t\t\tuf.properties[key][0] = newDate.toString('microformat2');\n \t\t\t\t}\n\t\t\t}\n\t\t\t// clean-up object\n\t\t\tdelete uf.times;\n\t\t\tdelete uf.dates;\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * get an implied property value from pre-defined tag/attriubte combinations\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} tagList (Array of tags from which an implied value can be pulled)\n\t\t * @param  {String} getAttrFunction (Function which can extract implied value)\n\t\t * @return {String || null}\n\t\t */\n\t\tmodules.Parser.prototype.getImpliedProperty = function(node, tagList, getAttrFunction) {\n\t\t\t// i.e. img.h-card\n\t\t\tvar value = getAttrFunction(node),\n\t\t\t\tdescendant,\n\t\t\t\tchild;\n\n\t\t\tif(!value) {\n\t\t\t\t// i.e. .h-card>img:only-of-type:not(.h-card)\n\t\t\t\tdescendant = modules.domUtils.getSingleDescendantOfType( node, tagList);\n\t\t\t\tif(descendant && this.hasHClass(descendant) === false){\n\t\t\t\t\tvalue = getAttrFunction(descendant);\n\t\t\t\t}\n\t\t\t\tif(node.children.length > 0 ){\n\t\t\t\t\t// i.e.  .h-card>:only-child>img:only-of-type:not(.h-card)\n\t\t\t\t\tchild = modules.domUtils.getSingleDescendant(node);\n\t\t\t\t\tif(child && this.hasHClass(child) === false){\n\t\t\t\t\t\tdescendant = modules.domUtils.getSingleDescendantOfType(child, tagList);\n\t\t\t\t\t\tif(descendant && this.hasHClass(descendant) === false){\n\t\t\t\t\t\t\tvalue = getAttrFunction(descendant);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\n\t\t/**\n\t\t * get an implied name value from a node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String || null}\n\t\t */\n\t\tmodules.Parser.prototype.getNameAttr = function(node) {\n\t\t\tvar value = modules.domUtils.getAttrValFromTagList(node, ['img','area'], 'alt');\n\t\t\tif(!value) {\n\t\t\t\tvalue = modules.domUtils.getAttrValFromTagList(node, ['abbr'], 'title');\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\n\t\t/**\n\t\t * get an implied photo value from a node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String || null}\n\t\t */\n\t\tmodules.Parser.prototype.getPhotoAttr = function(node) {\n\t\t\tvar value = modules.domUtils.getAttrValFromTagList(node, ['img'], 'src');\n\t\t\tif(!value && modules.domUtils.hasAttributeValue(node, 'class', 'include') === false) {\n\t\t\t\tvalue = modules.domUtils.getAttrValFromTagList(node, ['object'], 'data');\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\n\t\t/**\n\t\t * get an implied photo value from a node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String || null}\n\t\t */\n\t\tmodules.Parser.prototype.getURLAttr = function(node) {\n\t\t\tvar value = null;\n\t\t\tif(modules.domUtils.hasAttributeValue(node, 'class', 'include') === false){\n\n\t\t\t\tvalue = modules.domUtils.getAttrValFromTagList(node, ['a'], 'href');\n\t\t\t\tif(!value) {\n\t\t\t\t\tvalue = modules.domUtils.getAttrValFromTagList(node, ['area'], 'href');\n\t\t\t\t}\n\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedValue = function(node, uf, parentClasses){\n\n\t\t\t// intersection of implied name and implied value rules\n\t\t\tif(uf.properties.name) {\n\t\t\t\tif(uf.value && parentClasses.root.length > 0 && parentClasses.properties.length === 1){\n\t\t\t\t\tuf = this.getAltValue(uf, parentClasses.properties[0][0], 'p-name', uf.properties.name[0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// intersection of implied URL and implied value rules\n\t\t\tif(uf.properties.url) {\n\t\t\t\tif(parentClasses && parentClasses.root.length === 1 && parentClasses.properties.length === 1){\n\t\t\t\t\tuf = this.getAltValue(uf, parentClasses.properties[0][0], 'u-url', uf.properties.url[0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// apply alt value\n\t\t\tif(uf.altValue !== null){\n\t\t\t\tuf.value = uf.altValue.value;\n\t\t\t}\n\t\t\tdelete uf.altValue;\n\n\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * get alt value based on rules about parent property prefix\n\t\t *\n\t\t * @param  {Object} uf\n\t\t * @param  {String} parentPropertyName\n\t\t * @param  {String} propertyName\n\t\t * @param  {String} value\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.getAltValue = function(uf, parentPropertyName, propertyName, value){\n\t\t\tif(uf.value && !uf.altValue){\n\t\t\t\t// first p-name of the h-* child\n\t\t\t\tif(modules.utils.startWith(parentPropertyName,'p-') && propertyName === 'p-name'){\n\t\t\t\t\tuf.altValue = {name: propertyName, value: value};\n\t\t\t\t}\n\t\t\t\t// if it's an e-* property element\n\t\t\t\tif(modules.utils.startWith(parentPropertyName,'e-') && modules.utils.startWith(propertyName,'e-')){\n\t\t\t\t\tuf.altValue = {name: propertyName, value: value};\n\t\t\t\t}\n\t\t\t\t// if it's an u-* property element\n\t\t\t\tif(modules.utils.startWith(parentPropertyName,'u-') && propertyName === 'u-url'){\n\t\t\t\t\tuf.altValue = {name: propertyName, value: value};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * if a h-feed does not have a title use the title tag of a page\n\t\t *\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedhFeedTitle = function( uf ){\n\t\t\tif(uf.type && uf.type.indexOf('h-feed') > -1){\n\t\t\t\t// has no name property\n\t\t\t\tif(uf.properties.name === undefined || uf.properties.name[0] === '' ){\n\t\t\t\t\t// use the text from the title tag\n\t\t\t\t\tvar title = modules.domUtils.querySelector(this.document, 'title');\n\t\t\t\t\tif(title){\n\t\t\t\t\t\tuf.properties.name = [modules.domUtils.textContent(title)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uf;\n\t\t};\n\n\n\n\t    /**\n\t\t * implied Geo from pattern <abbr class=\"p-geo\" title=\"37.386013;-122.082932\">\n\t\t *\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedGeo = function( uf ){\n\t\t\tvar geoPair,\n\t\t\t\tparts,\n\t\t\t\tlongitude,\n\t\t\t\tlatitude,\n\t\t\t\tvalid = true;\n\n\t\t\tif(uf.type && uf.type.indexOf('h-geo') > -1){\n\n\t\t\t\t// has no latitude or longitude property\n\t\t\t\tif(uf.properties.latitude === undefined || uf.properties.longitude === undefined ){\n\n\t\t\t\t\tgeoPair = (uf.properties.name)? uf.properties.name[0] : null;\n\t\t\t\t\tgeoPair = (!geoPair && uf.properties.value)? uf.properties.value : geoPair;\n\n\t\t\t\t\tif(geoPair){\n\t\t\t\t\t\t// allow for the use of a ';' as in microformats and also ',' as in Geo URL\n\t\t\t\t\t\tgeoPair = geoPair.replace(';',',');\n\n\t\t\t\t\t\t// has sep char\n\t\t\t\t\t\tif(geoPair.indexOf(',') > -1 ){\n\t\t\t\t\t\t\tparts = geoPair.split(',');\n\n\t\t\t\t\t\t\t// only correct if we have two or more parts\n\t\t\t\t\t\t\tif(parts.length > 1){\n\n\t\t\t\t\t\t\t\t// latitude no value outside the range -90 or 90\n\t\t\t\t\t\t\t\tlatitude = parseFloat( parts[0] );\n\t\t\t\t\t\t\t\tif(modules.utils.isNumber(latitude) && latitude > 90 || latitude < -90){\n\t\t\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// longitude no value outside the range -180 to 180\n\t\t\t\t\t\t\t\tlongitude = parseFloat( parts[1] );\n\t\t\t\t\t\t\t\tif(modules.utils.isNumber(longitude) && longitude > 180 || longitude < -180){\n\t\t\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif(valid){\n\t\t\t\t\t\t\t\t\tuf.properties.latitude = [latitude];\n\t\t\t\t\t\t\t\t\tuf.properties.longitude  = [longitude];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * if a backwards compat built structure has no properties add name through this.impliedName\n\t\t *\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedBackwardComp = function(node, uf, parentClasses){\n\n\t\t\t// look for pattern in parent classes like \"p-geo h-geo\"\n\t\t\t// these are structures built from backwards compat parsing of geo\n\t\t\tif(parentClasses.root.length === 1 && parentClasses.properties.length === 1) {\n\t\t\t\tif(parentClasses.root[0].replace('h-','') === this.removePropPrefix(parentClasses.properties[0][0])) {\n\n\t\t\t\t\t// if microformat has no properties apply the impliedName rule to get value from containing node\n\t\t\t\t\t// this will get value from html such as <abbr class=\"geo\" title=\"30.267991;-97.739568\">Brighton</abbr>\n\t\t\t\t\tif( modules.utils.hasProperties(uf.properties) === false ){\n\t\t\t\t\t\tuf = this.impliedName( node, uf );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uf;\n\t\t};\n\n\n\n\t}\n\n\n\t// check parser module is loaded\n\tif(modules.Parser){\n\n\n\t\t/**\n\t\t * appends clones of include Nodes into the DOM structure\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t */\n\t\tmodules.Parser.prototype.addIncludes = function(rootNode) {\n\t\t\tthis.addAttributeIncludes(rootNode, 'itemref');\n\t\t\tthis.addAttributeIncludes(rootNode, 'headers');\n\t\t\tthis.addClassIncludes(rootNode);\n\t\t};\n\n\n\t\t/**\n\t\t * appends clones of include Nodes into the DOM structure for attribute based includes\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t * @param  {String} attributeName\n\t\t */\n\t\tmodules.Parser.prototype.addAttributeIncludes = function(rootNode, attributeName) {\n\t\t\tvar arr,\n\t\t\t\tidList,\n\t\t\t\ti,\n\t\t\t\tx,\n\t\t\t\tz,\n\t\t\t\ty;\n\n\t\t\tarr = modules.domUtils.getNodesByAttribute(rootNode, attributeName);\n\t\t\tx = 0;\n\t\t\ti = arr.length;\n\t\t\twhile(x < i) {\n\t\t\t\tidList = modules.domUtils.getAttributeList(arr[x], attributeName);\n\t\t\t\tif(idList) {\n\t\t\t\t\tz = 0;\n\t\t\t\t\ty = idList.length;\n\t\t\t\t\twhile(z < y) {\n\t\t\t\t\t\tthis.apppendInclude(arr[x], idList[z]);\n\t\t\t\t\t\tz++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tx++;\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * appends clones of include Nodes into the DOM structure for class based includes\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t */\n\t\tmodules.Parser.prototype.addClassIncludes = function(rootNode) {\n\t\t\tvar id,\n\t\t\t\tarr,\n\t\t\t\tx = 0,\n\t\t\t\ti;\n\n\t\t\tarr = modules.domUtils.getNodesByAttributeValue(rootNode, 'class', 'include');\n\t\t\ti = arr.length;\n\t\t\twhile(x < i) {\n\t\t\t\tid = modules.domUtils.getAttrValFromTagList(arr[x], ['a'], 'href');\n\t\t\t\tif(!id) {\n\t\t\t\t\tid = modules.domUtils.getAttrValFromTagList(arr[x], ['object'], 'data');\n\t\t\t\t}\n\t\t\t\tthis.apppendInclude(arr[x], id);\n\t\t\t\tx++;\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * appends a clone of an include into another Node using Id\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t * @param  {Stringe} id\n\t\t */\n\t\tmodules.Parser.prototype.apppendInclude = function(node, id){\n\t\t\tvar include,\n\t\t\t\tclone;\n\n\t\t\tif(id){\n\t\t\t\tid = modules.utils.trim(id.replace('#', ''));\n\t\t\t\tinclude = modules.domUtils.getElementById(this.document, id);\n\t\t\t\tif(include) {\n\t\t\t\t\tclone = modules.domUtils.clone(include);\n\t\t\t\t\tthis.markIncludeChildren(clone);\n\t\t\t\t\tmodules.domUtils.appendChild(node, clone);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * adds an attribute marker to all the child microformat roots\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t */\n\t\tmodules.Parser.prototype.markIncludeChildren = function(rootNode) {\n\t\t\tvar arr,\n\t\t\t\tx,\n\t\t\t\ti;\n\n\t\t\t// loop the array and add the attribute\n\t\t\tarr = this.findRootNodes(rootNode);\n\t\t\tx = 0;\n\t\t\ti = arr.length;\n\t\t\tmodules.domUtils.setAttribute(rootNode, 'data-include', 'true');\n\t\t\tmodules.domUtils.setAttribute(rootNode, 'style', 'display:none');\n\t\t\twhile(x < i) {\n\t\t\t\tmodules.domUtils.setAttribute(arr[x], 'data-include', 'true');\n\t\t\t\tx++;\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * removes all appended include clones from DOM\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t */\n\t\tmodules.Parser.prototype.removeIncludes = function(rootNode){\n\t\t\tvar arr,\n\t\t\t\ti;\n\n\t\t\t// remove all the items that were added as includes\n\t\t\tarr = modules.domUtils.getNodesByAttribute(rootNode, 'data-include');\n\t\t\ti = arr.length;\n\t\t\twhile(i--) {\n\t\t\t\tmodules.domUtils.removeChild(rootNode,arr[i]);\n\t\t\t}\n\t\t};\n\n\n\t}\n\n\n\t// check parser module is loaded\n\tif(modules.Parser){\n\t\n\t\t/**\n\t\t * finds rel=* structures\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.findRels = function(rootNode) {\n\t\t\tvar out = {\n\t\t\t\t\t'items': [],\n\t\t\t\t\t'rels': {},\n\t\t\t\t\t'rel-urls': {}\n\t\t\t\t},\n\t\t\t\tx,\n\t\t\t\ti,\n\t\t\t\ty,\n\t\t\t\tz,\n\t\t\t\trelList,\n\t\t\t\titems,\n\t\t\t\titem,\n\t\t\t\tvalue,\n\t\t\t\tarr;\n\t\n\t\t\tarr = modules.domUtils.getNodesByAttribute(rootNode, 'rel');\n\t\t\tx = 0;\n\t\t\ti = arr.length;\n\t\t\twhile(x < i) {\n\t\t\t\trelList = modules.domUtils.getAttribute(arr[x], 'rel');\n\t\n\t\t\t\tif(relList) {\n\t\t\t\t\titems = relList.split(' ');\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// add rels\n\t\t\t\t\tz = 0;\n\t\t\t\t\ty = items.length;\n\t\t\t\t\twhile(z < y) {\n\t\t\t\t\t\titem = modules.utils.trim(items[z]);\n\t\n\t\t\t\t\t\t// get rel value\n\t\t\t\t\t\tvalue = modules.domUtils.getAttrValFromTagList(arr[x], ['a', 'area'], 'href');\n\t\t\t\t\t\tif(!value) {\n\t\t\t\t\t\t\tvalue = modules.domUtils.getAttrValFromTagList(arr[x], ['link'], 'href');\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// create the key\n\t\t\t\t\t\tif(!out.rels[item]) {\n\t\t\t\t\t\t\tout.rels[item] = [];\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif(typeof this.options.baseUrl === 'string' && typeof value === 'string') {\n\t\t\t\t\t\n\t\t\t\t\t\t\tvar resolved = modules.url.resolve(value, this.options.baseUrl);\n\t\t\t\t\t\t\t// do not add duplicate rels - based on resolved URLs\n\t\t\t\t\t\t\tif(out.rels[item].indexOf(resolved) === -1){\n\t\t\t\t\t\t\t\tout.rels[item].push( resolved );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tz++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tvar url = null;\n\t\t\t\t\tif(modules.domUtils.hasAttribute(arr[x], 'href')){\n\t\t\t\t\t\turl = modules.domUtils.getAttribute(arr[x], 'href');\n\t\t\t\t\t\tif(url){\n\t\t\t\t\t\t\turl = modules.url.resolve(url, this.options.baseUrl );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t\n\t\t\t\t\t// add to rel-urls\n\t\t\t\t\tvar relUrl = this.getRelProperties(arr[x]);\n\t\t\t\t\trelUrl.rels = items;\n\t\t\t\t\t// // do not add duplicate rel-urls - based on resolved URLs\n\t\t\t\t\tif(url && out['rel-urls'][url] === undefined){\n\t\t\t\t\t\tout['rel-urls'][url] = relUrl;\n\t\t\t\t\t}\n\t\n\t\t\t\n\t\t\t\t}\n\t\t\t\tx++;\n\t\t\t}\n\t\t\treturn out;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * gets the properties of a rel=*\n\t\t *\n\t\t * @param  {DOM node} node\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.getRelProperties = function(node){\n\t\t\tvar obj = {};\n\t\t\t\n\t\t\tif(modules.domUtils.hasAttribute(node, 'media')){\n\t\t\t\tobj.media = modules.domUtils.getAttribute(node, 'media');\n\t\t\t}\n\t\t\tif(modules.domUtils.hasAttribute(node, 'type')){\n\t\t\t\tobj.type = modules.domUtils.getAttribute(node, 'type');\n\t\t\t}\n\t\t\tif(modules.domUtils.hasAttribute(node, 'hreflang')){\n\t\t\t\tobj.hreflang = modules.domUtils.getAttribute(node, 'hreflang');\n\t\t\t}\n\t\t\tif(modules.domUtils.hasAttribute(node, 'title')){\n\t\t\t\tobj.title = modules.domUtils.getAttribute(node, 'title');\n\t\t\t}\n\t\t\tif(modules.utils.trim(this.getPValue(node, false)) !== ''){\n\t\t\t\tobj.text = this.getPValue(node, false);\n\t\t\t}\t\n\t\t\t\n\t\t\treturn obj;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * finds any alt rel=* mappings for a given node/microformat\n\t\t *\n\t\t * @param  {DOM node} node\n\t\t * @param  {String} ufName\n\t\t * @return {String || undefined}\n\t\t */\n\t\tmodules.Parser.prototype.findRelImpied = function(node, ufName) {\n\t\t\tvar out,\n\t\t\t\tmap,\n\t\t\t\ti;\n\t\n\t\t\tmap = this.getMapping(ufName);\n\t\t\tif(map) {\n\t\t\t\tfor(var key in map.properties) {\n\t\t\t\t\tif (map.properties.hasOwnProperty(key)) {\n\t\t\t\t\t\tvar prop = map.properties[key],\n\t\t\t\t\t\t\tpropName = (prop.map) ? prop.map : 'p-' + key,\n\t\t\t\t\t\t\trelCount = 0;\n\t\t\n\t\t\t\t\t\t// is property an alt rel=* mapping \n\t\t\t\t\t\tif(prop.relAlt && modules.domUtils.hasAttribute(node, 'rel')) {\n\t\t\t\t\t\t\ti = prop.relAlt.length;\n\t\t\t\t\t\t\twhile(i--) {\n\t\t\t\t\t\t\t\tif(modules.domUtils.hasAttributeValue(node, 'rel', prop.relAlt[i])) {\n\t\t\t\t\t\t\t\t\trelCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(relCount === prop.relAlt.length) {\n\t\t\t\t\t\t\t\tout = propName;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * returns whether a node or its children has rel=* microformat\n\t\t *\n\t\t * @param  {DOM node} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tmodules.Parser.prototype.hasRel = function(node) {\n\t\t\treturn (this.countRels(node) > 0);\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * returns the number of rel=* microformats\n\t\t *\n\t\t * @param  {DOM node} node\n\t\t * @return {Int}\n\t\t */\n\t\tmodules.Parser.prototype.countRels = function(node) {\n\t\t\tif(node){\n\t\t\t\treturn modules.domUtils.getNodesByAttribute(node, 'rel').length;\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\t\n\t\n\t\t\n\t}\n\n\n\tmodules.utils = {\n\n\t\t/**\n\t\t * is the object a string\n\t\t *\n\t\t * @param  {Object} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tisString: function( obj ) {\n\t\t\treturn typeof( obj ) === 'string';\n\t\t},\n\n\t\t/**\n\t\t * is the object a number\n\t\t *\n\t\t * @param  {Object} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tisNumber: function( obj ) {\n\t\t\treturn !isNaN(parseFloat( obj )) && isFinite( obj );\n\t\t},\n\n\n\t\t/**\n\t\t * is the object an array\n\t\t *\n\t\t * @param  {Object} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tisArray: function( obj ) {\n\t\t\treturn obj && !( obj.propertyIsEnumerable( 'length' ) ) && typeof obj === 'object' && typeof obj.length === 'number';\n\t\t},\n\n\n\t\t/**\n\t\t * is the object a function\n\t\t *\n\t\t * @param  {Object} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tisFunction: function(obj) {\n\t\t\treturn !!(obj && obj.constructor && obj.call && obj.apply);\n\t\t},\n\n\n\t\t/**\n\t\t * does the text start with a test string\n\t\t *\n\t\t * @param  {String} text\n\t\t * @param  {String} test\n\t\t * @return {Boolean}\n\t\t */\n\t\tstartWith: function( text, test ) {\n\t\t\treturn(text.indexOf(test) === 0);\n\t\t},\n\n\n\t\t/**\n\t\t * is string all lowerCase - just checks letters\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Boolean}\n\t\t */\n\t\tisLowerCase: function( text ) {\n\t\t\treturn text === text.toLowerCase();\n\t\t},\n\n\n\n\t\t/**\n\t\t * removes spaces at front and back of text\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {String}\n\t\t */\n\t\ttrim: function( text ) {\n\t\t\tif(text && this.isString(text)){\n\t\t\t\treturn (text.trim())? text.trim() : text.replace(/^\\s+|\\s+$/g, '');\n\t\t\t}else{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * replaces a character in text\n\t\t *\n\t\t * @param  {String} text\n\t\t * @param  {Int} index\n\t\t * @param  {String} character\n\t\t * @return {String}\n\t\t */\n\t\treplaceCharAt: function( text, index, character ) {\n\t\t\tif(text && text.length > index){\n\t\t\t   return text.substr(0, index) + character + text.substr(index+character.length);\n\t\t\t}else{\n\t\t\t\treturn text;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * removes whitespace, tabs and returns from start and end of text\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {String}\n\t\t */\n\t\ttrimWhitespace: function( text ){\n\t\t\tif(text && text.length){\n\t\t\t\tvar i = text.length,\n\t\t\t\t\tx = 0;\n\n\t\t\t\t// turn all whitespace chars at end into spaces\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif(this.isOnlyWhiteSpace(text[i])){\n\t\t\t\t\t\ttext = this.replaceCharAt( text, i, ' ' );\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// turn all whitespace chars at start into spaces\n\t\t\t\ti = text.length;\n\t\t\t\twhile (x < i) {\n\t\t\t\t\tif(this.isOnlyWhiteSpace(text[x])){\n\t\t\t\t\t\ttext = this.replaceCharAt( text, i, ' ' );\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.trim(text);\n\t\t},\n\n\n\t\t/**\n\t\t * does text only contain whitespace characters\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Boolean}\n\t\t */\n\t\tisOnlyWhiteSpace: function( text ){\n\t\t\treturn !(/[^\\t\\n\\r ]/.test( text ));\n\t\t},\n\n\n\t\t/**\n\t\t * removes whitespace from text (leaves a single space)\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Sring}\n\t\t */\n\t\tcollapseWhiteSpace: function( text ){\n\t\t\treturn text.replace(/[\\t\\n\\r ]+/g, ' ');\n\t\t},\n\n\n\t\t/**\n\t\t * does an object have any of its own properties\n\t\t *\n\t\t * @param  {Object} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\thasProperties: function( obj ) {\n\t\t\tvar key;\n\t\t\tfor(key in obj) {\n\t\t\t\tif( obj.hasOwnProperty( key ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\n\t\t/**\n\t\t * a sort function - to sort objects in an array by a given property\n\t\t *\n\t\t * @param  {String} property\n\t\t * @param  {Boolean} reverse\n\t\t * @return {Int}\n\t\t */\n\t\tsortObjects: function(property, reverse) {\n\t\t\treverse = (reverse) ? -1 : 1;\n\t\t\treturn function (a, b) {\n\t\t\t\ta = a[property];\n\t\t\t\tb = b[property];\n\t\t\t\tif (a < b) {\n\t\t\t\t\treturn reverse * -1;\n\t\t\t\t}\n\t\t\t\tif (a > b) {\n\t\t\t\t\treturn reverse * 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\n\t};\n\n\n\tmodules.domUtils = {\n\n\t\t// blank objects for DOM\n\t\tdocument: null,\n\t\trootNode: null,\n\n\n\t     /**\n\t\t * gets DOMParser object\n\t\t *\n         * @return {Object || undefined}\n\t\t */\n        getDOMParser: function () {\n            if (typeof DOMParser === undefined) {\n                try {\n                    return Components.classes[\"@mozilla.org/xmlextras/domparser;1\"]\n                        .createInstance(Components.interfaces.nsIDOMParser);\n                } catch (e) {\n                    return;\n                }\n            } else {\n                return new DOMParser();\n            }\n        },\n\n\n\t     /**\n\t\t * configures what are the base DOM objects for parsing\n\t\t *\n\t\t * @param  {Object} options\n\t\t * @return {DOM Node} node\n\t\t */\n\t\tgetDOMContext: function( options ){\n\n\t\t\t// if a node is passed\n\t\t\tif(options.node){\n\t\t\t\tthis.rootNode = options.node;\n\t\t\t}\n\n\n\t\t\t// if a html string is passed\n\t\t\tif(options.html){\n\t\t\t\t//var domParser = new DOMParser();\n                var domParser = this.getDOMParser();\n       \t\t\tthis.rootNode = domParser.parseFromString( options.html, 'text/html' );\n\t\t\t}\n\n\n\t\t\t// find top level document from rootnode\n\t\t\tif(this.rootNode !== null){\n\t\t\t\tif(this.rootNode.nodeType === 9){\n\t\t\t\t\tthis.document = this.rootNode;\n\t\t\t\t\tthis.rootNode = modules.domUtils.querySelector(this.rootNode, 'html');\n\t\t\t\t}else{\n\t\t\t\t\t// if it's DOM node get parent DOM Document\n\t\t\t\t\tthis.document = modules.domUtils.ownerDocument(this.rootNode);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// use global document object\n\t\t\tif(!this.rootNode && document){\n\t\t\t\tthis.rootNode = modules.domUtils.querySelector(document, 'html');\n\t\t\t\tthis.document = document;\n\t\t\t}\n\n\n\t\t\tif(this.rootNode && this.document){\n\t\t\t\treturn {document: this.document, rootNode: this.rootNode};\n\t\t\t}\n\n\t\t\treturn {document: null, rootNode: null};\n\t\t},\n\n\n\n\t\t/**\n\t\t* gets the first DOM node\n\t\t*\n\t\t* @param  {Dom Document}\n\t\t* @return {DOM Node} node\n\t\t*/\n\t\tgetTopMostNode: function( node ){\n\t\t\t//var doc = this.ownerDocument(node);\n\t\t\t//if(doc && doc.nodeType && doc.nodeType === 9 && doc.documentElement){\n\t\t\t//\treturn doc.documentElement;\n\t\t\t//}\n\t\t\treturn node;\n\t\t},\n\n\n\n\t\t /**\n\t\t * abstracts DOM ownerDocument\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {Dom Document}\n\t\t */\n\t\townerDocument: function(node){\n\t\t\treturn node.ownerDocument;\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM textContent\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\ttextContent: function(node){\n\t\t\tif(node.textContent){\n\t\t\t\treturn node.textContent;\n\t\t\t}else if(node.innerText){\n\t\t\t\treturn node.innerText;\n\t\t\t}\n\t\t\treturn '';\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM innerHTML\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\tinnerHTML: function(node){\n\t\t\treturn node.innerHTML;\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM hasAttribute\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @return {Boolean}\n\t\t */\n\t\thasAttribute: function(node, attributeName) {\n\t\t\tif(node.hasAttribute){\n\t\t\t\treturn node.hasAttribute(attributeName);\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * does an attribute contain a value\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @param  {String} value\n\t\t * @return {Boolean}\n\t\t */\n\t\thasAttributeValue: function(node, attributeName, value) {\n\t\t\treturn (this.getAttributeList(node, attributeName).indexOf(value) > -1);\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM getAttribute\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @return {String || null}\n\t\t */\n\t\tgetAttribute: function(node, attributeName) {\n\t\t\treturn node.getAttribute(attributeName);\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM setAttribute\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @param  {String} attributeValue\n\t\t */\n\t\tsetAttribute: function(node, attributeName, attributeValue){\n\t\t\tnode.setAttribute(attributeName, attributeValue);\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM removeAttribute\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t */\n\t\tremoveAttribute: function(node, attributeName) {\n\t\t\tnode.removeAttribute(attributeName);\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM getElementById\n\t\t *\n\t\t * @param  {DOM Node || DOM Document} node\n\t\t * @param  {String} id\n\t\t * @return {DOM Node}\n\t\t */\n\t\tgetElementById: function(docNode, id) {\n\t\t\treturn docNode.querySelector( '#' + id );\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM querySelector\n\t\t *\n\t\t * @param  {DOM Node || DOM Document} node\n\t\t * @param  {String} selector\n\t\t * @return {DOM Node}\n\t\t */\n\t\tquerySelector: function(docNode, selector) {\n\t\t\treturn docNode.querySelector( selector );\n\t\t},\n\n\n\t\t/**\n\t\t * get value of a Node attribute as an array\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @return {Array}\n\t\t */\n\t\tgetAttributeList: function(node, attributeName) {\n\t\t\tvar out = [],\n\t\t\t\tattList;\n\n\t\t\tattList = node.getAttribute(attributeName);\n\t\t\tif(attList && attList !== '') {\n\t\t\t\tif(attList.indexOf(' ') > -1) {\n\t\t\t\t\tout = attList.split(' ');\n\t\t\t\t} else {\n\t\t\t\t\tout.push(attList);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * gets all child nodes with a given attribute\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @return {NodeList}\n\t\t */\n\t\tgetNodesByAttribute: function(node, attributeName) {\n\t\t\tvar selector = '[' + attributeName + ']';\n\t\t\treturn node.querySelectorAll(selector);\n\t\t},\n\n\n\t\t/**\n\t\t * gets all child nodes with a given attribute containing a given value\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @return {DOM NodeList}\n\t\t */\n\t\tgetNodesByAttributeValue: function(rootNode, name, value) {\n\t\t\tvar arr = [],\n\t\t\t\tx = 0,\n\t\t\t\ti,\n\t\t\t\tout = [];\n\n\t\t\tarr = this.getNodesByAttribute(rootNode, name);\n\t\t\tif(arr) {\n\t\t\t\ti = arr.length;\n\t\t\t\twhile(x < i) {\n\t\t\t\t\tif(this.hasAttributeValue(arr[x], name, value)) {\n\t\t\t\t\t\tout.push(arr[x]);\n\t\t\t\t\t}\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * gets attribute value from controlled list of tags\n\t\t *\n\t\t * @param  {Array} tagNames\n\t\t * @param  {String} attributeName\n\t\t * @return {String || null}\n\t\t */\n\t\tgetAttrValFromTagList: function(node, tagNames, attributeName) {\n\t\t\tvar i = tagNames.length;\n\n\t\t\twhile(i--) {\n\t\t\t\tif(node.tagName.toLowerCase() === tagNames[i]) {\n\t\t\t\t\tvar attrValue = this.getAttribute(node, attributeName);\n\t\t\t\t\tif(attrValue && attrValue !== '') {\n\t\t\t\t\t\treturn attrValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\n\n\t   /**\n\t\t * get node if it has no siblings. CSS equivalent is :only-child\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t * @param  {Array} tagNames\n\t\t * @return {DOM Node || null}\n\t\t */\n\t\tgetSingleDescendant: function(node){\n\t\t\treturn this.getDescendant( node, null, false );\n\t\t},\n\n\n        /**\n\t\t * get node if it has no siblings of the same type. CSS equivalent is :only-of-type\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t * @param  {Array} tagNames\n\t\t * @return {DOM Node || null}\n\t\t */\n\t\tgetSingleDescendantOfType: function(node, tagNames){\n\t\t\treturn this.getDescendant( node, tagNames, true );\n\t\t},\n\n\n\t    /**\n\t\t * get child node limited by presence of siblings - either CSS :only-of-type or :only-child\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t * @param  {Array} tagNames\n\t\t * @return {DOM Node || null}\n\t\t */\n\t\tgetDescendant: function( node, tagNames, onlyOfType ){\n\t\t\tvar i = node.children.length,\n\t\t\t\tcountAll = 0,\n\t\t\t\tcountOfType = 0,\n\t\t\t\tchild,\n\t\t\t\tout = null;\n\n\t\t\twhile(i--) {\n\t\t\t\tchild = node.children[i];\n\t\t\t\tif(child.nodeType === 1) {\n\t\t\t\t\tif(tagNames){\n\t\t\t\t\t\t// count just only-of-type\n\t\t\t\t\t\tif(this.hasTagName(child, tagNames)){\n\t\t\t\t\t\t\tout = child;\n\t\t\t\t\t\t\tcountOfType++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\t// count all elements\n\t\t\t\t\t\tout = child;\n\t\t\t\t\t\tcountAll++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(onlyOfType === true){\n\t\t\t\treturn (countOfType === 1)? out : null;\n\t\t\t}else{\n\t\t\t\treturn (countAll === 1)? out : null;\n\t\t\t}\n\t\t},\n\n\n\t   /**\n\t\t * is a node one of a list of tags\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t * @param  {Array} tagNames\n\t\t * @return {Boolean}\n\t\t */\n\t\thasTagName: function(node, tagNames){\n\t\t\tvar i = tagNames.length;\n\t\t\twhile(i--) {\n\t\t\t\tif(node.tagName.toLowerCase() === tagNames[i]) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\n\t   /**\n\t\t * abstracts DOM appendChild\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {DOM Node} childNode\n\t\t * @return {DOM Node}\n\t\t */\n\t\tappendChild: function(node, childNode){\n\t\t\treturn node.appendChild(childNode);\n\t\t},\n\n\n\t   /**\n\t\t * abstracts DOM removeChild\n\t\t *\n\t\t * @param  {DOM Node} childNode\n\t\t * @return {DOM Node || null}\n\t\t */\n\t\tremoveChild: function(childNode){\n\t\t\tif (childNode.parentNode) {\n\t\t\t\treturn childNode.parentNode.removeChild(childNode);\n\t\t\t}else{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM cloneNode\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {DOM Node}\n\t\t */\n\t\tclone: function(node) {\n\t\t\tvar newNode = node.cloneNode(true);\n\t\t\tif(this.hasAttribute(node, 'id')){\n\t\t\t\tthis.removeAttribute(node, 'id')\n\t\t\t}\n\t\t\treturn newNode;\n\t\t},\n\n\n\t\t/**\n\t\t * removes all the descendant tags by name\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Array} tagNames\n\t\t * @return {DOM Node}\n\t\t */\n\t\tremoveDescendantsByTagName: function(node, tagNames) {\n\t\t\tfor (var i = 0; i < tagNames.length; i++) {\n\t\t\t\tif(node.getElementsByTagName){\n\t\t\t\t\tvar elements = node.getElementsByTagName(tagNames[i]);\n\t\t\t\t\twhile (elements[0]) {\n\t\t\t\t\t\telements[0].parentNode.removeChild(elements[0])\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn node;\n\t\t},\n\n\n\t\t/**\n\t\t * gets the text of a node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\tgetElementText: function( node ){\n\t\t\tif(node && node.data){\n\t\t\t\treturn node.data;\n\t\t\t}else{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * gets the attributes of a node - ordered by sequence in html\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {Array}\n\t\t */\n\t\tgetOrderedAttributes: function( node ){\n\t\t\tvar nodeStr = node.outerHTML,\n\t\t\t\tattrs = [];\n\n\t\t\tfor (var i = 0; i < node.attributes.length; i++) {\n\t\t\t\tvar attr = node.attributes[i];\n\t\t\t\t\tattr.indexNum = nodeStr.indexOf(attr.name);\n\n\t\t\t\tattrs.push( attr );\n\t\t\t}\n\t\t\treturn attrs.sort( modules.utils.sortObjects( 'indexNum' ) );\n\t\t},\n\n\n\t\t/**\n\t\t * decodes html entities in given text\n\t\t *\n\t\t * @param  {DOM Document} doc\n\t\t * @param  String} text\n\t\t * @return {String}\n\t\t */\n\t\tdecodeEntities: function( doc, text ){\n\t\t\t//return text;\n\t\t\treturn doc.createTextNode( text ).nodeValue;\n\t\t},\n\n\n\t\t/**\n\t\t * clones a DOM document\n\t\t *\n\t\t * @param  {DOM Document} document\n\t\t * @return {DOM Document}\n\t\t */\n\t\tcloneDocument: function( document ){\n\t\t\tvar newNode,\n\t\t\t\tnewDocument = null;\n\n\t\t\tif( this.canCloneDocument( document )){\n\t\t\t\tnewDocument = document.implementation.createHTMLDocument('');\n\t\t\t\tnewNode = newDocument.importNode( document.documentElement, true );\n\t\t\t\tnewDocument.replaceChild(newNode, newDocument.querySelector('html'));\n\t\t\t}\n\t\t\treturn (newNode && newNode.nodeType && newNode.nodeType === 1)? newDocument : document;\n\t\t},\n\n\n\t\t/**\n\t\t * can environment clone a DOM document\n\t\t *\n\t\t * @param  {DOM Document} document\n\t\t * @return {Boolean}\n\t\t */\n\t\tcanCloneDocument: function( document ){\n\t\t\treturn (document && document.importNode && document.implementation && document.implementation.createHTMLDocument);\n\t\t},\n\n\n\t\t/**\n\t\t * get the child index of a node. Used to create a node path\n\t\t *\n\t\t *   @param  {DOM Node} node\n\t\t *   @return {Int}\n\t\t */\n\t\tgetChildIndex: function (node) {\n\t\t  \tvar parent = node.parentNode,\n\t\t  \t\ti = -1,\n\t\t  \t\tchild;\n\t  \t\twhile (parent && (child = parent.childNodes[++i])){\n\t\t\t\t if (child === node){\n\t\t\t\t\t return i;\n\t\t\t\t }\n\t\t\t}\n\t  \t\treturn -1;\n\t\t},\n\n\n\t\t/**\n\t\t * get a node's path\n\t\t *\n\t\t *   @param  {DOM Node} node\n\t\t *   @return {Array}\n\t\t */\n\t\tgetNodePath: function  (node) {\n\t\t  \tvar parent = node.parentNode,\n\t\t\t  \tpath = [],\n\t\t\t  \tindex = this.getChildIndex(node);\n\n\t\t  if(parent && (path = this.getNodePath(parent))){\n\t\t\t   if(index > -1){\n\t\t\t\t   path.push(index);\n\t\t\t   }\n\t\t  }\n\t\t  return path;\n\t\t},\n\n\n\t\t/**\n\t\t * get a node's path\n\t\t *\n\t\t *   @param  {DOM Node} node\n\t\t *   @param  {String} attributeName\n\t\t *   @return {String || null}\n\t\t */\n\t\tgetFirstAncestorAttribute: function  (node, attributeName) {\n\t\t\tif(!node){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(this.hasAttribute(node, attributeName)){\n\t\t\t\treturn this.getAttribute(node, attributeName);\n\t\t\t}else{\n\t\t\t\tvar parent = node.parentNode;\n\t\t\t\tif(parent){\n\t\t\t\t\treturn this.getFirstAncestorAttribute(parent, attributeName);\n\t\t\t\t}else{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * get a node from a path.\n\t\t *\n\t\t *   @param  {DOM document} document\n\t\t *   @param  {Array} path\n\t\t *   @return {DOM Node}\n\t\t */\n\t\tgetNodeByPath: function (document, path) {\n\t\t  \tvar node = document.documentElement,\n\t\t  \t\ti = 0,\n\t\t  \t\tindex;\n\t\t  while ((index = path[++i]) > -1){\n\t\t\t  node = node.childNodes[index];\n\t\t  }\n\t\t  return node;\n\t\t},\n\n\n\t\t/**\n\t\t* get an array/nodeList of child nodes\n\t\t*\n\t\t*   @param  {DOM node} node\n\t\t*   @return {Array}\n\t\t*/\n\t\tgetChildren: function( node ){\n\t\t\treturn node.children;\n\t\t},\n\n\n\t\t/**\n\t\t* create a node\n\t\t*\n\t\t*   @param  {String} tagName\n\t\t*   @return {DOM node}\n\t\t*/\n\t\tcreateNode: function( tagName ){\n\t\t\treturn this.document.createElement(tagName);\n\t\t},\n\n\n\t\t/**\n\t\t* create a node with text content\n\t\t*\n\t\t*   @param  {String} tagName\n\t\t*   @param  {String} text\n\t\t*   @return {DOM node}\n\t\t*/\n\t\tcreateNodeWithText: function( tagName, text ){\n\t\t\tvar node = this.document.createElement(tagName);\n\t\t\tnode.innerHTML = text;\n\t\t\treturn node;\n\t\t}\n\n\n\n\t};\n\n\n\tmodules.url = {\n\n\n\t\t/**\n\t\t * creates DOM objects needed to resolve URLs\n\t\t */\n        init: function(){\n            //this._domParser = new DOMParser();\n            this._domParser = modules.domUtils.getDOMParser();\n            // do not use a head tag it does not work with IE9\n            this._html = '<base id=\"base\" href=\"\"></base><a id=\"link\" href=\"\"></a>';\n            this._nodes = this._domParser.parseFromString( this._html, 'text/html' );\n            this._baseNode =  modules.domUtils.getElementById(this._nodes,'base');\n            this._linkNode =  modules.domUtils.getElementById(this._nodes,'link');\n        },\n\n\n\t\t/**\n\t\t * resolves url to absolute version using baseUrl\n\t\t *\n\t\t * @param  {String} url\n\t\t * @param  {String} baseUrl\n\t\t * @return {String}\n\t\t */\n\t\tresolve: function(url, baseUrl) {\n\t\t\t// use modern URL web API where we can\n\t\t\tif(modules.utils.isString(url) && modules.utils.isString(baseUrl) && url.indexOf('://') === -1){\n\t\t\t\t// this try catch is required as IE has an URL object but no constuctor support\n\t\t\t\t// http://glennjones.net/articles/the-problem-with-window-url\n\t\t\t\ttry {\n\t\t\t\t\tvar resolved = new URL(url, baseUrl).toString();\n\t\t\t\t\t// deal with early Webkit not throwing an error - for Safari\n\t\t\t\t\tif(resolved === '[object URL]'){\n\t\t\t\t\t\tresolved = URI.resolve(baseUrl, url);\n\t\t\t\t\t}\n\t\t\t\t\treturn resolved;\n\t\t\t\t}catch(e){\n                    // otherwise fallback to DOM\n                    if(this._domParser === undefined){\n                        this.init();\n                    }\n\n                    // do not use setAttribute it does not work with IE9\n                    this._baseNode.href = baseUrl;\n                    this._linkNode.href = url;\n\n                    // dont use getAttribute as it returns orginal value not resolved\n                    return this._linkNode.href;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(modules.utils.isString(url)){\n\t\t\t\t\treturn url;\n\t\t\t\t}\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\n\t};\n\n\n\t/**\n\t * constructor\n\t * parses text to find just the date element of an ISO date/time string i.e. 2008-05-01\n\t *\n\t * @param  {String} dateString\n\t * @param  {String} format\n\t * @return {String}\n\t */\n\tmodules.ISODate = function ( dateString, format ) {\n\t\tthis.clear();\n\n\t\tthis.format = (format)? format : 'auto'; // auto or W3C or RFC3339 or HTML5\n\t\tthis.setFormatSep();\n\n\t\t// optional should be full iso date/time string\n\t\tif(arguments[0]) {\n\t\t\tthis.parse(dateString, this.format);\n\t\t}\n\t};\n\n\n\tmodules.ISODate.prototype = {\n\n\n\t\t/**\n\t\t * clear all states\n\t\t *\n\t\t */\n\t\tclear: function(){\n\t\t\tthis.clearDate();\n\t\t\tthis.clearTime();\n\t\t\tthis.clearTimeZone();\n\t\t\tthis.setAutoProfileState();\n\t\t},\n\n\n\t\t/**\n\t\t * clear date states\n\t\t *\n\t\t */\n\t\tclearDate: function(){\n\t\t\tthis.dY = -1;\n\t\t\tthis.dM = -1;\n\t\t\tthis.dD = -1;\n\t\t\tthis.dDDD = -1;\n\t\t},\n\n\n\t\t/**\n\t\t * clear time states\n\t\t *\n\t\t */\n\t\tclearTime: function(){\n\t\t\tthis.tH = -1;\n\t\t\tthis.tM = -1;\n\t\t\tthis.tS = -1;\n\t\t\tthis.tD = -1;\n\t\t},\n\n\n\t\t/**\n\t\t * clear timezone states\n\t\t *\n\t\t */\n\t\tclearTimeZone: function(){\n\t\t\tthis.tzH = -1;\n\t\t\tthis.tzM = -1;\n\t\t\tthis.tzPN = '+';\n\t\t\tthis.z = false;\n\t\t},\n\n\n\t\t/**\n\t\t * resets the auto profile state\n\t\t *\n\t\t */\n\t\tsetAutoProfileState: function(){\n\t\t\tthis.autoProfile = {\n\t\t\t   sep: 'T',\n\t\t\t   dsep: '-',\n\t\t\t   tsep: ':',\n\t\t\t   tzsep: ':',\n\t\t\t   tzZulu: 'Z'\n\t\t\t};\n\t\t},\n\n\n\t\t/**\n\t\t * parses text to find ISO date/time string i.e. 2008-05-01T15:45:19Z\n\t\t *\n\t\t * @param  {String} dateString\n\t\t * @param  {String} format\n\t\t * @return {String}\n\t\t */\n\t\tparse: function( dateString, format ) {\n\n\t\t\tthis.clear();\n\t\t\tthis.setFormat(format);\n\n\t\t\tvar parts = [],\n\t\t\t\ttzArray = [],\n\t\t\t\tposition = 0,\n\t\t\t\tdatePart = '',\n\t\t\t\ttimePart = '',\n\t\t\t\ttimeZonePart = '';\n\n\n\t\t\t// discover date time separtor for auto profile\n\t\t\t// Set to 'T' by default\n\t\t\tif(dateString.indexOf('t') > -1) {\n\t\t\t\tthis.autoProfile.sep = 't';\n\t\t\t}\n\t\t\tif(dateString.indexOf('z') > -1) {\n\t\t\t\tthis.autoProfile.tzZulu = 'z';\n\t\t\t}\n\t\t\tif(dateString.indexOf('Z') > -1) {\n\t\t\t\tthis.autoProfile.tzZulu = 'Z';\n\t\t\t}\n\t\t\tif(dateString.toUpperCase().indexOf('T') === -1) {\n\t\t\t\tthis.autoProfile.sep = ' ';\n\t\t\t}\n\n\n\t\t\tdateString = dateString.toUpperCase().replace(' ','T');\n\n\t\t\t// break on 'T' divider or space\n\t\t\tif(dateString.indexOf('T') > -1) {\n\t\t\t\tparts = dateString.split('T');\n\t\t\t\tdatePart = parts[0];\n\t\t\t\ttimePart = parts[1];\n\n\t\t\t\t// zulu UTC\n\t\t\t\tif(timePart.indexOf( 'Z' ) > -1) {\n\t\t\t\t\tthis.z = true;\n\t\t\t\t}\n\n\t\t\t\t// timezone\n\t\t\t\tif(timePart.indexOf( '+' ) > -1 || timePart.indexOf( '-' ) > -1) {\n\t\t\t\t\ttzArray = timePart.split( 'Z' ); // incase of incorrect use of Z\n\t\t\t\t\ttimePart = tzArray[0];\n\t\t\t\t\ttimeZonePart = tzArray[1];\n\n\t\t\t\t\t// timezone\n\t\t\t\t\tif(timePart.indexOf( '+' ) > -1 || timePart.indexOf( '-' ) > -1) {\n\t\t\t\t\t\tposition = 0;\n\n\t\t\t\t\t\tif(timePart.indexOf( '+' ) > -1) {\n\t\t\t\t\t\t\tposition = timePart.indexOf( '+' );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tposition = timePart.indexOf( '-' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttimeZonePart = timePart.substring( position, timePart.length );\n\t\t\t\t\t\ttimePart = timePart.substring( 0, position );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tdatePart = dateString;\n\t\t\t}\n\n\t\t\tif(datePart !== '') {\n\t\t\t\tthis.parseDate( datePart );\n\t\t\t\tif(timePart !== '') {\n\t\t\t\t\tthis.parseTime( timePart );\n\t\t\t\t\tif(timeZonePart !== '') {\n\t\t\t\t\t\tthis.parseTimeZone( timeZonePart );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.toString( this.format );\n\t\t},\n\n\n\t\t/**\n\t\t * parses text to find just the date element of an ISO date/time string i.e. 2008-05-01\n\t\t *\n\t\t * @param  {String} dateString\n\t\t * @param  {String} format\n\t\t * @return {String}\n\t\t */\n\t\tparseDate: function( dateString, format ) {\n\n\t\t\tthis.setFormat(format);\n\t\t\tthis.clearDate();\n\t\t\tvar parts = [];\n\n\t\t\t// discover timezone separtor for auto profile // default is ':'\n\t\t\tif(dateString.indexOf('-') === -1) {\n\t\t\t\tthis.autoProfile.tsep = '';\n\t\t\t}\n\n\t\t\t// YYYY-DDD\n\t\t\tparts = dateString.match( /(\\d\\d\\d\\d)-(\\d\\d\\d)/ );\n\t\t\tif(parts) {\n\t\t\t\tif(parts[1]) {\n\t\t\t\t\tthis.dY = parts[1];\n\t\t\t\t}\n\t\t\t\tif(parts[2]) {\n\t\t\t\t\tthis.dDDD = parts[2];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(this.dDDD === -1) {\n\t\t\t\t// YYYY-MM-DD ie 2008-05-01 and YYYYMMDD ie 20080501\n\t\t\t\tparts = dateString.match( /(\\d\\d\\d\\d)?-?(\\d\\d)?-?(\\d\\d)?/ );\n\t\t\t\tif(parts[1]) {\n\t\t\t\t\tthis.dY = parts[1];\n\t\t\t\t}\n\t\t\t\tif(parts[2]) {\n\t\t\t\t\tthis.dM = parts[2];\n\t\t\t\t}\n\t\t\t\tif(parts[3]) {\n\t\t\t\t\tthis.dD = parts[3];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.toString(this.format);\n\t\t},\n\n\n\t\t/**\n\t\t * parses text to find just the time element of an ISO date/time string i.e. 13:30:45\n\t\t *\n\t\t * @param  {String} timeString\n\t\t * @param  {String} format\n\t\t * @return {String}\n\t\t */\n\t\tparseTime: function( timeString, format ) {\n\n\t\t\tthis.setFormat(format);\n\t\t\tthis.clearTime();\n\t\t\tvar parts = [];\n\n\t\t\t// discover date separtor for auto profile // default is ':'\n\t\t\tif(timeString.indexOf(':') === -1) {\n\t\t\t\tthis.autoProfile.tsep = '';\n\t\t\t}\n\n\t\t\t// finds timezone HH:MM:SS and HHMMSS  ie 13:30:45, 133045 and 13:30:45.0135\n\t\t\tparts = timeString.match( /(\\d\\d)?:?(\\d\\d)?:?(\\d\\d)?.?([0-9]+)?/ );\n\t\t\tif(parts[1]) {\n\t\t\t\tthis.tH = parts[1];\n\t\t\t}\n\t\t\tif(parts[2]) {\n\t\t\t\tthis.tM = parts[2];\n\t\t\t}\n\t\t\tif(parts[3]) {\n\t\t\t\tthis.tS = parts[3];\n\t\t\t}\n\t\t\tif(parts[4]) {\n\t\t\t\tthis.tD = parts[4];\n\t\t\t}\n\t\t\treturn this.toTimeString(this.format);\n\t\t},\n\n\n\t\t/**\n\t\t * parses text to find just the time element of an ISO date/time string i.e. +08:00\n\t\t *\n\t\t * @param  {String} timeString\n\t\t * @param  {String} format\n\t\t * @return {String}\n\t\t */\n\t\tparseTimeZone: function( timeString, format ) {\n\n\t\t\tthis.setFormat(format);\n\t\t\tthis.clearTimeZone();\n\t\t\tvar parts = [];\n\n\t\t\tif(timeString.toLowerCase() === 'z'){\n\t\t\t\tthis.z = true;\n\t\t\t\t// set case for z\n\t\t\t\tthis.autoProfile.tzZulu = (timeString === 'z')? 'z' : 'Z';\n\t\t\t}else{\n\n\t\t\t\t// discover timezone separtor for auto profile // default is ':'\n\t\t\t\tif(timeString.indexOf(':') === -1) {\n\t\t\t\t\tthis.autoProfile.tzsep = '';\n\t\t\t\t}\n\n\t\t\t\t// finds timezone +HH:MM and +HHMM  ie +13:30 and +1330\n\t\t\t\tparts = timeString.match( /([\\-\\+]{1})?(\\d\\d)?:?(\\d\\d)?/ );\n\t\t\t\tif(parts[1]) {\n\t\t\t\t\tthis.tzPN = parts[1];\n\t\t\t\t}\n\t\t\t\tif(parts[2]) {\n\t\t\t\t\tthis.tzH = parts[2];\n\t\t\t\t}\n\t\t\t\tif(parts[3]) {\n\t\t\t\t\tthis.tzM = parts[3];\n\t\t\t\t}\n\n\n\t\t\t}\n\t\t\tthis.tzZulu = 'z';\n\t\t\treturn this.toTimeString( this.format );\n\t\t},\n\n\n\t\t/**\n\t\t * returns ISO date/time string in W3C Note, RFC 3339, HTML5, or auto profile\n\t\t *\n\t\t * @param  {String} format\n\t\t * @return {String}\n\t\t */\n\t\ttoString: function( format ) {\n\n\t\t\tthis.setFormat(format);\n\t\t\tvar output = '';\n\n\t\t\tif(this.dY  > -1) {\n\t\t\t\toutput = this.dY;\n\t\t\t\tif(this.dM > 0 && this.dM < 13) {\n\t\t\t\t\toutput += this.dsep + this.dM;\n\t\t\t\t\tif(this.dD > 0 && this.dD < 32) {\n\t\t\t\t\t\toutput += this.dsep + this.dD;\n\t\t\t\t\t\tif(this.tH > -1 && this.tH < 25) {\n\t\t\t\t\t\t\toutput += this.sep + this.toTimeString( this.format );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(this.dDDD > -1) {\n\t\t\t\t\toutput += this.dsep + this.dDDD;\n\t\t\t\t}\n\t\t\t} else if(this.tH > -1) {\n\t\t\t\toutput += this.toTimeString( this.format );\n\t\t\t}\n\n\t\t\treturn output;\n\t\t},\n\n\n\t\t/**\n\t\t * returns just the time string element of an ISO date/time\n\t\t * in W3C Note, RFC 3339, HTML5, or auto profile\n\t\t *\n\t\t * @param  {String} format\n\t\t * @return {String}\n\t\t */\n\t\ttoTimeString: function( format ) {\n\n\t\t\tthis.setFormat(format);\n\t\t\tvar out = '';\n\n\t\t\t// time can only be created with a full date\n\t\t\tif(this.tH) {\n\t\t\t\tif(this.tH > -1 && this.tH < 25) {\n\t\t\t\t\tout += this.tH;\n\t\t\t\t\tif(this.tM > -1 && this.tM < 61){\n\t\t\t\t\t\tout += this.tsep + this.tM;\n\t\t\t\t\t\tif(this.tS > -1 && this.tS < 61){\n\t\t\t\t\t\t\tout += this.tsep + this.tS;\n\t\t\t\t\t\t\tif(this.tD > -1){\n\t\t\t\t\t\t\t\tout += '.' + this.tD;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\n\t\t\t\t\t// time zone offset\n\t\t\t\t\tif(this.z) {\n\t\t\t\t\t\tout += this.tzZulu;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(this.tzH && this.tzH > -1 && this.tzH < 25) {\n\t\t\t\t\t\t\tout += this.tzPN + this.tzH;\n\t\t\t\t\t\t\tif(this.tzM > -1 && this.tzM < 61){\n\t\t\t\t\t\t\t\tout += this.tzsep + this.tzM;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * set the current profile to W3C Note, RFC 3339, HTML5, or auto profile\n\t\t *\n\t\t * @param  {String} format\n\t\t */\n\t\tsetFormat: function( format ){\n\t\t\tif(format){\n\t\t\t\tthis.format = format;\n\t\t\t}\n\t\t\tthis.setFormatSep();\n\t\t},\n\n\n\t\t/**\n\t\t * set the current profile to W3C Note, RFC 3339, HTML5, or auto profile\n\t\t *\n\t\t */\n\t\tsetFormatSep: function() {\n\t\t\tswitch( this.format.toLowerCase() ) {\n\t\t\t\tcase 'microformat2':\n\t\t\t\t\tthis.sep = ' ';\n\t\t\t\t\tthis.dsep = '-';\n\t\t\t\t\tthis.tsep = ':';\n\t\t\t\t\tthis.tzsep = '';\n\t\t\t\t\tthis.tzZulu = 'Z';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rfc3339':\n\t\t\t\t\tthis.sep = 'T';\n\t\t\t\t\tthis.dsep = '';\n\t\t\t\t\tthis.tsep = '';\n\t\t\t\t\tthis.tzsep = '';\n\t\t\t\t\tthis.tzZulu = 'Z';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'w3c':\n\t\t\t\t\tthis.sep = 'T';\n\t\t\t\t\tthis.dsep = '-';\n\t\t\t\t\tthis.tsep = ':';\n\t\t\t\t\tthis.tzsep = ':';\n\t\t\t\t\tthis.tzZulu = 'Z';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'html5':\n\t\t\t\t\tthis.sep = ' ';\n\t\t\t\t\tthis.dsep = '-';\n\t\t\t\t\tthis.tsep = ':';\n\t\t\t\t\tthis.tzsep = ':';\n\t\t\t\t\tthis.tzZulu = 'Z';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// auto - defined by format of input string\n\t\t\t\t\tthis.sep = this.autoProfile.sep;\n\t\t\t\t\tthis.dsep = this.autoProfile.dsep;\n\t\t\t\t\tthis.tsep = this.autoProfile.tsep;\n\t\t\t\t\tthis.tzsep = this.autoProfile.tzsep;\n\t\t\t\t\tthis.tzZulu = this.autoProfile.tzZulu;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * does current data contain a full date i.e. 2015-03-23\n\t\t *\n\t\t * @return {Boolean}\n\t\t */\n\t\thasFullDate: function() {\n\t\t\treturn(this.dY !== -1 && this.dM !== -1 && this.dD !== -1);\n\t\t},\n\n\n\t\t/**\n\t\t * does current data contain a minimum date which is just a year number i.e. 2015\n\t\t *\n\t\t * @return {Boolean}\n\t\t */\n\t\thasDate: function() {\n\t\t\treturn(this.dY !== -1);\n\t\t},\n\n\n\t\t/**\n\t\t * does current data contain a minimum time which is just a hour number i.e. 13\n\t\t *\n\t\t * @return {Boolean}\n\t\t */\n\t\thasTime: function() {\n\t\t\treturn(this.tH !== -1);\n\t\t},\n\n\t\t/**\n\t\t * does current data contain a minimum timezone i.e. -1 || +1 || z\n\t\t *\n\t\t * @return {Boolean}\n\t\t */\n\t\thasTimeZone: function() {\n\t\t\treturn(this.tzH !== -1);\n\t\t}\n\n\t};\n\n\tmodules.ISODate.prototype.constructor = modules.ISODate;\n\n\n\tmodules.dates = {\n\n\n\t\t/**\n\t\t * does text contain am\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Boolean}\n\t\t */\n\t\thasAM: function( text ) {\n\t\t\ttext = text.toLowerCase();\n\t\t\treturn(text.indexOf('am') > -1 || text.indexOf('a.m.') > -1);\n\t\t},\n\n\n\t\t/**\n\t\t * does text contain pm\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Boolean}\n\t\t */\n\t\thasPM: function( text ) {\n\t\t\ttext = text.toLowerCase();\n\t\t\treturn(text.indexOf('pm') > -1 || text.indexOf('p.m.') > -1);\n\t\t},\n\n\n\t\t/**\n\t\t * remove am and pm from text and return it\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {String}\n\t\t */\n\t\tremoveAMPM: function( text ) {\n\t\t\treturn text.replace('pm', '').replace('p.m.', '').replace('am', '').replace('a.m.', '');\n\t\t},\n\n\n\t   /**\n\t\t * simple test of whether ISO date string is a duration  i.e.  PY17M or PW12\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Boolean}\n\t\t */\n\t\tisDuration: function( text ) {\n\t\t\tif(modules.utils.isString( text )){\n\t\t\t\ttext = text.toLowerCase();\n\t\t\t\tif(modules.utils.startWith(text, 'p') ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\n\t   /**\n\t\t * is text a time or timezone\n\t\t * i.e. HH-MM-SS or z+-HH-MM-SS 08:43 | 15:23:00:0567 | 10:34pm | 10:34 p.m. | +01:00:00 | -02:00 | z15:00 | 0843\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Boolean}\n\t\t */\n\t\tisTime: function( text ) {\n\t\t\tif(modules.utils.isString(text)){\n\t\t\t\ttext = text.toLowerCase();\n\t\t\t\ttext = modules.utils.trim( text );\n\t\t\t\t// start with timezone char\n\t\t\t\tif( text.match(':') && ( modules.utils.startWith(text, 'z') || modules.utils.startWith(text, '-')  || modules.utils.startWith(text, '+') )) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// has ante meridiem or post meridiem\n\t\t\t\tif( text.match(/^[0-9]/) &&\n\t\t\t\t\t( this.hasAM(text) || this.hasPM(text) )) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// contains time delimiter but not datetime delimiter\n\t\t\t\tif( text.match(':') && !text.match(/t|\\s/) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// if it's a number of 2, 4 or 6 chars\n\t\t\t\tif(modules.utils.isNumber(text)){\n\t\t\t\t\tif(text.length === 2 || text.length === 4 || text.length === 6){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\n\t\t/**\n\t\t * parses a time from text and returns 24hr time string\n\t\t * i.e. 5:34am = 05:34:00 and 1:52:04p.m. = 13:52:04\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {String}\n\t\t */\n\t\tparseAmPmTime: function( text ) {\n\t\t\tvar out = text,\n\t\t\t\ttimes = [];\n\n\t\t\t// if the string has a text : or am or pm\n\t\t\tif(modules.utils.isString(out)) {\n\t\t\t\t//text = text.toLowerCase();\n\t\t\t\ttext = text.replace(/[ ]+/g, '');\n\n\t\t\t\tif(text.match(':') || this.hasAM(text) || this.hasPM(text)) {\n\n\t\t\t\t\tif(text.match(':')) {\n\t\t\t\t\t\ttimes = text.split(':');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// single number text i.e. 5pm\n\t\t\t\t\t\ttimes[0] = text;\n\t\t\t\t\t\ttimes[0] = this.removeAMPM(times[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// change pm hours to 24hr number\n\t\t\t\t\tif(this.hasPM(text)) {\n\t\t\t\t\t\tif(times[0] < 12) {\n\t\t\t\t\t\t\ttimes[0] = parseInt(times[0], 10) + 12;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// add leading zero's where needed\n\t\t\t\t\tif(times[0] && times[0].length === 1) {\n\t\t\t\t\t\ttimes[0] = '0' + times[0];\n\t\t\t\t\t}\n\n\t\t\t\t\t// rejoin text elements together\n\t\t\t\t\tif(times[0]) {\n\t\t\t\t\t\ttext = times.join(':');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// remove am/pm strings\n\t\t\treturn this.removeAMPM(text);\n\t\t},\n\n\n\t   /**\n\t\t * overlays a time on a date to return the union of the two\n\t\t *\n\t\t * @param  {String} date\n\t\t * @param  {String} time\n\t\t * @param  {String} format ( Modules.ISODate profile format )\n\t\t * @return {Object} Modules.ISODate\n\t\t */\n\t\tdateTimeUnion: function(date, time, format) {\n\t\t\tvar isodate = new modules.ISODate(date, format),\n\t\t\t\tisotime = new modules.ISODate();\n\n\t\t\tisotime.parseTime(this.parseAmPmTime(time), format);\n\t\t\tif(isodate.hasFullDate() && isotime.hasTime()) {\n\t\t\t\tisodate.tH = isotime.tH;\n\t\t\t\tisodate.tM = isotime.tM;\n\t\t\t\tisodate.tS = isotime.tS;\n\t\t\t\tisodate.tD = isotime.tD;\n\t\t\t\treturn isodate;\n\t\t\t} else {\n\t\t\t\tif(isodate.hasFullDate()){\n\t\t\t\t\treturn isodate;\n\t\t\t\t}\n\t\t\t\treturn new modules.ISODate();\n\t\t\t}\n\t\t},\n\n\n\t   /**\n\t\t * concatenate an array of date and time text fragments to create an ISODate object\n\t\t * used for microformat value and value-title rules\n\t\t *\n\t\t * @param  {Array} arr ( Array of Strings )\n\t\t * @param  {String} format ( Modules.ISODate profile format )\n\t\t * @return {Object} Modules.ISODate\n\t\t */\n\t\tconcatFragments: function (arr, format) {\n\t\t\tvar out = new modules.ISODate(),\n\t\t\t\ti = 0,\n\t\t\t\tvalue = '';\n\n\t\t\t// if the fragment already contains a full date just return it once\n\t\t\tif(arr[0].toUpperCase().match('T')) {\n\t\t\t\treturn new modules.ISODate(arr[0], format);\n\t\t\t}else{\n\t\t\t\tfor(i = 0; i < arr.length; i++) {\n\t\t\t\t\tvalue = arr[i];\n\n\t\t\t\t\t// date pattern\n\t\t\t\t\tif( value.charAt(4) === '-' && out.hasFullDate() === false ){\n\t\t\t\t\t\tout.parseDate(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t// time pattern\n\t\t\t\t\tif( (value.indexOf(':') > -1 || modules.utils.isNumber( this.parseAmPmTime(value) )) && out.hasTime() === false ) {\n\t\t\t\t\t\t// split time and timezone\n\t\t\t\t\t\tvar items = this.splitTimeAndZone(value);\n\t\t\t\t\t\tvalue = items[0];\n\n\t\t\t\t\t\t// parse any use of am/pm\n\t\t\t\t\t\tvalue = this.parseAmPmTime(value);\n\t\t\t\t\t\tout.parseTime(value);\n\n\t\t\t\t\t\t// parse any timezone\n\t\t\t\t\t\tif(items.length > 1){\n\t\t\t\t\t\t\tout.parseTimeZone(items[1], format);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// timezone pattern\n\t\t\t\t\tif(value.charAt(0) === '-' || value.charAt(0) === '+' || value.toUpperCase() === 'Z') {\n\t\t\t\t\t\tif( out.hasTimeZone() === false ){\n\t\t\t\t\t\t\tout.parseTimeZone(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// alway imply minutes\n\t\t\t\tif(out.tM === -1){\n\t\t\t\t\tout.tM = '00';\n\t\t\t\t}\n\t\t\t\treturn out;\n\t\t\t}\n\t\t},\n\n\n\t   /**\n\t\t * parses text by splitting it into an array of time and timezone strings\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Array} Modules.ISODate\n\t\t */\n\t\tsplitTimeAndZone: function ( text ){\n\t\t   var out = [text],\n\t\t\t   chars = ['-','+','z','Z'],\n\t\t\t   i = chars.length;\n\n\t\t\twhile (i--) {\n\t\t\t  if(text.indexOf(chars[i]) > -1){\n\t\t\t\t  out[0] = text.slice( 0, text.indexOf(chars[i]) );\n\t\t\t\t  out.push( text.slice( text.indexOf(chars[i]) ) );\n\t\t\t\t  break;\n\t\t\t   }\n\t\t\t}\n\t\t   return out;\n\t\t}\n\n\t};\n\n\n\tmodules.text = {\n\n\t\t// normalised or whitespace or whitespacetrimmed\n\t\ttextFormat: 'whitespacetrimmed',\n\n\t\t// block level tags, used to add line returns\n\t\tblockLevelTags: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'hr', 'pre', 'table',\n\t\t\t'address', 'article', 'aside', 'blockquote', 'caption', 'col', 'colgroup', 'dd', 'div',\n\t\t\t'dt', 'dir', 'fieldset', 'figcaption', 'figure', 'footer', 'form',  'header', 'hgroup', 'hr',\n\t\t\t'li', 'map', 'menu', 'nav', 'optgroup', 'option', 'section', 'tbody', 'testarea',\n\t\t\t'tfoot', 'th', 'thead', 'tr', 'td', 'ul', 'ol', 'dl', 'details'],\n\n\t\t// tags to exclude\n\t\texcludeTags: ['noframe', 'noscript', 'template', 'script', 'style', 'frames', 'frameset'],\n\n\n\t\t/**\n\t\t * parses the text from the DOM Node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} textFormat\n\t\t * @return {String}\n\t\t */\n\t\tparse: function(doc, node, textFormat){\n\t\t\tvar out;\n\t\t\tthis.textFormat = (textFormat)? textFormat : this.textFormat;\n\t\t\tif(this.textFormat === 'normalised'){\n\t\t\t\tout = this.walkTreeForText( node );\n\t\t\t\tif(out !== undefined){\n\t\t\t\t\treturn this.normalise( doc, out );\n\t\t\t\t}else{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tvar clonedNode = modules.domUtils.clone(node);\n\t\t\t\tvar trimmedNode = modules.domUtils.removeDescendantsByTagName( clonedNode, this.excludeTags );\n\n\t\t\t   return this.formatText( doc, modules.domUtils.textContent(trimmedNode), this.textFormat );\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * parses the text from a html string\n\t\t *\n\t\t * @param  {DOM Document} doc\n\t\t * @param  {String} text\n\t\t * @param  {String} textFormat\n\t\t * @return {String}\n\t\t */\n\t\tparseText: function( doc, text, textFormat ){\n\t\t   var node = modules.domUtils.createNodeWithText( 'div', text );\n\t\t   return this.parse( doc, node, textFormat );\n\t\t},\n\n\n\t\t/**\n\t\t * parses the text from a html string - only for whitespace or whitespacetrimmed formats\n\t\t *\n\t\t * @param  {String} text\n\t\t * @param  {String} textFormat\n\t\t * @return {String}\n\t\t */\n\t\tformatText: function( doc, text, textFormat ){\n\t\t   this.textFormat = (textFormat)? textFormat : this.textFormat;\n\t\t   if(text){\n\t\t\t  var out = text\n\t\t\t  if(this.textFormat === 'whitespacetrimmed') {\n\t\t\t\t out = modules.utils.trimWhitespace( out );\n\t\t\t  }\n\t\t\t  return out;\n\t\t   }else{\n\t\t\t  return '';\n\t\t   }\n\t\t},\n\n\n\t\t/**\n\t\t * normalises whitespace in given text\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {String}\n\t\t */\n\t\tnormalise: function( doc, text ){\n\t\t\ttext = text.replace( /&nbsp;/g, ' ') ;    // exchanges html entity for space into space char\n\t\t\ttext = modules.utils.collapseWhiteSpace( text );     // removes linefeeds, tabs and addtional spaces\n\t\t\ttext = modules.domUtils.decodeEntities( doc, text );  // decode HTML entities\n\t\t\ttext = text.replace( '–', '-' );          // correct dash decoding\n\t\t\treturn modules.utils.trim( text );\n\t\t},\n\n\n\t\t/**\n\t\t * walks DOM tree parsing the text from DOM Nodes\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\twalkTreeForText: function( node ) {\n\t\t\tvar out = '',\n\t\t\t\tj = 0;\n\n\t\t\tif(node.tagName && this.excludeTags.indexOf( node.tagName.toLowerCase() ) > -1){\n\t\t\t\treturn out;\n\t\t\t}\n\n\t\t\t// if node is a text node get its text\n\t\t\tif(node.nodeType && node.nodeType === 3){\n\t\t\t\tout += modules.domUtils.getElementText( node );\n\t\t\t}\n\n\t\t\t// get the text of the child nodes\n\t\t\tif(node.childNodes && node.childNodes.length > 0){\n\t\t\t\tfor (j = 0; j < node.childNodes.length; j++) {\n\t\t\t\t\tvar text = this.walkTreeForText( node.childNodes[j] );\n\t\t\t\t\tif(text !== undefined){\n\t\t\t\t\t\tout += text;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if it's a block level tag add an additional space at the end\n\t\t\tif(node.tagName && this.blockLevelTags.indexOf( node.tagName.toLowerCase() ) !== -1){\n\t\t\t\tout += ' ';\n\t\t\t}\n\n\t\t\treturn (out === '')? undefined : out ;\n\t\t}\n\n\t};\n\n\n\tmodules.html = {\n\n\t\t// elements which are self-closing\n\t\tselfClosingElt: ['area', 'base', 'br', 'col', 'hr', 'img', 'input', 'link', 'meta', 'param', 'command', 'keygen', 'source'],\n\n\n\t\t/**\n\t\t * parse the html string from DOM Node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\tparse: function( node ){\n\t\t\tvar out = '',\n\t\t\t\tj = 0;\n\n\t\t\t// we do not want the outer container\n\t\t\tif(node.childNodes && node.childNodes.length > 0){\n\t\t\t\tfor (j = 0; j < node.childNodes.length; j++) {\n\t\t\t\t\tvar text = this.walkTreeForHtml( node.childNodes[j] );\n\t\t\t\t\tif(text !== undefined){\n\t\t\t\t\t\tout += text;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * walks the DOM tree parsing the html string from the nodes\n\t\t *\n\t\t * @param  {DOM Document} doc\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\twalkTreeForHtml: function( node ) {\n\t\t\tvar out = '',\n\t\t\t\tj = 0;\n\n\t\t\t// if node is a text node get its text\n\t\t\tif(node.nodeType && node.nodeType === 3){\n\t\t\t\t//out += modules.domUtils.getElementText( node );\n\t\t\t\tvar containerNode = modules.domUtils.createNode('div');\n\t\t\t\tmodules.domUtils.appendChild(containerNode, modules.domUtils.clone(node));\n\t\t\t\tout += modules.domUtils.innerHTML(containerNode);\n\t\t\t}\n\n\n\t\t\t// exclude text which has been added with include pattern  -\n\t\t\tif(node.nodeType && node.nodeType === 1 && modules.domUtils.hasAttribute(node, 'data-include') === false){\n\n\t\t\t\t// begin tag\n\t\t\t\tout += '<' + node.tagName.toLowerCase();\n\n\t\t\t\t// add attributes\n\t\t\t\tvar attrs = modules.domUtils.getOrderedAttributes(node);\n\t\t\t\tfor (j = 0; j < attrs.length; j++) {\n\t\t\t\t\tout += ' ' + attrs[j].name +  '=' + '\"' + attrs[j].value + '\"';\n\t\t\t\t}\n\n\t\t\t\tif(this.selfClosingElt.indexOf(node.tagName.toLowerCase()) === -1){\n\t\t\t\t\tout += '>';\n\t\t\t\t}\n\n\t\t\t\t// get the text of the child nodes\n\t\t\t\tif(node.childNodes && node.childNodes.length > 0){\n\n\t\t\t\t\tfor (j = 0; j < node.childNodes.length; j++) {\n\t\t\t\t\t\tvar text = this.walkTreeForHtml( node.childNodes[j] );\n\t\t\t\t\t\tif(text !== undefined){\n\t\t\t\t\t\t\tout += text;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// end tag\n\t\t\t\tif(this.selfClosingElt.indexOf(node.tagName.toLowerCase()) > -1){\n\t\t\t\t\tout += ' />';\n\t\t\t\t}else{\n\t\t\t\t\tout += '</' + node.tagName.toLowerCase() + '>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn (out === '')? undefined : out;\n\t\t}\n\n\n\t};\n\n\n\tmodules.maps['h-adr'] = {\n\t\troot: 'adr',\n\t\tname: 'h-adr',\n\t\tproperties: {\n\t\t\t'post-office-box': {},\n\t\t\t'street-address': {},\n\t\t\t'extended-address': {},\n\t\t\t'locality': {},\n\t\t\t'region': {},\n\t\t\t'postal-code': {},\n\t\t\t'country-name': {}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-card'] =  {\n\t\troot: 'vcard',\n\t\tname: 'h-card',\n\t\tproperties: {\n\t\t\t'fn': {\n\t\t\t\t'map': 'p-name'\n\t\t\t},\n\t\t\t'adr': {\n\t\t\t\t'map': 'p-adr',\n\t\t\t\t'uf': ['h-adr']\n\t\t\t},\n\t\t\t'agent': {\n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'bday': {\n\t\t\t\t'map': 'dt-bday'\n\t\t\t},\n\t\t\t'class': {},\n\t\t\t'category': {\n\t\t\t\t'map': 'p-category',\n\t\t\t\t'relAlt': ['tag']\n\t\t\t},\n\t\t\t'email': {\n\t\t\t\t'map': 'u-email'\n\t\t\t},\n\t\t\t'geo': {\n\t\t\t\t'map': 'p-geo', \n\t\t\t\t'uf': ['h-geo']\n\t\t\t},\n\t\t\t'key': {\n\t\t\t\t'map': 'u-key'\n\t\t\t},\n\t\t\t'label': {},\n\t\t\t'logo': {\n\t\t\t\t'map': 'u-logo'\n\t\t\t},\n\t\t\t'mailer': {},\n\t\t\t'honorific-prefix': {},\n\t\t\t'given-name': {},\n\t\t\t'additional-name': {},\n\t\t\t'family-name': {},\n\t\t\t'honorific-suffix': {},\n\t\t\t'nickname': {},\n\t\t\t'note': {}, // could be html i.e. e-note\n\t\t\t'org': {},\n\t\t\t'p-organization-name': {},\n\t\t\t'p-organization-unit': {},\n\t\t\t'photo': {\n\t\t\t\t'map': 'u-photo'\n\t\t\t},\n\t\t\t'rev': {\n\t\t\t\t'map': 'dt-rev'\n\t\t\t},\n\t\t\t'role': {},\n\t\t\t'sequence': {},\n\t\t\t'sort-string': {},\n\t\t\t'sound': {\n\t\t\t\t'map': 'u-sound'\n\t\t\t},\n\t\t\t'title': {\n\t\t\t\t'map': 'p-job-title'\n\t\t\t},\n\t\t\t'tel': {},\n\t\t\t'tz': {},\n\t\t\t'uid': {\n\t\t\t\t'map': 'u-uid'\n\t\t\t},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url'\n\t\t\t}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-entry'] = {\n\t\troot: 'hentry',\n\t\tname: 'h-entry',\n\t\tproperties: {\n\t\t\t'entry-title': {\n\t\t\t\t'map': 'p-name'\n\t\t\t},\n\t\t\t'entry-summary': {\n\t\t\t\t'map': 'p-summary'\n\t\t\t},\n\t\t\t'entry-content': {\n\t\t\t\t'map': 'e-content'\n\t\t\t},\n\t\t\t'published': {\n\t\t\t\t'map': 'dt-published'\n\t\t\t},\n\t\t\t'updated': {\n\t\t\t\t'map': 'dt-updated'\n\t\t\t},\n\t\t\t'author': { \n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'category': {\n\t\t\t\t'map': 'p-category',\n\t\t\t\t'relAlt': ['tag']\n\t\t\t},\n\t\t\t'geo': {\n\t\t\t\t'map': 'p-geo', \n\t\t\t\t'uf': ['h-geo']\n\t\t\t},\n\t\t\t'latitude': {},\n\t\t\t'longitude': {},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url',\n\t\t\t\t'relAlt': ['bookmark']\n\t\t\t}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-event'] = {  \n\t\troot: 'vevent',\n\t\tname: 'h-event',\n\t\tproperties: {\n\t\t\t'summary': {\n\t\t\t\t'map': 'p-name'\n\t\t\t},\n\t\t\t'dtstart': {\n\t\t\t\t'map': 'dt-start'\n\t\t\t},\n\t\t\t'dtend': {\n\t\t\t\t'map': 'dt-end'\n\t\t\t},\n\t\t\t'description': {},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url'\n\t\t\t},\n\t\t\t'category': {\n\t\t\t\t'map': 'p-category',\n\t\t\t\t'relAlt': ['tag']\n\t\t\t},\n\t\t\t'location': {\n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'geo': {\n\t\t\t\t'uf': ['h-geo']\n\t\t\t},\n\t\t\t'latitude': {},\n\t\t\t'longitude': {},\n\t\t\t'duration': {\n\t\t\t\t'map': 'dt-duration'\n\t\t\t},\n\t\t\t'contact': {\n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'organizer': {\n\t\t\t\t'uf': ['h-card']},\n\t\t\t'attendee': {\n\t\t\t\t'uf': ['h-card']},\n\t\t\t'uid': {\n\t\t\t\t'map': 'u-uid'\n\t\t\t},\n\t\t\t'attach': {\n\t\t\t\t'map': 'u-attach'\n\t\t\t},\n\t\t\t'status': {},\n\t\t\t'rdate': {}, \n\t\t\t'rrule': {}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-feed'] = {\n\t\troot: 'hfeed',\n\t\tname: 'h-feed',\n\t\tproperties: {\n\t\t\t'category': {\n\t\t\t\t'map': 'p-category',\n\t\t\t\t'relAlt': ['tag']\n\t\t\t},\n\t\t\t'summary': {\n\t\t\t\t'map': 'p-summary'\n\t\t\t},\n\t\t\t'author': { \n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url'\n\t\t\t},\n\t\t\t'photo': {\n\t\t\t\t'map': 'u-photo'\n\t\t\t},\n\t\t}\n\t};\n\n\n\tmodules.maps['h-geo'] = {\n\t\troot: 'geo',\n\t\tname: 'h-geo',\n\t\tproperties: {\n\t\t\t'latitude': {},\n\t\t\t'longitude': {}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-item'] = {\n\t\troot: 'item',\n\t\tname: 'h-item',\n\t\tsubTree: false,\n\t\tproperties: {\n\t\t\t'fn': {\n\t\t\t\t'map': 'p-name'\n\t\t\t},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url'\n\t\t\t},\n\t\t\t'photo': {\n\t\t\t\t'map': 'u-photo'\n\t\t\t}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-listing'] = {\n\t\t\troot: 'hlisting',\n\t\t\tname: 'h-listing',\n\t\t\tproperties: {\n\t\t\t\t'version': {},\n\t\t\t\t'lister': {\n\t\t\t\t\t'uf': ['h-card']\n\t\t\t\t},\n\t\t\t\t'dtlisted': {\n\t\t\t\t\t'map': 'dt-listed'\n\t\t\t\t},\n\t\t\t\t'dtexpired': {\n\t\t\t\t\t'map': 'dt-expired'\n\t\t\t\t},\n\t\t\t\t'location': {},\n\t\t\t\t'price': {},\n\t\t\t\t'item': {\n\t\t\t\t\t'uf': ['h-card','a-adr','h-geo']\n\t\t\t\t},\n\t\t\t\t'summary': {\n\t\t\t\t\t'map': 'p-name'\n\t\t\t\t},\n\t\t\t\t'description': {\n\t\t\t\t\t'map': 'e-description'\n\t\t\t\t},\n\t\t\t\t'listing': {}\n\t\t\t}\n\t\t};\n\n\n\tmodules.maps['h-news'] = {\n\t\t\troot: 'hnews',\n\t\t\tname: 'h-news',\n\t\t\tproperties: {\n\t\t\t\t'entry': {\n\t\t\t\t\t'uf': ['h-entry']\n\t\t\t\t},\n\t\t\t\t'geo': {\n\t\t\t\t\t'uf': ['h-geo']\n\t\t\t\t},\n\t\t\t\t'latitude': {},\n\t\t\t\t'longitude': {},\n\t\t\t\t'source-org': {\n\t\t\t\t\t'uf': ['h-card']\n\t\t\t\t},\n\t\t\t\t'dateline': {\n\t\t\t\t\t'uf': ['h-card']\n\t\t\t\t},\n\t\t\t\t'item-license': {\n\t\t\t\t\t'map': 'u-item-license'\n\t\t\t\t},\n\t\t\t\t'principles': {\n\t\t\t\t\t'map': 'u-principles', \n\t\t\t\t\t'relAlt': ['principles']\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n\tmodules.maps['h-org'] = {\n\t\troot: 'h-x-org',  // drop this from v1 as it causes issue with fn org hcard pattern\n\t\tname: 'h-org',\n\t\tchildStructure: true,\n\t\tproperties: {\n\t\t\t'organization-name': {},\n\t\t\t'organization-unit': {}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-product'] = {\n\t\t\troot: 'hproduct',\n\t\t\tname: 'h-product',\n\t\t\tproperties: {\n\t\t\t\t'brand': {\n\t\t\t\t\t'uf': ['h-card']\n\t\t\t\t},\n\t\t\t\t'category': {\n\t\t\t\t\t'map': 'p-category',\n\t\t\t\t\t'relAlt': ['tag']\n\t\t\t\t},\n\t\t\t\t'price': {},\n\t\t\t\t'description': {\n\t\t\t\t\t'map': 'e-description'\n\t\t\t\t},\n\t\t\t\t'fn': {\n\t\t\t\t\t'map': 'p-name'\n\t\t\t\t},\n\t\t\t\t'photo': {\n\t\t\t\t\t'map': 'u-photo'\n\t\t\t\t},\n\t\t\t\t'url': {\n\t\t\t\t\t'map': 'u-url'\n\t\t\t\t},\n\t\t\t\t'review': {\n\t\t\t\t\t'uf': ['h-review', 'h-review-aggregate']\n\t\t\t\t},\n\t\t\t\t'listing': {\n\t\t\t\t\t'uf': ['h-listing']\n\t\t\t\t},\n\t\t\t\t'identifier': {\n\t\t\t\t\t'map': 'u-identifier'\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n\tmodules.maps['h-recipe'] = {\n\t\t\troot: 'hrecipe',\n\t\t\tname: 'h-recipe',\n\t\t\tproperties: {\n\t\t\t\t'fn': {\n\t\t\t\t\t'map': 'p-name'\n\t\t\t\t},\n\t\t\t\t'ingredient': {\n\t\t\t\t\t'map': 'e-ingredient'\n\t\t\t\t},\n\t\t\t\t'yield': {},\n\t\t\t\t'instructions': {\n\t\t\t\t\t'map': 'e-instructions'\n\t\t\t\t},\n\t\t\t\t'duration': {\n\t\t\t\t\t'map': 'dt-duration'\n\t\t\t\t},\n\t\t\t\t'photo': {\n\t\t\t\t\t'map': 'u-photo'\n\t\t\t\t},\n\t\t\t\t'summary': {},\n\t\t\t\t'author': {\n\t\t\t\t\t'uf': ['h-card']\n\t\t\t\t},\n\t\t\t\t'published': {\n\t\t\t\t\t'map': 'dt-published'\n\t\t\t\t},\n\t\t\t\t'nutrition': {},\n\t\t\t\t'category': {\n\t\t\t\t\t'map': 'p-category',\n\t\t\t\t\t'relAlt': ['tag']\n\t\t\t\t},\n\t\t\t}\n\t\t};\n\n\n\tmodules.maps['h-resume'] = {\n\t\troot: 'hresume',\n\t\tname: 'h-resume',\n\t\tproperties: {\n\t\t\t'summary': {},\n\t\t\t'contact': {\n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'education': {\n\t\t\t\t'uf': ['h-card', 'h-event']\n\t\t\t},\n\t\t\t'experience': {\n\t\t\t\t'uf': ['h-card', 'h-event']\n\t\t\t},\n\t\t\t'skill': {},\n\t\t\t'affiliation': {\n\t\t\t\t'uf': ['h-card']\n\t\t\t}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-review-aggregate'] = {\n\t\troot: 'hreview-aggregate',\n\t\tname: 'h-review-aggregate',\n\t\tproperties: {\n\t\t\t'summary': {\n\t\t\t\t'map': 'p-name'\n\t\t\t},\n\t\t\t'item': {\n\t\t\t\t'map': 'p-item',\n\t\t\t\t'uf': ['h-item', 'h-geo', 'h-adr', 'h-card', 'h-event', 'h-product']\n\t\t\t},\n\t\t\t'rating': {},\n\t\t\t'average': {},\n\t\t\t'best': {},\n\t\t\t'worst': {},       \n\t\t\t'count': {},\n\t\t\t'votes': {},\n\t\t\t'category': {\n\t\t\t\t'map': 'p-category',\n\t\t\t\t'relAlt': ['tag']\n\t\t\t},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url',\n\t\t\t\t'relAlt': ['self', 'bookmark']\n\t\t\t}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-review'] = {\n\t\troot: 'hreview',\n\t\tname: 'h-review',\n\t\tproperties: {\n\t\t\t'summary': {\n\t\t\t\t'map': 'p-name'\n\t\t\t},\n\t\t\t'description': {\n\t\t\t\t'map': 'e-description'\n\t\t\t},\n\t\t\t'item': {\n\t\t\t\t'map': 'p-item',\n\t\t\t\t'uf': ['h-item', 'h-geo', 'h-adr', 'h-card', 'h-event', 'h-product']\n\t\t\t},\n\t\t\t'reviewer': {\n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'dtreviewer': {\n\t\t\t\t'map': 'dt-reviewer'\n\t\t\t},\n\t\t\t'rating': {},\n\t\t\t'best': {},\n\t\t\t'worst': {},\n\t\t\t'category': {\n\t\t\t\t'map': 'p-category',\n\t\t\t\t'relAlt': ['tag']\n\t\t\t},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url',\n\t\t\t\t'relAlt': ['self', 'bookmark']\n\t\t\t}\n\t\t}\n\t};\n\n\n\tmodules.rels = {\n\t\t// xfn\n\t\t'friend': [ 'yes','external'], \n\t\t'acquaintance': [ 'yes','external'],  \n\t\t'contact': [ 'yes','external'], \n\t\t'met': [ 'yes','external'], \n\t\t'co-worker': [ 'yes','external'],  \n\t\t'colleague': [ 'yes','external'], \n\t\t'co-resident': [ 'yes','external'],  \n\t\t'neighbor': [ 'yes','external'], \n\t\t'child': [ 'yes','external'],  \n\t\t'parent': [ 'yes','external'],  \n\t\t'sibling': [ 'yes','external'],  \n\t\t'spouse': [ 'yes','external'],  \n\t\t'kin': [ 'yes','external'], \n\t\t'muse': [ 'yes','external'],  \n\t\t'crush': [ 'yes','external'],  \n\t\t'date': [ 'yes','external'],  \n\t\t'sweetheart': [ 'yes','external'], \n\t\t'me': [ 'yes','external'], \n\t\n\t\t// other rel=* \n\t\t'license': [ 'yes','yes'],\n\t\t'nofollow': [ 'no','external'],\n\t\t'tag': [ 'no','yes'],\n\t\t'self': [ 'no','external'],\n\t\t'bookmark': [ 'no','external'],\n\t\t'author': [ 'no','external'],\n\t\t'home': [ 'no','external'],\n\t\t'directory': [ 'no','external'],\n\t\t'enclosure': [ 'no','external'],\n\t\t'pronunciation': [ 'no','external'],\n\t\t'payment': [ 'no','external'],\n\t\t'principles': [ 'no','external']\n\t\n\t};\n\n\n\n    var External = {\n        version: modules.version,\n        livingStandard: modules.livingStandard\n    };\n    \n    \n    External.get = function(options){\n    \tvar parser = new modules.Parser();\n        addV1(parser, options);\n    \treturn parser.get( options );\n    };\n    \n    \n    External.getParent = function(node, options){\n    \tvar parser = new modules.Parser();\n        addV1(parser, options);\n    \treturn parser.getParent( node, options );\n    };\n    \n    \n    External.count = function(options){\n    \tvar parser = new modules.Parser();\n        addV1(parser, options);\n    \treturn parser.count( options );\n    };\n    \n    \n    External.isMicroformat = function( node, options ){\n    \tvar parser = new modules.Parser();\n        addV1(parser, options);\n    \treturn parser.isMicroformat( node, options );\n    };\n    \n    \n    External.hasMicroformats = function( node, options ){\n    \tvar parser = new modules.Parser();\n        addV1(parser, options);\n    \treturn parser.hasMicroformats( node, options );\n    };\n    \n    \n    function addV1(parser, options){\n\t\tif(options && options.maps){\n\t\t\tif(Array.isArray(options.maps)){\n\t\t\t\tparser.add(options.maps);\n\t\t\t}else{\n\t\t\t\tparser.add([options.maps]);\n\t\t\t}\n\t\t}\n    }\n    \n    \n    return External;\n    \n    \n}));\n\n// Based on https://gist.github.com/1129031 By Eli Grey, http://eligrey.com - Public domain.\n\n// DO NOT use https://developer.mozilla.org/en-US/docs/Web/API/DOMParser example polyfill\n// as it does not work with earlier versions of Chrome\n\n\n(function(DOMParser) {var DOMParser_proto;\n    var real_parseFromString;\n    var textHTML;         // Flag for text/html support\n    var textXML;          // Flag for text/xml support\n    var htmlElInnerHTML;  // Flag for support for setting html element's innerHTML\n\n    // Stop here if DOMParser not defined\n    if (!DOMParser) {\n        return;\n    }\n\n    // Firefox, Opera and IE throw errors on unsupported types\n    try {\n        // WebKit returns null on unsupported types\n        textHTML = !!(new DOMParser()).parseFromString('', 'text/html');\n\n    } catch (er) {\n      textHTML = false;\n    }\n\n    // If text/html supported, don't need to do anything.\n    if (textHTML) {\n        return;\n    }\n\n    // Next try setting innerHTML of a created document\n    // IE 9 and lower will throw an error (can't set innerHTML of its HTML element)\n    try {\n      var doc = document.implementation.createHTMLDocument('');\n      doc.documentElement.innerHTML = '<title></title><div></div>';\n      htmlElInnerHTML = true;\n\n    } catch (er) {\n      htmlElInnerHTML = false;\n    }\n\n    // If if that failed, try text/xml\n    if (!htmlElInnerHTML) {\n\n        try {\n            textXML = !!(new DOMParser()).parseFromString('', 'text/xml');\n\n        } catch (er) {\n            textHTML = false;\n        }\n    }\n\n    // Mess with DOMParser.prototype (less than optimal...) if one of the above worked\n    // Assume can write to the prototype, if not, make this a stand alone function\n    if (DOMParser.prototype && (htmlElInnerHTML || textXML)) {\n        DOMParser_proto = DOMParser.prototype;\n        real_parseFromString = DOMParser_proto.parseFromString;\n\n        DOMParser_proto.parseFromString = function (markup, type) {\n\n            // Only do this if type is text/html\n            if (/^\\s*text\\/html\\s*(?:;|$)/i.test(type)) {\n                var doc, doc_el, first_el;\n\n                // Use innerHTML if supported\n                if (htmlElInnerHTML) {\n                    doc = document.implementation.createHTMLDocument('');\n                    doc_el = doc.documentElement;\n                    doc_el.innerHTML = markup;\n                    first_el = doc_el.firstElementChild;\n\n                // Otherwise use XML method\n                } else if (textXML) {\n\n                    // Make sure markup is wrapped in HTML tags\n                    // Should probably allow for a DOCTYPE\n                    if (!(/^<html.*html>$/i.test(markup))) {\n                        markup = '<html>' + markup + '<\\/html>';\n                    }\n                    doc = (new DOMParser()).parseFromString(markup, 'text/xml');\n                    doc_el = doc.documentElement;\n                    first_el = doc_el.firstElementChild;\n                }\n\n                // Is this an entire document or a fragment?\n                if (doc_el.childElementCount === 1 && first_el.localName.toLowerCase() === 'html') {\n                    doc.replaceChild(first_el, doc_el);\n                }\n\n                return doc;\n\n            // If not text/html, send as-is to host method\n            } else {\n                return real_parseFromString.apply(this, arguments);\n            }\n        };\n    }\n}(DOMParser));\n\n/***/ })\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// page.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 87a944377db35dea358e","import microformat from 'microformat-shiv';\n\n(function () {\n  const CLASS_NAME = '__omnibear-selected-item';\n  let currentItem, currentItemUrl;\n\n  function clearItem() {\n    if (currentItem) {\n      chrome.runtime.sendMessage({\n        action: 'clear-entry',\n      });\n      removeHighlight();\n    }\n  }\n\n  function removeHighlight() {\n    if (currentItem) {\n      console.log('removing class');\n      currentItem.classList.remove(CLASS_NAME);\n      currentItem = null;\n      currentItemUrl = null;\n    } else {\n      console.log('no currentItem');\n    }\n  }\n\n  document.body.addEventListener('click', function () {\n    clearItem();\n  });\n\n  document.body.addEventListener('contextmenu', function (e) {\n    clearItem();\n    let el = e.target;\n    while(!el.classList.contains('h-entry') && el.tagName != 'BODY') {\n      el = el.parentElement;\n    }\n\n    if (!el.classList.contains('h-entry')) {\n      return;\n    }\n    const mf = microformat.get({node: el});\n    let url;\n    if (mf.items.length && mf.items[0].properties && mf.items[0].properties.url) {\n      url = mf.items[0].properties.url[0];\n    }\n    if (url) {\n      chrome.runtime.sendMessage({\n        action: 'select-entry',\n        payload: {\n          url: url,\n        },\n      });\n      el.classList.add(CLASS_NAME);\n      currentItem = el;\n      currentItemUrl = url;\n    }\n  });\n\n  function handleMessage(request, sender, sendResponse) {\n    switch (request.action) {\n      case 'remove-entry-highlight':\n        removeHighlight();\n        break;\n    }\n  }\n  chrome.runtime.onMessage.addListener(handleMessage);\n\n  if (!document.hidden) {\n    sendFocusMessage();\n  }\n  window.addEventListener('focus', sendFocusMessage);\n\n  function sendFocusMessage() {\n    chrome.runtime.sendMessage({\n      action: 'focus-window',\n      payload: {\n        selectedEntry: currentItemUrl,\n      },\n    });\n  }\n}());\n\n\n\n// WEBPACK FOOTER //\n// ./src/page.js","/*\n   microformat-shiv - v2.0.2\n   Built: 2016-10-26 10:10 - http://microformat-shiv.com\n   Copyright (c) 2016 Glenn Jones\n   Licensed MIT \n*/\n\n\nvar Microformats; // jshint ignore:line\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.Microformats = factory();\n  }\n}(this, function () {\n    \n    var modules = {};\n    \n\n\tmodules.version = '2.0.2';\n\tmodules.livingStandard = '2016-05-25T09:22:18Z';\n\n\t/**\n\t * constructor\n\t *\n\t */\n\tmodules.Parser = function () {\n\t\tthis.rootPrefix = 'h-';\n\t\tthis.propertyPrefixes = ['p-', 'dt-', 'u-', 'e-'];\n\t\tthis.excludeTags = ['br', 'hr'];\n\t};\n\n\n\t// create objects incase the v1 map modules don't load\n\tmodules.maps = (modules.maps)? modules.maps : {};\n\tmodules.rels = (modules.rels)? modules.rels : {};\n\n\n\tmodules.Parser.prototype = {\n\n\t\tinit: function(){\n\t\t\tthis.rootNode = null;\n\t\t\tthis.document = null;\n\t\t\tthis.options = {\n\t\t\t\t'baseUrl': '',\n\t\t\t\t'filters': [],\n\t\t\t\t'textFormat': 'whitespacetrimmed',\n\t\t\t\t'dateFormat': 'auto', // microformat2 for testing\n\t\t\t\t'overlappingVersions': false,\n\t\t\t\t'impliedPropertiesByVersion': true,\n\t\t\t\t'parseLatLonGeo': false,\n\t\t\t\t'lang': false\n\t\t\t};\n\t\t\tthis.rootID = 0;\n\t\t\tthis.errors = [];\n\t\t\tthis.noContentErr = 'No options.node or options.html was provided and no document object could be found.';\n\t\t},\n\n\n\t\t/**\n\t\t * internal parse function\n\t\t *\n\t\t * @param  {Object} options\n\t\t * @return {Object}\n\t\t */\n\t\tget: function(options) {\n\t\t\tvar out = this.formatEmpty(),\n\t\t\t\tdata = [],\n\t\t\t\trels;\n\n\t\t\tthis.init();\n\t\t\toptions = (options)? options : {};\n\t\t\tthis.mergeOptions(options);\n\t\t\tthis.getDOMContext( options );\n\n\t\t\t// if we do not have any context create error\n\t\t\tif(!this.rootNode || !this.document){\n\t\t\t\tthis.errors.push(this.noContentErr);\n\t\t\t}else{\n\n\t\t\t\t// only parse h-* microformats if we need to\n\t\t\t\t// this is added to speed up parsing\n\t\t\t\tif(this.hasMicroformats(this.rootNode, options)){\n\t\t\t\t\tthis.prepareDOM( options );\n\n\t\t\t\t\tif(this.options.filters.length > 0){\n\t\t\t\t\t\t// parse flat list of items\n\t\t\t\t\t\tvar newRootNode = this.findFilterNodes(this.rootNode, this.options.filters);\n\t\t\t\t\t\tdata = this.walkRoot(newRootNode);\n\t\t\t\t\t}else{\n\t\t\t\t\t\t// parse whole document from root\n\t\t\t\t\t\tdata = this.walkRoot(this.rootNode);\n\t\t\t\t\t}\n\n\t\t\t\t\tout.items = data;\n\t\t\t\t\t// don't clear-up DOM if it was cloned\n\t\t\t\t\tif(modules.domUtils.canCloneDocument(this.document) === false){\n\t\t\t\t\t\tthis.clearUpDom(this.rootNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// find any rels\n\t\t\t\tif(this.findRels){\n\t\t\t\t\trels = this.findRels(this.rootNode);\n\t\t\t\t\tout.rels = rels.rels;\n\t\t\t\t\tout['rel-urls'] = rels['rel-urls'];\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif(this.errors.length > 0){\n\t\t\t\treturn this.formatError();\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * parse to get parent microformat of passed node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} options\n\t\t * @return {Object}\n\t\t */\n\t\tgetParent: function(node, options) {\n\t\t\tthis.init();\n\t\t\toptions = (options)? options : {};\n\n\t\t\tif(node){\n\t\t\t\treturn this.getParentTreeWalk(node, options);\n\t\t\t}else{\n\t\t\t\tthis.errors.push(this.noContentErr);\n\t\t\t\treturn this.formatError();\n\t\t\t}\n\t\t},\n\n\n\t    /**\n\t\t * get the count of microformats\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t * @return {Int}\n\t\t */\n\t\tcount: function( options ) {\n\t\t\tvar out = {},\n\t\t\t\titems,\n\t\t\t\tclassItems,\n\t\t\t\tx,\n\t\t\t\ti;\n\n\t\t\tthis.init();\n\t\t\toptions = (options)? options : {};\n\t\t\tthis.getDOMContext( options );\n\n\t\t\t// if we do not have any context create error\n\t\t\tif(!this.rootNode || !this.document){\n\t\t\t\treturn {'errors': [this.noContentErr]};\n\t\t\t}else{\n\n\t\t\t\titems = this.findRootNodes( this.rootNode, true );\n\t\t\t\ti = items.length;\n\t\t\t\twhile(i--) {\n\t\t\t\t\tclassItems = modules.domUtils.getAttributeList(items[i], 'class');\n\t\t\t\t\tx = classItems.length;\n\t\t\t\t\twhile(x--) {\n\t\t\t\t\t\t// find v2 names\n\t\t\t\t\t\tif(modules.utils.startWith( classItems[x], 'h-' )){\n\t\t\t\t\t\t\tthis.appendCount(classItems[x], 1, out);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// find v1 names\n\t\t\t\t\t\tfor(var key in modules.maps) {\n\t\t\t\t\t\t\t// dont double count if v1 and v2 roots are present\n\t\t\t\t\t\t\tif(modules.maps[key].root === classItems[x] && classItems.indexOf(key) === -1) {\n\t\t\t\t\t\t\t\tthis.appendCount(key, 1, out);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar relCount = this.countRels( this.rootNode );\n\t\t\t\tif(relCount > 0){\n\t\t\t\t\tout.rels = relCount;\n\t\t\t\t}\n\n\t\t\t\treturn out;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * does a node have a class that marks it as a microformats root\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Objecte} options\n\t\t * @return {Boolean}\n\t\t */\n\t\tisMicroformat: function( node, options ) {\n\t\t\tvar classes,\n\t\t\t\ti;\n\n\t\t\tif(!node){\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// if documemt gets topmost node\n\t\t\tnode = modules.domUtils.getTopMostNode( node );\n\n\t\t\t// look for h-* microformats\n\t\t\tclasses = this.getUfClassNames(node);\n\t\t\tif(options && options.filters && modules.utils.isArray(options.filters)){\n\t\t\t\ti = options.filters.length;\n\t\t\t\twhile(i--) {\n\t\t\t\t\tif(classes.root.indexOf(options.filters[i]) > -1){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}else{\n\t\t\t\treturn (classes.root.length > 0);\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * does a node or its children have microformats\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Objecte} options\n\t\t * @return {Boolean}\n\t\t */\n\t\thasMicroformats: function( node, options ) {\n\t\t\tvar items,\n\t\t\t\ti;\n\n\t\t\tif(!node){\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// if browser based documemt get topmost node\n\t\t\tnode = modules.domUtils.getTopMostNode( node );\n\n\t\t\t// returns all microformat roots\n\t\t\titems = this.findRootNodes( node, true );\n\t\t\tif(options && options.filters && modules.utils.isArray(options.filters)){\n\t\t\t\ti = items.length;\n\t\t\t\twhile(i--) {\n\t\t\t\t\tif( this.isMicroformat( items[i], options ) ){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}else{\n\t\t\t\treturn (items.length > 0);\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * add a new v1 mapping object to parser\n\t\t *\n\t\t * @param  {Array} maps\n\t\t */\n\t\tadd: function( maps ){\n\t\t\tmaps.forEach(function(map){\n\t\t\t\tif(map && map.root && map.name && map.properties){\n\t\t\t\tmodules.maps[map.name] = JSON.parse(JSON.stringify(map));\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\n\t\t/**\n\t\t * internal parse to get parent microformats by walking up the tree\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} options\n\t\t * @param  {Int} recursive\n\t\t * @return {Object}\n\t\t */\n\t\tgetParentTreeWalk: function (node, options, recursive) {\n\t\t\toptions = (options)? options : {};\n\n\t\t\t// recursive calls\n\t\t    if (recursive === undefined) {\n\t\t        if (node.parentNode && node.nodeName !== 'HTML'){\n\t\t            return this.getParentTreeWalk(node.parentNode, options, true);\n\t\t\t\t}else{\n\t\t            return this.formatEmpty();\n\t\t\t\t}\n\t\t    }\n\t\t    if (node !== null && node !== undefined && node.parentNode) {\n\t\t        if (this.isMicroformat( node, options )) {\n\t\t\t\t\t// if we have a match return microformat\n\t\t\t\t\toptions.node = node;\n\t\t            return this.get( options );\n\t\t        }else{\n\t\t            return this.getParentTreeWalk(node.parentNode, options, true);\n\t\t        }\n\t\t    }else{\n\t\t        return this.formatEmpty();\n\t\t    }\n\t\t},\n\n\n\n\t\t/**\n\t\t * configures what are the base DOM objects for parsing\n\t\t *\n\t\t * @param  {Object} options\n\t\t */\n\t\tgetDOMContext: function( options ){\n\t\t\tvar nodes = modules.domUtils.getDOMContext( options );\n\t\t\tthis.rootNode = nodes.rootNode;\n\t\t\tthis.document = nodes.document;\n\t\t},\n\n\n\t\t/**\n\t\t * prepares DOM before the parse begins\n\t\t *\n\t\t * @param  {Object} options\n\t\t * @return {Boolean}\n\t\t */\n\t\tprepareDOM: function( options ){\n\t\t\tvar baseTag,\n\t\t\t\thref;\n\n            // use current document to define baseUrl, try/catch needed for IE10+ error\n            try {\n                if (!options.baseUrl && this.document && this.document.location) {\n                    this.options.baseUrl = this.document.location.href;\n                }\n            } catch (e) {\n                // there is no alt action\n            }\n\n\n\t\t\t// find base tag to set baseUrl\n\t\t\tbaseTag = modules.domUtils.querySelector(this.document,'base');\n\t\t\tif(baseTag) {\n\t\t\t\thref = modules.domUtils.getAttribute(baseTag, 'href');\n\t\t\t\tif(href){\n\t\t\t\t\tthis.options.baseUrl = href;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// get path to rootNode\n\t\t\t// then clone document\n\t\t\t// then reset the rootNode to its cloned version in a new document\n\t\t\tvar path,\n\t\t\t\tnewDocument,\n\t\t\t\tnewRootNode;\n\n\t\t\tpath = modules.domUtils.getNodePath(this.rootNode);\n\t\t\tnewDocument = modules.domUtils.cloneDocument(this.document);\n\t\t\tnewRootNode = modules.domUtils.getNodeByPath(newDocument, path);\n\n\t\t\t// check results as early IE fails\n\t\t\tif(newDocument && newRootNode){\n\t\t\t\tthis.document = newDocument;\n\t\t\t\tthis.rootNode = newRootNode;\n\t\t\t}\n\n\t\t\t// add includes\n\t\t\tif(this.addIncludes){\n\t\t\t\tthis.addIncludes( this.document );\n\t\t\t}\n\n\t\t\treturn (this.rootNode && this.document);\n\t\t},\n\n\n\t\t/**\n\t\t * returns an empty structure with errors\n\t\t *\n\t\t *   @return {Object}\n\t\t */\n\t\tformatError: function(){\n\t\t\tvar out = this.formatEmpty();\n\t\t\tout.errors = this.errors;\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * returns an empty structure\n\t\t *\n\t\t *   @return {Object}\n\t\t */\n\t\tformatEmpty: function(){\n\t\t\treturn {\n\t\t\t    'items': [],\n\t\t\t    'rels': {},\n\t\t\t    'rel-urls': {}\n\t\t\t};\n\t\t},\n\n\n\t\t// find microformats of a given type and return node structures\n\t\tfindFilterNodes: function(rootNode, filters) {\n            if(modules.utils.isString(filters)){\n                filters = [filters];\n            }\n\t\t\tvar newRootNode = modules.domUtils.createNode('div'),\n\t\t\t\titems = this.findRootNodes(rootNode, true),\n\t\t\t\ti = 0,\n\t\t\t\tx = 0,\n\t\t\t\ty = 0;\n\n            // add v1 names\n            y = filters.length;\n            while (y--) {\n                if(this.getMapping(filters[y])){\n                    var v1Name = this.getMapping(filters[y]).root;\n                    filters.push(v1Name);\n                }\n            }\n\n\t\t\tif(items){\n\t\t\t\ti = items.length;\n\t\t\t\twhile(x < i) {\n\t\t\t\t\t// append matching nodes into newRootNode\n\t\t\t\t\ty = filters.length;\n\t\t\t\t\twhile (y--) {\n\t\t\t\t\t\tif(modules.domUtils.hasAttributeValue(items[x], 'class', filters[y])){\n\t\t\t\t\t\t\tvar clone = modules.domUtils.clone(items[x]);\n\t\t\t\t\t\t\tmodules.domUtils.appendChild(newRootNode, clone);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn newRootNode;\n\t\t},\n\n\n\t\t/**\n\t\t * appends data to output object for count\n\t\t *\n\t\t * @param  {string} name\n\t\t * @param  {Int} count\n\t\t * @param  {Object}\n\t\t */\n\t\tappendCount: function(name, count, out){\n\t\t\tif(out[name]){\n\t\t\t\tout[name] = out[name] + count;\n\t\t\t}else{\n\t\t\t\tout[name] = count;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * is the microformats type in the filter list\n\t\t *\n\t\t * @param  {Object} uf\n\t\t * @param  {Array} filters\n\t\t * @return {Boolean}\n\t\t */\n\t\tshouldInclude: function(uf, filters) {\n\t\t\tvar i;\n\n\t\t\tif(modules.utils.isArray(filters) && filters.length > 0) {\n\t\t\t\ti = filters.length;\n\t\t\t\twhile(i--) {\n\t\t\t\t\tif(uf.type[0] === filters[i]) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * finds all microformat roots in a rootNode\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t * @param  {Boolean} includeRoot\n\t\t * @return {Array}\n\t\t */\n\t\tfindRootNodes: function(rootNode, includeRoot) {\n\t\t\tvar arr = null,\n\t\t\t\tout = [],\n\t\t\t\tclassList = [],\n\t\t\t\titems,\n\t\t\t\tx,\n\t\t\t\ti,\n\t\t\t\ty,\n\t\t\t\tkey;\n\n\n\t\t\t// build an array of v1 root names\n\t\t\tfor(key in modules.maps) {\n\t\t\t\tif (modules.maps.hasOwnProperty(key)) {\n\t\t\t\t\tclassList.push(modules.maps[key].root);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// get all elements that have a class attribute\n\t\t\tincludeRoot = (includeRoot) ? includeRoot : false;\n\t\t\tif(includeRoot && rootNode.parentNode) {\n\t\t\t\tarr = modules.domUtils.getNodesByAttribute(rootNode.parentNode, 'class');\n\t\t\t} else {\n\t\t\t\tarr = modules.domUtils.getNodesByAttribute(rootNode, 'class');\n\t\t\t}\n\n\t\t\t// loop elements that have a class attribute\n\t\t\tx = 0;\n\t\t\ti = arr.length;\n\t\t\twhile(x < i) {\n\n\t\t\t\titems = modules.domUtils.getAttributeList(arr[x], 'class');\n\n\t\t\t\t// loop classes on an element\n\t\t\t\ty = items.length;\n\t\t\t\twhile(y--) {\n\t\t\t\t\t// match v1 root names\n\t\t\t\t\tif(classList.indexOf(items[y]) > -1) {\n\t\t\t\t\t\tout.push(arr[x]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// match v2 root name prefix\n\t\t\t\t\tif(modules.utils.startWith(items[y], 'h-')) {\n\t\t\t\t\t\tout.push(arr[x]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tx++;\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * starts the tree walk to find microformats\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {Array}\n\t\t */\n\t\twalkRoot: function(node){\n\t\t\tvar context = this,\n\t\t\t\tchildren = [],\n\t\t\t\tchild,\n\t\t\t\tclasses,\n\t\t\t\titems = [],\n\t\t\t\tout = [];\n\n\t\t\tclasses = this.getUfClassNames(node);\n\t\t\t// if it is a root microformat node\n\t\t\tif(classes && classes.root.length > 0){\n\t\t\t\titems = this.walkTree(node);\n\n\t\t\t\tif(items.length > 0){\n\t\t\t\t\tout = out.concat(items);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t// check if there are children and one of the children has a root microformat\n\t\t\t\tchildren = modules.domUtils.getChildren( node );\n\t\t\t\tif(children && children.length > 0 && this.findRootNodes(node, true).length > -1){\n\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\t\tchild = children[i];\n\t\t\t\t\t\titems = context.walkRoot(child);\n\t\t\t\t\t\tif(items.length > 0){\n\t\t\t\t\t\t\tout = out.concat(items);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * starts the tree walking for a single microformat\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {Array}\n\t\t */\n\t\twalkTree: function(node) {\n\t\t\tvar classes,\n\t\t\t\tout = [],\n\t\t\t\tobj,\n\t\t\t\titemRootID;\n\n\t\t\t// loop roots found on one element\n\t\t\tclasses = this.getUfClassNames(node);\n\t\t\tif(classes && classes.root.length && classes.root.length > 0){\n\n\t\t\t\tthis.rootID++;\n\t\t\t\titemRootID = this.rootID;\n\t\t\t\tobj = this.createUfObject(classes.root, classes.typeVersion);\n\n\t\t\t\tthis.walkChildren(node, obj, classes.root, itemRootID, classes);\n\t\t\t\tif(this.impliedRules){\n\t\t\t\t\tthis.impliedRules(node, obj, classes);\n\t\t\t\t}\n\n\t\t\t\tif(this.options.lang === true){\n\t\t\t\t\tvar lang = modules.domUtils.getFirstAncestorAttribute(node, 'lang');\n\t\t\t\t\tif(lang){\n\t\t\t\t\t\tobj.lang = lang;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tout.push( this.cleanUfObject(obj) );\n\n\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * finds child properties of microformat\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} out\n\t\t * @param  {String} ufName\n\t\t * @param  {Int} rootID\n\t\t * @param  {Object} parentClasses\n\t\t */\n\t\twalkChildren: function(node, out, ufName, rootID, parentClasses) {\n\t\t\tvar context = this,\n\t\t\t\tchildren = [],\n\t\t\t\trootItem,\n\t\t\t\titemRootID,\n\t\t\t\tvalue,\n\t\t\t\tpropertyName,\n\t\t\t\tpropertyVersion,\n\t\t\t\ti,\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t\tz,\n\t\t\t\tchild;\n\n\t\t\tchildren = modules.domUtils.getChildren( node );\n\n\t\t\ty = 0;\n\t\t\tz = children.length;\n\t\t\twhile(y < z) {\n\t\t\t\tchild = children[y];\n\n\t\t\t\t// get microformat classes for this single element\n\t\t\t\tvar classes = context.getUfClassNames(child, ufName);\n\n\t\t\t\t// a property which is a microformat\n\t\t\t\tif(classes.root.length > 0 && classes.properties.length > 0 && !child.addedAsRoot) {\n\t\t\t\t\t// create object with type, property and value\n\t\t\t\t\trootItem = context.createUfObject(\n\t\t\t\t\t\tclasses.root,\n\t\t\t\t\t\tclasses.typeVersion,\n\t\t\t\t\t\tmodules.text.parse(this.document, child, context.options.textFormat)\n\t\t\t\t\t);\n\n\t\t\t\t\t// add the microformat as an array of properties\n\t\t\t\t\tpropertyName = context.removePropPrefix(classes.properties[0][0]);\n\n\t\t\t\t\t// modifies value with \"implied value rule\"\n\t\t\t\t\tif(parentClasses && parentClasses.root.length === 1 && parentClasses.properties.length === 1){\n\t\t\t\t\t\tif(context.impliedValueRule){\n\t\t\t\t\t\t\tout = context.impliedValueRule(out, parentClasses.properties[0][0], classes.properties[0][0], value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(out.properties[propertyName]) {\n\t\t\t\t\t\tout.properties[propertyName].push(rootItem);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tout.properties[propertyName] = [rootItem];\n\t\t\t\t\t}\n\n\t\t\t\t\tcontext.rootID++;\n\t\t\t\t\t// used to stop duplication in heavily nested structures\n\t\t\t\t\tchild.addedAsRoot = true;\n\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ti = rootItem.type.length;\n\t\t\t\t\titemRootID = context.rootID;\n\t\t\t\t\twhile(x < i) {\n\t\t\t\t\t\tcontext.walkChildren(child, rootItem, rootItem.type, itemRootID, classes);\n\t\t\t\t\t\tx++;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.impliedRules){\n\t\t\t\t\t\tcontext.impliedRules(child, rootItem, classes);\n\t\t\t\t\t}\n\t\t\t\t\tthis.cleanUfObject(rootItem);\n\n\t\t\t\t}\n\n\t\t\t\t// a property which is NOT a microformat and has not been used for a given root element\n\t\t\t\tif(classes.root.length === 0 && classes.properties.length > 0) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ti = classes.properties.length;\n\t\t\t\t\twhile(x < i) {\n\n\t\t\t\t\t\tvalue = context.getValue(child, classes.properties[x][0], out);\n\t\t\t\t\t\tpropertyName = context.removePropPrefix(classes.properties[x][0]);\n\t\t\t\t\t\tpropertyVersion = classes.properties[x][1];\n\n\t\t\t\t\t\t// modifies value with \"implied value rule\"\n\t\t\t\t\t\tif(parentClasses && parentClasses.root.length === 1 && parentClasses.properties.length === 1){\n\t\t\t\t\t\t\tif(context.impliedValueRule){\n\t\t\t\t\t\t\t\tout = context.impliedValueRule(out, parentClasses.properties[0][0], classes.properties[x][0], value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if we have not added this value into a property with the same name already\n\t\t\t\t\t\tif(!context.hasRootID(child, rootID, propertyName)) {\n\t\t\t\t\t\t\t// check the root and property is the same version or if overlapping versions are allowed\n\t\t\t\t\t\t\tif( context.isAllowedPropertyVersion( out.typeVersion, propertyVersion ) ){\n\t\t\t\t\t\t\t\t// add the property as an array of properties\n\t\t\t\t\t\t\t\tif(out.properties[propertyName]) {\n\t\t\t\t\t\t\t\t\tout.properties[propertyName].push(value);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tout.properties[propertyName] = [value];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// add rootid to node so we can track its use\n\t\t\t\t\t\t\t\tcontext.appendRootID(child, rootID, propertyName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tx++;\n\t\t\t\t\t}\n\n\t\t\t\t\tcontext.walkChildren(child, out, ufName, rootID, classes);\n\t\t\t\t}\n\n\t\t\t\t// if the node has no microformat classes, see if its children have\n\t\t\t\tif(classes.root.length === 0 && classes.properties.length === 0) {\n\t\t\t\t\tcontext.walkChildren(child, out, ufName, rootID, classes);\n\t\t\t\t}\n\n\t\t\t\t// if the node is a child root add it to the children tree\n\t\t\t\tif(classes.root.length > 0 && classes.properties.length === 0) {\n\n\t\t\t\t\t// create object with type, property and value\n\t\t\t\t\trootItem = context.createUfObject(\n\t\t\t\t\t\tclasses.root,\n\t\t\t\t\t\tclasses.typeVersion,\n\t\t\t\t\t\tmodules.text.parse(this.document, child, context.options.textFormat)\n\t\t\t\t\t);\n\n\t\t\t\t\t// add the microformat as an array of properties\n\t\t\t\t\tif(!out.children){\n\t\t\t\t\t\tout.children =  [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!context.hasRootID(child, rootID, 'child-root')) {\n\t\t\t\t\t\tout.children.push( rootItem );\n\t\t\t\t\t\tcontext.appendRootID(child, rootID, 'child-root');\n\t\t\t\t\t\tcontext.rootID++;\n\t\t\t\t\t}\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ti = rootItem.type.length;\n\t\t\t\t\titemRootID = context.rootID;\n\t\t\t\t\twhile(x < i) {\n\t\t\t\t\t\tcontext.walkChildren(child, rootItem, rootItem.type, itemRootID, classes);\n\t\t\t\t\t\tx++;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.impliedRules){\n\t\t\t\t\t\tcontext.impliedRules(child, rootItem, classes);\n\t\t\t\t\t}\n\t\t\t\t\tcontext.cleanUfObject( rootItem );\n\n\t\t\t\t}\n\n\n\n\t\t\t\ty++;\n\t\t\t}\n\n\t\t},\n\n\n\n\n\t\t/**\n\t\t * gets the value of a property from a node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} className\n\t\t * @param  {Object} uf\n\t\t * @return {String || Object}\n\t\t */\n\t\tgetValue: function(node, className, uf) {\n\t\t\tvar value = '';\n\n\t\t\tif(modules.utils.startWith(className, 'p-')) {\n\t\t\t\tvalue = this.getPValue(node, true);\n\t\t\t}\n\n\t\t\tif(modules.utils.startWith(className, 'e-')) {\n\t\t\t\tvalue = this.getEValue(node);\n\t\t\t}\n\n\t\t\tif(modules.utils.startWith(className, 'u-')) {\n\t\t\t\tvalue = this.getUValue(node, true);\n\t\t\t}\n\n\t\t\tif(modules.utils.startWith(className, 'dt-')) {\n\t\t\t\tvalue = this.getDTValue(node, className, uf, true);\n\t\t\t}\n\t\t\treturn value;\n\t\t},\n\n\n\t\t/**\n\t\t * gets the value of a node which contains a 'p-' property\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Boolean} valueParse\n\t\t * @return {String}\n\t\t */\n\t\tgetPValue: function(node, valueParse) {\n\t\t\tvar out = '';\n\t\t\tif(valueParse) {\n\t\t\t\tout = this.getValueClass(node, 'p');\n\t\t\t}\n\n\t\t\tif(!out && valueParse) {\n\t\t\t\tout = this.getValueTitle(node);\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['abbr'], 'title');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['data','input'], 'value');\n\t\t\t}\n\n\t\t\tif(node.name === 'br' || node.name === 'hr') {\n\t\t\t\tout = '';\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['img', 'area'], 'alt');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.text.parse(this.document, node, this.options.textFormat);\n\t\t\t}\n\n\t\t\treturn(out) ? out : '';\n\t\t},\n\n\n\t\t/**\n\t\t * gets the value of a node which contains the 'e-' property\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {Object}\n\t\t */\n\t\tgetEValue: function(node) {\n\n\t\t\tvar out = {value: '', html: ''};\n\n\t\t\tthis.expandURLs(node, 'src', this.options.baseUrl);\n\t\t\tthis.expandURLs(node, 'href', this.options.baseUrl);\n\n\t\t\tout.value = modules.text.parse(this.document, node, this.options.textFormat);\n\t\t\tout.html = modules.html.parse(node);\n\n\t\t\tif(this.options.lang === true){\n\t\t\t\tvar lang = modules.domUtils.getFirstAncestorAttribute(node, 'lang');\n\t\t\t\tif(lang){\n\t\t\t\t\tout.lang = lang;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * gets the value of a node which contains the 'u-' property\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Boolean} valueParse\n\t\t * @return {String}\n\t\t */\n\t\tgetUValue: function(node, valueParse) {\n\t\t\tvar out = '';\n\t\t\tif(valueParse) {\n\t\t\t\tout = this.getValueClass(node, 'u');\n\t\t\t}\n\n\t\t\tif(!out && valueParse) {\n\t\t\t\tout = this.getValueTitle(node);\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['a', 'area'], 'href');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['img','audio','video','source'], 'src');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['video'], 'poster');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['object'], 'data');\n\t\t\t}\n\n\t\t\t// if we have no protocol separator, turn relative url to absolute url\n\t\t\tif(out && out !== '' && out.indexOf('://') === -1) {\n\t\t\t\tout = modules.url.resolve(out, this.options.baseUrl);\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['abbr'], 'title');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['data','input'], 'value');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.text.parse(this.document, node, this.options.textFormat);\n\t\t\t}\n\n\t\t\treturn(out) ? out : '';\n\t\t},\n\n\n\t\t/**\n\t\t * gets the value of a node which contains the 'dt-' property\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} className\n\t\t * @param  {Object} uf\n\t\t * @param  {Boolean} valueParse\n\t\t * @return {String}\n\t\t */\n\t\tgetDTValue: function(node, className, uf, valueParse) {\n\t\t\tvar out = '',\n\t\t\t\tfromValue = false;\n\n\t\t\tif(valueParse) {\n\t\t\t\tout = this.getValueClass(node, 'dt');\n\t\t\t\tif(out){\n\t\t\t\t\tfromValue = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!out && valueParse) {\n\t\t\t\tout = this.getValueTitle(node);\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['time', 'ins', 'del'], 'datetime');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['abbr'], 'title');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.domUtils.getAttrValFromTagList(node, ['data', 'input'], 'value');\n\t\t\t}\n\n\t\t\tif(!out) {\n\t\t\t\tout = modules.text.parse(this.document, node, this.options.textFormat);\n\t\t\t}\n\n\t\t\tif(out) {\n\t\t\t\tvar format = (fromValue)? 'microformat2' : this.options.dateFormat;\n\t\t\t\tif(modules.dates.isDuration(out)) {\n\t\t\t\t\t// just duration\n\t\t\t\t\treturn out;\n\t\t\t\t} else if(modules.dates.isTime(out)) {\n\t\t\t\t\t// just time or time+timezone\n\t\t\t\t\tif(uf) {\n\t\t\t\t\t\tuf.times.push([className, modules.dates.parseAmPmTime(out, format)]);\n\t\t\t\t\t}\n\t\t\t\t\treturn modules.dates.parseAmPmTime(out, format);\n\t\t\t\t} else {\n\t\t\t\t\t// returns a date - microformat profile\n\t\t\t\t\tif(uf) {\n\t\t\t\t\t\tuf.dates.push([className, new modules.ISODate(out).toString( format )]);\n\t\t\t\t\t}\n\t\t\t\t\treturn new modules.ISODate(out).toString( format );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * appends a new rootid to a given node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} id\n\t\t * @param  {String} propertyName\n\t\t */\n\t\tappendRootID: function(node, id, propertyName) {\n\t\t\tif(this.hasRootID(node, id, propertyName) === false){\n\t\t\t\tvar rootids = [];\n\t\t\t\tif(modules.domUtils.hasAttribute(node,'rootids')){\n\t\t\t\t\trootids = modules.domUtils.getAttributeList(node,'rootids');\n\t\t\t\t}\n\t\t\t\trootids.push('id' + id + '-' + propertyName);\n\t\t\t\tmodules.domUtils.setAttribute(node, 'rootids', rootids.join(' '));\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * does a given node already have a rootid\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} id\n\t\t * @param  {String} propertyName\n\t\t * @return {Boolean}\n\t\t */\n\t\thasRootID: function(node, id, propertyName) {\n\t\t\tvar rootids = [];\n\t\t\tif(!modules.domUtils.hasAttribute(node,'rootids')){\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\trootids = modules.domUtils.getAttributeList(node, 'rootids');\n\t\t\t\treturn (rootids.indexOf('id' + id + '-' + propertyName) > -1);\n\t\t\t}\n\t\t},\n\n\n\n\t\t/**\n\t\t * gets the text of any child nodes with a class value\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} propertyName\n\t\t * @return {String || null}\n\t\t */\n\t\tgetValueClass: function(node, propertyType) {\n\t\t\tvar context = this,\n\t\t\t\tchildren = [],\n\t\t\t\tout = [],\n\t\t\t\tchild,\n\t\t\t\tx,\n\t\t\t\ti;\n\n\t\t\tchildren = modules.domUtils.getChildren( node );\n\n\t\t\tx = 0;\n\t\t\ti = children.length;\n\t\t\twhile(x < i) {\n\t\t\t\tchild = children[x];\n\t\t\t\tvar value = null;\n\t\t\t\tif(modules.domUtils.hasAttributeValue(child, 'class', 'value')) {\n\t\t\t\t\tswitch(propertyType) {\n\t\t\t\t\tcase 'p':\n\t\t\t\t\t\tvalue = context.getPValue(child, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'u':\n\t\t\t\t\t\tvalue = context.getUValue(child, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'dt':\n\t\t\t\t\t\tvalue = context.getDTValue(child, '', null, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(value) {\n\t\t\t\t\t\tout.push(modules.utils.trim(value));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tx++;\n\t\t\t}\n\t\t\tif(out.length > 0) {\n\t\t\t\tif(propertyType === 'p') {\n\t\t\t\t\treturn modules.text.parseText( this.document, out.join(''), this.options.textFormat);\n\t\t\t\t}\n\t\t\t\tif(propertyType === 'u') {\n\t\t\t\t\treturn out.join('');\n\t\t\t\t}\n\t\t\t\tif(propertyType === 'dt') {\n\t\t\t\t\tvar format = 'microformat2';\n\t\t\t\t\treturn modules.dates.concatFragments(out,format).toString(format);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * returns a single string of the 'title' attr from all\n\t\t * the child nodes with the class 'value-title'\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\tgetValueTitle: function(node) {\n\t\t\tvar out = [],\n\t\t\t\titems,\n\t\t\t\ti,\n\t\t\t\tx;\n\n\t\t\titems = modules.domUtils.getNodesByAttributeValue(node, 'class', 'value-title');\n\t\t\tx = 0;\n\t\t\ti = items.length;\n\t\t\twhile(x < i) {\n\t\t\t\tif(modules.domUtils.hasAttribute(items[x], 'title')) {\n\t\t\t\t\tout.push(modules.domUtils.getAttribute(items[x], 'title'));\n\t\t\t\t}\n\t\t\t\tx++;\n\t\t\t}\n\t\t\treturn out.join('');\n\t\t},\n\n\n\t   /**\n\t\t * finds out whether a node has h-* class v1 and v2\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {Boolean}\n\t\t */\n\t\thasHClass: function(node){\n\t\t\tvar classes = this.getUfClassNames(node);\n\t\t\tif(classes.root && classes.root.length > 0){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * get both the root and property class names from a node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Array} ufNameArr\n\t\t * @return {Object}\n\t\t */\n\t\tgetUfClassNames: function(node, ufNameArr) {\n\t\t\tvar context = this,\n\t\t\t\tout = {\n\t\t\t\t\t'root': [],\n\t\t\t\t\t'properties': []\n\t\t\t\t},\n\t\t\t\tclassNames,\n\t\t\t\tkey,\n\t\t\t\titems,\n\t\t\t\titem,\n\t\t\t\ti,\n\t\t\t\tx,\n\t\t\t\tz,\n\t\t\t\ty,\n\t\t\t\tmap,\n\t\t\t\tprop,\n\t\t\t\tpropName,\n\t\t\t\tv2Name,\n\t\t\t\timpiedRel,\n\t\t\t\tufName;\n\n\t\t\t// don't get classes from excluded list of tags\n\t\t\tif(modules.domUtils.hasTagName(node, this.excludeTags) === false){\n\n\t\t\t\t// find classes for node\n\t\t\t\tclassNames = modules.domUtils.getAttribute(node, 'class');\n\t\t\t\tif(classNames) {\n\t\t\t\t\titems = classNames.split(' ');\n\t\t\t\t\tx = 0;\n\t\t\t\t\ti = items.length;\n\t\t\t\t\twhile(x < i) {\n\n\t\t\t\t\t\titem = modules.utils.trim(items[x]);\n\n\t\t\t\t\t\t// test for root prefix - v2\n\t\t\t\t\t\tif(modules.utils.startWith(item, context.rootPrefix) && modules.utils.isLowerCase(item)) {\n\t\t\t\t\t\t\tif(out.root.indexOf(item) === -1){\n\t\t\t\t\t\t\t\tout.root.push(item);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.typeVersion = 'v2';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// test for property prefix - v2\n\t\t\t\t\t\tz = context.propertyPrefixes.length;\n\t\t\t\t\t\twhile(z--) {\n\t\t\t\t\t\t\tif(modules.utils.startWith(item, context.propertyPrefixes[z]) && modules.utils.isLowerCase(item)) {\n\t\t\t\t\t\t\t\tout.properties.push([item,'v2']);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// test for mapped root classnames v1\n\t\t\t\t\t\tfor(key in modules.maps) {\n\t\t\t\t\t\t\tif(modules.maps.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\t// only add a root once\n\t\t\t\t\t\t\t\tif(modules.maps[key].root === item && out.root.indexOf(key) === -1) {\n\t\t\t\t\t\t\t\t\t// if root map has subTree set to true\n\t\t\t\t\t\t\t\t\t// test to see if we should create a property or root\n\t\t\t\t\t\t\t\t\tif(modules.maps[key].subTree) {\n\t\t\t\t\t\t\t\t\t\tout.properties.push(['p-' + modules.maps[key].root, 'v1']);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tout.root.push(key);\n\t\t\t\t\t\t\t\t\t\tif(!out.typeVersion){\n\t\t\t\t\t\t\t\t\t\t\tout.typeVersion = 'v1';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t// test for mapped property classnames v1\n\t\t\t\t\t\tif(ufNameArr){\n\t\t\t\t\t\t\tfor (var a = 0; a < ufNameArr.length; a++) {\n\t\t\t\t\t\t\t\tufName = ufNameArr[a];\n\t\t\t\t\t\t\t\t// get mapped property v1 microformat\n\t\t\t\t\t\t\t\tmap = context.getMapping(ufName);\n\t\t\t\t\t\t\t\tif(map) {\n\t\t\t\t\t\t\t\t\tfor(key in map.properties) {\n\t\t\t\t\t\t\t\t\t\tif (map.properties.hasOwnProperty(key)) {\n\n\t\t\t\t\t\t\t\t\t\t\tprop = map.properties[key];\n\t\t\t\t\t\t\t\t\t\t\tpropName = (prop.map) ? prop.map : 'p-' + key;\n\n\t\t\t\t\t\t\t\t\t\t\tif(key === item) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(prop.uf) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// loop all the classList make sure\n\t\t\t\t\t\t\t\t\t\t\t\t\t//   1. this property is a root\n\t\t\t\t\t\t\t\t\t\t\t\t\t//   2. that there is not already an equivalent v2 property i.e. url and u-url on the same element\n\t\t\t\t\t\t\t\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\twhile(y < i) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tv2Name = context.getV2RootName(items[y]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// add new root\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(prop.uf.indexOf(v2Name) > -1 && out.root.indexOf(v2Name) === -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout.root.push(v2Name);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout.typeVersion = 'v1';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ty++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t//only add property once\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(out.properties.indexOf(propName) === -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tout.properties.push([propName,'v1']);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(out.properties.indexOf(propName) === -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tout.properties.push([propName,'v1']);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tx++;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// finds any alt rel=* mappings for a given node/microformat\n\t\t\tif(ufNameArr && this.findRelImpied){\n\t\t\t\tfor (var b = 0; b < ufNameArr.length; b++) {\n\t\t\t\t\tufName = ufNameArr[b];\n\t\t\t\t\timpiedRel = this.findRelImpied(node, ufName);\n\t\t\t\t\tif(impiedRel && out.properties.indexOf(impiedRel) === -1) {\n\t\t\t\t\t\tout.properties.push([impiedRel, 'v1']);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t//if(out.root.length === 1 && out.properties.length === 1) {\n\t\t\t//\tif(out.root[0].replace('h-','') === this.removePropPrefix(out.properties[0][0])) {\n\t\t\t//\t\tout.typeVersion = 'v2';\n\t\t\t//\t}\n\t\t\t//}\n\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * given a v1 or v2 root name, return mapping object\n\t\t *\n\t\t * @param  {String} name\n\t\t * @return {Object || null}\n\t\t */\n\t\tgetMapping: function(name) {\n\t\t\tvar key;\n\t\t\tfor(key in modules.maps) {\n\t\t\t\tif(modules.maps[key].root === name || key === name) {\n\t\t\t\t\treturn modules.maps[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\n\n\t\t/**\n\t\t * given a v1 root name returns a v2 root name i.e. vcard >>> h-card\n\t\t *\n\t\t * @param  {String} name\n\t\t * @return {String || null}\n\t\t */\n\t\tgetV2RootName: function(name) {\n\t\t\tvar key;\n\t\t\tfor(key in modules.maps) {\n\t\t\t\tif(modules.maps[key].root === name) {\n\t\t\t\t\treturn key;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\n\n\t\t/**\n\t\t * whether a property is the right microformats version for its root type\n\t\t *\n\t\t * @param  {String} typeVersion\n\t\t * @param  {String} propertyVersion\n\t\t * @return {Boolean}\n\t\t */\n\t\tisAllowedPropertyVersion: function(typeVersion, propertyVersion){\n\t\t\tif(this.options.overlappingVersions === true){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn (typeVersion === propertyVersion);\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * creates a blank microformats object\n\t\t *\n\t\t * @param  {String} name\n\t\t * @param  {String} value\n\t\t * @return {Object}\n\t\t */\n\t\tcreateUfObject: function(names, typeVersion, value) {\n\t\t\tvar out = {};\n\n\t\t\t// is more than just whitespace\n\t\t\tif(value && modules.utils.isOnlyWhiteSpace(value) === false) {\n\t\t\t\tout.value = value;\n\t\t\t}\n\t\t\t// add type i.e. [\"h-card\", \"h-org\"]\n\t\t\tif(modules.utils.isArray(names)) {\n\t\t\t\tout.type = names;\n\t\t\t} else {\n\t\t\t\tout.type = [names];\n\t\t\t}\n\t\t\tout.properties = {};\n\t\t\t// metadata properties for parsing\n\t\t\tout.typeVersion = typeVersion;\n\t\t\tout.times = [];\n\t\t\tout.dates = [];\n\t\t\tout.altValue = null;\n\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * removes unwanted microformats property before output\n\t\t *\n\t\t * @param  {Object} microformat\n\t\t */\n\t\tcleanUfObject: function( microformat ) {\n\t\t\tdelete microformat.times;\n\t\t\tdelete microformat.dates;\n\t\t\tdelete microformat.typeVersion;\n\t\t\tdelete microformat.altValue;\n\t\t\treturn microformat;\n\t\t},\n\n\n\n\t\t/**\n\t\t * removes microformat property prefixes from text\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {String}\n\t\t */\n\t\tremovePropPrefix: function(text) {\n\t\t\tvar i;\n\n\t\t\ti = this.propertyPrefixes.length;\n\t\t\twhile(i--) {\n\t\t\t\tvar prefix = this.propertyPrefixes[i];\n\t\t\t\tif(modules.utils.startWith(text, prefix) && modules.utils.isLowerCase(text)) {\n\t\t\t\t\ttext = text.substr(prefix.length);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn text;\n\t\t},\n\n\n\t\t/**\n\t\t * expands all relative URLs to absolute ones where it can\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attrName\n\t\t * @param  {String} baseUrl\n\t\t */\n\t\texpandURLs: function(node, attrName, baseUrl){\n\t\t\tvar i,\n\t\t\t\tnodes,\n\t\t\t\tattr;\n\n\t\t\tnodes = modules.domUtils.getNodesByAttribute(node, attrName);\n\t\t\ti = nodes.length;\n\t\t\twhile (i--) {\n\t\t\t\ttry{\n\t\t\t\t\t// the url parser can blow up if the format is not right\n\t\t\t\t\tattr = modules.domUtils.getAttribute(nodes[i], attrName);\n\t\t\t\t\tif(attr && attr !== '' && baseUrl !== '' && attr.indexOf('://') === -1) {\n\t\t\t\t\t\t//attr = urlParser.resolve(baseUrl, attr);\n\t\t\t\t\t\tattr = modules.url.resolve(attr, baseUrl);\n\t\t\t\t\t\tmodules.domUtils.setAttribute(nodes[i], attrName, attr);\n\t\t\t\t\t}\n\t\t\t\t}catch(err){\n\t\t\t\t\t// do nothing - convert only the urls we can, leave the rest as they are\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\n\t\t/**\n\t\t * merges passed and default options -single level clone of properties\n\t\t *\n\t\t * @param  {Object} options\n\t\t */\n\t\tmergeOptions: function(options) {\n\t\t\tvar key;\n\t\t\tfor(key in options) {\n\t\t\t\tif(options.hasOwnProperty(key)) {\n\t\t\t\t\tthis.options[key] = options[key];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * removes all rootid attributes\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t */\n\t\tremoveRootIds: function(rootNode){\n\t\t\tvar arr,\n\t\t\t\ti;\n\n\t\t\tarr = modules.domUtils.getNodesByAttribute(rootNode, 'rootids');\n\t\t\ti = arr.length;\n\t\t\twhile(i--) {\n\t\t\t\tmodules.domUtils.removeAttribute(arr[i],'rootids');\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * removes all changes made to the DOM\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t */\n\t\tclearUpDom: function(rootNode){\n\t\t\tif(this.removeIncludes){\n\t\t\t\tthis.removeIncludes(rootNode);\n\t\t\t}\n\t\t\tthis.removeRootIds(rootNode);\n\t\t}\n\n\n\t};\n\n\n\tmodules.Parser.prototype.constructor = modules.Parser;\n\n\n\t// check parser module is loaded\n\tif(modules.Parser){\n\n\t\t/**\n\t\t * applies \"implied rules\" microformat output structure i.e. feed-title, name, photo, url and date\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} uf (microformat output structure)\n\t\t * @param  {Object} parentClasses (classes structure)\n\t\t * @param  {Boolean} impliedPropertiesByVersion\n\t\t * @return {Object}\n\t\t */\n\t\t modules.Parser.prototype.impliedRules = function(node, uf, parentClasses) {\n\t\t\tvar typeVersion = (uf.typeVersion)? uf.typeVersion: 'v2';\n\n\t\t\t// TEMP: override to allow v1 implied properties while spec changes\n\t\t\tif(this.options.impliedPropertiesByVersion === false){\n\t\t\t\ttypeVersion = 'v2';\n\t\t\t}\n\n\t\t\tif(node && uf && uf.properties) {\n\t\t\t\tuf = this.impliedBackwardComp( node, uf, parentClasses );\n\t\t\t\tif(typeVersion === 'v2'){\n\t\t\t\t\tuf = this.impliedhFeedTitle( uf );\n\t\t\t\t\tuf = this.impliedName( node, uf );\n\t\t\t\t\tuf = this.impliedPhoto( node, uf );\n\t\t\t\t\tuf = this.impliedUrl( node, uf );\n\t\t\t\t}\n\t\t\t\tuf = this.impliedValue( node, uf, parentClasses );\n\t\t\t\tuf = this.impliedDate( uf );\n\n\t\t\t\t// TEMP: flagged while spec changes are put forward\n\t\t\t\tif(this.options.parseLatLonGeo === true){\n\t\t\t\t\tuf = this.impliedGeo( uf );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * apply implied name rule\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedName = function(node, uf) {\n\t\t\t// implied name rule\n\t\t\t/*\n\t\t\t\timg.h-x[alt]\t\t\t\t\t\t\t\t\t\t<img class=\"h-card\" src=\"glenn.htm\" alt=\"Glenn Jones\"></a>\n\t\t\t\tarea.h-x[alt] \t\t\t\t\t\t\t\t\t\t<area class=\"h-card\" href=\"glenn.htm\" alt=\"Glenn Jones\"></area>\n\t\t\t\tabbr.h-x[title]\t\t\t\t\t\t\t\t\t\t<abbr class=\"h-card\" title=\"Glenn Jones\"GJ</abbr>\n\n\t\t\t\t.h-x>img:only-child[alt]:not[.h-*]\t\t\t\t\t<div class=\"h-card\"><a src=\"glenn.htm\" alt=\"Glenn Jones\"></a></div>\n\t\t\t\t.h-x>area:only-child[alt]:not[.h-*] \t\t\t\t<div class=\"h-card\"><area href=\"glenn.htm\" alt=\"Glenn Jones\"></area></div>\n\t\t\t\t.h-x>abbr:only-child[title] \t\t\t\t\t\t<div class=\"h-card\"><abbr title=\"Glenn Jones\">GJ</abbr></div>\n\n\t\t\t\t.h-x>:only-child>img:only-child[alt]:not[.h-*] \t\t<div class=\"h-card\"><span><img src=\"jane.html\" alt=\"Jane Doe\"/></span></div>\n\t\t\t\t.h-x>:only-child>area:only-child[alt]:not[.h-*] \t<div class=\"h-card\"><span><area href=\"jane.html\" alt=\"Jane Doe\"></area></span></div>\n\t\t\t\t.h-x>:only-child>abbr:only-child[title]\t\t\t\t<div class=\"h-card\"><span><abbr title=\"Jane Doe\">JD</abbr></span></div>\n\t\t\t*/\n\t\t\tvar name,\n\t\t\t\tvalue;\n\n\t\t\tif(!uf.properties.name) {\n\t\t\t\tvalue = this.getImpliedProperty(node, ['img', 'area', 'abbr'], this.getNameAttr);\n\t\t\t\tvar textFormat = this.options.textFormat;\n\t\t\t\t// if no value for tags/properties use text\n\t\t\t\tif(!value) {\n\t\t\t\t\tname = [modules.text.parse(this.document, node, textFormat)];\n\t\t\t\t}else{\n\t\t\t\t\tname = [modules.text.parseText(this.document, value, textFormat)];\n\t\t\t\t}\n\t\t\t\tif(name && name[0] !== ''){\n\t\t\t\t\tuf.properties.name = name;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * apply implied photo rule\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedPhoto = function(node, uf) {\n\t\t\t// implied photo rule\n\t\t\t/*\n\t\t\t\timg.h-x[src] \t\t\t\t\t\t\t\t\t\t\t\t<img class=\"h-card\" alt=\"Jane Doe\" src=\"jane.jpeg\"/>\n\t\t\t\tobject.h-x[data] \t\t\t\t\t\t\t\t\t\t\t<object class=\"h-card\" data=\"jane.jpeg\"/>Jane Doe</object>\n\t\t\t\t.h-x>img[src]:only-of-type:not[.h-*]\t\t\t\t\t\t<div class=\"h-card\"><img alt=\"Jane Doe\" src=\"jane.jpeg\"/></div>\n\t\t\t\t.h-x>object[data]:only-of-type:not[.h-*] \t\t\t\t\t<div class=\"h-card\"><object data=\"jane.jpeg\"/>Jane Doe</object></div>\n\t\t\t\t.h-x>:only-child>img[src]:only-of-type:not[.h-*] \t\t\t<div class=\"h-card\"><span><img alt=\"Jane Doe\" src=\"jane.jpeg\"/></span></div>\n\t\t\t\t.h-x>:only-child>object[data]:only-of-type:not[.h-*] \t\t<div class=\"h-card\"><span><object data=\"jane.jpeg\"/>Jane Doe</object></span></div>\n\t\t\t*/\n\t\t\tvar value;\n\t\t\tif(!uf.properties.photo) {\n\t\t\t\tvalue = this.getImpliedProperty(node, ['img', 'object'], this.getPhotoAttr);\n\t\t\t\tif(value) {\n\t\t\t\t\t// relative to absolute URL\n\t\t\t\t\tif(value && value !== '' && this.options.baseUrl !== '' && value.indexOf('://') === -1) {\n\t\t\t\t\t\tvalue = modules.url.resolve(value, this.options.baseUrl);\n\t\t\t\t\t}\n\t\t\t\t\tuf.properties.photo = [modules.utils.trim(value)];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * apply implied URL rule\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedUrl = function(node, uf) {\n\t\t\t// implied URL rule\n\t\t\t/*\n\t\t\t\ta.h-x[href]  \t\t\t\t\t\t\t<a class=\"h-card\" href=\"glenn.html\">Glenn</a>\n\t\t\t\tarea.h-x[href]  \t\t\t\t\t\t<area class=\"h-card\" href=\"glenn.html\">Glenn</area>\n\t\t\t\t.h-x>a[href]:only-of-type:not[.h-*]  \t<div class=\"h-card\" ><a href=\"glenn.html\">Glenn</a><p>...</p></div>\n\t\t\t\t.h-x>area[href]:only-of-type:not[.h-*]  <div class=\"h-card\" ><area href=\"glenn.html\">Glenn</area><p>...</p></div>\n\t\t\t*/\n\t\t\tvar value;\n\t\t\tif(!uf.properties.url) {\n\t\t\t\tvalue = this.getImpliedProperty(node, ['a', 'area'], this.getURLAttr);\n\t\t\t\tif(value) {\n\t\t\t\t\t// relative to absolute URL\n\t\t\t\t\tif(value && value !== '' && this.options.baseUrl !== '' && value.indexOf('://') === -1) {\n\t\t\t\t\t\tvalue = modules.url.resolve(value, this.options.baseUrl);\n\t\t\t\t\t}\n\t\t\t\t\tuf.properties.url = [modules.utils.trim(value)];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * apply implied date rule - if there is a time only property try to concat it with any date property\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedDate = function(uf) {\n\t\t\t// implied date rule\n\t\t\t// http://microformats.org/wiki/value-class-pattern#microformats2_parsers\n\t\t\t// http://microformats.org/wiki/microformats2-parsing-issues#implied_date_for_dt_properties_both_mf2_and_backcompat\n\t\t\tvar newDate;\n\t\t\tif(uf.times.length > 0 && uf.dates.length > 0) {\n\t\t\t\tnewDate = modules.dates.dateTimeUnion(uf.dates[0][1], uf.times[0][1], 'microformat2');\n\t\t\t\t//uf.properties[this.removePropPrefix(uf.times[0][0])][0] = newDate.toString('microformat2');\n\t\t\t\tvar key = this.removePropPrefix(uf.times[0][0]);\n \t\t\t\tif (!!(key.length) && Array.isArray(uf.properties[key])) {\n \t\t\t\t\tuf.properties[key][0] = newDate.toString('microformat2');\n \t\t\t\t}\n\t\t\t}\n\t\t\t// clean-up object\n\t\t\tdelete uf.times;\n\t\t\tdelete uf.dates;\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * get an implied property value from pre-defined tag/attriubte combinations\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} tagList (Array of tags from which an implied value can be pulled)\n\t\t * @param  {String} getAttrFunction (Function which can extract implied value)\n\t\t * @return {String || null}\n\t\t */\n\t\tmodules.Parser.prototype.getImpliedProperty = function(node, tagList, getAttrFunction) {\n\t\t\t// i.e. img.h-card\n\t\t\tvar value = getAttrFunction(node),\n\t\t\t\tdescendant,\n\t\t\t\tchild;\n\n\t\t\tif(!value) {\n\t\t\t\t// i.e. .h-card>img:only-of-type:not(.h-card)\n\t\t\t\tdescendant = modules.domUtils.getSingleDescendantOfType( node, tagList);\n\t\t\t\tif(descendant && this.hasHClass(descendant) === false){\n\t\t\t\t\tvalue = getAttrFunction(descendant);\n\t\t\t\t}\n\t\t\t\tif(node.children.length > 0 ){\n\t\t\t\t\t// i.e.  .h-card>:only-child>img:only-of-type:not(.h-card)\n\t\t\t\t\tchild = modules.domUtils.getSingleDescendant(node);\n\t\t\t\t\tif(child && this.hasHClass(child) === false){\n\t\t\t\t\t\tdescendant = modules.domUtils.getSingleDescendantOfType(child, tagList);\n\t\t\t\t\t\tif(descendant && this.hasHClass(descendant) === false){\n\t\t\t\t\t\t\tvalue = getAttrFunction(descendant);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\n\t\t/**\n\t\t * get an implied name value from a node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String || null}\n\t\t */\n\t\tmodules.Parser.prototype.getNameAttr = function(node) {\n\t\t\tvar value = modules.domUtils.getAttrValFromTagList(node, ['img','area'], 'alt');\n\t\t\tif(!value) {\n\t\t\t\tvalue = modules.domUtils.getAttrValFromTagList(node, ['abbr'], 'title');\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\n\t\t/**\n\t\t * get an implied photo value from a node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String || null}\n\t\t */\n\t\tmodules.Parser.prototype.getPhotoAttr = function(node) {\n\t\t\tvar value = modules.domUtils.getAttrValFromTagList(node, ['img'], 'src');\n\t\t\tif(!value && modules.domUtils.hasAttributeValue(node, 'class', 'include') === false) {\n\t\t\t\tvalue = modules.domUtils.getAttrValFromTagList(node, ['object'], 'data');\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\n\t\t/**\n\t\t * get an implied photo value from a node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String || null}\n\t\t */\n\t\tmodules.Parser.prototype.getURLAttr = function(node) {\n\t\t\tvar value = null;\n\t\t\tif(modules.domUtils.hasAttributeValue(node, 'class', 'include') === false){\n\n\t\t\t\tvalue = modules.domUtils.getAttrValFromTagList(node, ['a'], 'href');\n\t\t\t\tif(!value) {\n\t\t\t\t\tvalue = modules.domUtils.getAttrValFromTagList(node, ['area'], 'href');\n\t\t\t\t}\n\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedValue = function(node, uf, parentClasses){\n\n\t\t\t// intersection of implied name and implied value rules\n\t\t\tif(uf.properties.name) {\n\t\t\t\tif(uf.value && parentClasses.root.length > 0 && parentClasses.properties.length === 1){\n\t\t\t\t\tuf = this.getAltValue(uf, parentClasses.properties[0][0], 'p-name', uf.properties.name[0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// intersection of implied URL and implied value rules\n\t\t\tif(uf.properties.url) {\n\t\t\t\tif(parentClasses && parentClasses.root.length === 1 && parentClasses.properties.length === 1){\n\t\t\t\t\tuf = this.getAltValue(uf, parentClasses.properties[0][0], 'u-url', uf.properties.url[0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// apply alt value\n\t\t\tif(uf.altValue !== null){\n\t\t\t\tuf.value = uf.altValue.value;\n\t\t\t}\n\t\t\tdelete uf.altValue;\n\n\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * get alt value based on rules about parent property prefix\n\t\t *\n\t\t * @param  {Object} uf\n\t\t * @param  {String} parentPropertyName\n\t\t * @param  {String} propertyName\n\t\t * @param  {String} value\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.getAltValue = function(uf, parentPropertyName, propertyName, value){\n\t\t\tif(uf.value && !uf.altValue){\n\t\t\t\t// first p-name of the h-* child\n\t\t\t\tif(modules.utils.startWith(parentPropertyName,'p-') && propertyName === 'p-name'){\n\t\t\t\t\tuf.altValue = {name: propertyName, value: value};\n\t\t\t\t}\n\t\t\t\t// if it's an e-* property element\n\t\t\t\tif(modules.utils.startWith(parentPropertyName,'e-') && modules.utils.startWith(propertyName,'e-')){\n\t\t\t\t\tuf.altValue = {name: propertyName, value: value};\n\t\t\t\t}\n\t\t\t\t// if it's an u-* property element\n\t\t\t\tif(modules.utils.startWith(parentPropertyName,'u-') && propertyName === 'u-url'){\n\t\t\t\t\tuf.altValue = {name: propertyName, value: value};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * if a h-feed does not have a title use the title tag of a page\n\t\t *\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedhFeedTitle = function( uf ){\n\t\t\tif(uf.type && uf.type.indexOf('h-feed') > -1){\n\t\t\t\t// has no name property\n\t\t\t\tif(uf.properties.name === undefined || uf.properties.name[0] === '' ){\n\t\t\t\t\t// use the text from the title tag\n\t\t\t\t\tvar title = modules.domUtils.querySelector(this.document, 'title');\n\t\t\t\t\tif(title){\n\t\t\t\t\t\tuf.properties.name = [modules.domUtils.textContent(title)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uf;\n\t\t};\n\n\n\n\t    /**\n\t\t * implied Geo from pattern <abbr class=\"p-geo\" title=\"37.386013;-122.082932\">\n\t\t *\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedGeo = function( uf ){\n\t\t\tvar geoPair,\n\t\t\t\tparts,\n\t\t\t\tlongitude,\n\t\t\t\tlatitude,\n\t\t\t\tvalid = true;\n\n\t\t\tif(uf.type && uf.type.indexOf('h-geo') > -1){\n\n\t\t\t\t// has no latitude or longitude property\n\t\t\t\tif(uf.properties.latitude === undefined || uf.properties.longitude === undefined ){\n\n\t\t\t\t\tgeoPair = (uf.properties.name)? uf.properties.name[0] : null;\n\t\t\t\t\tgeoPair = (!geoPair && uf.properties.value)? uf.properties.value : geoPair;\n\n\t\t\t\t\tif(geoPair){\n\t\t\t\t\t\t// allow for the use of a ';' as in microformats and also ',' as in Geo URL\n\t\t\t\t\t\tgeoPair = geoPair.replace(';',',');\n\n\t\t\t\t\t\t// has sep char\n\t\t\t\t\t\tif(geoPair.indexOf(',') > -1 ){\n\t\t\t\t\t\t\tparts = geoPair.split(',');\n\n\t\t\t\t\t\t\t// only correct if we have two or more parts\n\t\t\t\t\t\t\tif(parts.length > 1){\n\n\t\t\t\t\t\t\t\t// latitude no value outside the range -90 or 90\n\t\t\t\t\t\t\t\tlatitude = parseFloat( parts[0] );\n\t\t\t\t\t\t\t\tif(modules.utils.isNumber(latitude) && latitude > 90 || latitude < -90){\n\t\t\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// longitude no value outside the range -180 to 180\n\t\t\t\t\t\t\t\tlongitude = parseFloat( parts[1] );\n\t\t\t\t\t\t\t\tif(modules.utils.isNumber(longitude) && longitude > 180 || longitude < -180){\n\t\t\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif(valid){\n\t\t\t\t\t\t\t\t\tuf.properties.latitude = [latitude];\n\t\t\t\t\t\t\t\t\tuf.properties.longitude  = [longitude];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uf;\n\t\t};\n\n\n\t\t/**\n\t\t * if a backwards compat built structure has no properties add name through this.impliedName\n\t\t *\n\t\t * @param  {Object} uf\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.impliedBackwardComp = function(node, uf, parentClasses){\n\n\t\t\t// look for pattern in parent classes like \"p-geo h-geo\"\n\t\t\t// these are structures built from backwards compat parsing of geo\n\t\t\tif(parentClasses.root.length === 1 && parentClasses.properties.length === 1) {\n\t\t\t\tif(parentClasses.root[0].replace('h-','') === this.removePropPrefix(parentClasses.properties[0][0])) {\n\n\t\t\t\t\t// if microformat has no properties apply the impliedName rule to get value from containing node\n\t\t\t\t\t// this will get value from html such as <abbr class=\"geo\" title=\"30.267991;-97.739568\">Brighton</abbr>\n\t\t\t\t\tif( modules.utils.hasProperties(uf.properties) === false ){\n\t\t\t\t\t\tuf = this.impliedName( node, uf );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uf;\n\t\t};\n\n\n\n\t}\n\n\n\t// check parser module is loaded\n\tif(modules.Parser){\n\n\n\t\t/**\n\t\t * appends clones of include Nodes into the DOM structure\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t */\n\t\tmodules.Parser.prototype.addIncludes = function(rootNode) {\n\t\t\tthis.addAttributeIncludes(rootNode, 'itemref');\n\t\t\tthis.addAttributeIncludes(rootNode, 'headers');\n\t\t\tthis.addClassIncludes(rootNode);\n\t\t};\n\n\n\t\t/**\n\t\t * appends clones of include Nodes into the DOM structure for attribute based includes\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t * @param  {String} attributeName\n\t\t */\n\t\tmodules.Parser.prototype.addAttributeIncludes = function(rootNode, attributeName) {\n\t\t\tvar arr,\n\t\t\t\tidList,\n\t\t\t\ti,\n\t\t\t\tx,\n\t\t\t\tz,\n\t\t\t\ty;\n\n\t\t\tarr = modules.domUtils.getNodesByAttribute(rootNode, attributeName);\n\t\t\tx = 0;\n\t\t\ti = arr.length;\n\t\t\twhile(x < i) {\n\t\t\t\tidList = modules.domUtils.getAttributeList(arr[x], attributeName);\n\t\t\t\tif(idList) {\n\t\t\t\t\tz = 0;\n\t\t\t\t\ty = idList.length;\n\t\t\t\t\twhile(z < y) {\n\t\t\t\t\t\tthis.apppendInclude(arr[x], idList[z]);\n\t\t\t\t\t\tz++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tx++;\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * appends clones of include Nodes into the DOM structure for class based includes\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t */\n\t\tmodules.Parser.prototype.addClassIncludes = function(rootNode) {\n\t\t\tvar id,\n\t\t\t\tarr,\n\t\t\t\tx = 0,\n\t\t\t\ti;\n\n\t\t\tarr = modules.domUtils.getNodesByAttributeValue(rootNode, 'class', 'include');\n\t\t\ti = arr.length;\n\t\t\twhile(x < i) {\n\t\t\t\tid = modules.domUtils.getAttrValFromTagList(arr[x], ['a'], 'href');\n\t\t\t\tif(!id) {\n\t\t\t\t\tid = modules.domUtils.getAttrValFromTagList(arr[x], ['object'], 'data');\n\t\t\t\t}\n\t\t\t\tthis.apppendInclude(arr[x], id);\n\t\t\t\tx++;\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * appends a clone of an include into another Node using Id\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t * @param  {Stringe} id\n\t\t */\n\t\tmodules.Parser.prototype.apppendInclude = function(node, id){\n\t\t\tvar include,\n\t\t\t\tclone;\n\n\t\t\tif(id){\n\t\t\t\tid = modules.utils.trim(id.replace('#', ''));\n\t\t\t\tinclude = modules.domUtils.getElementById(this.document, id);\n\t\t\t\tif(include) {\n\t\t\t\t\tclone = modules.domUtils.clone(include);\n\t\t\t\t\tthis.markIncludeChildren(clone);\n\t\t\t\t\tmodules.domUtils.appendChild(node, clone);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * adds an attribute marker to all the child microformat roots\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t */\n\t\tmodules.Parser.prototype.markIncludeChildren = function(rootNode) {\n\t\t\tvar arr,\n\t\t\t\tx,\n\t\t\t\ti;\n\n\t\t\t// loop the array and add the attribute\n\t\t\tarr = this.findRootNodes(rootNode);\n\t\t\tx = 0;\n\t\t\ti = arr.length;\n\t\t\tmodules.domUtils.setAttribute(rootNode, 'data-include', 'true');\n\t\t\tmodules.domUtils.setAttribute(rootNode, 'style', 'display:none');\n\t\t\twhile(x < i) {\n\t\t\t\tmodules.domUtils.setAttribute(arr[x], 'data-include', 'true');\n\t\t\t\tx++;\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * removes all appended include clones from DOM\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t */\n\t\tmodules.Parser.prototype.removeIncludes = function(rootNode){\n\t\t\tvar arr,\n\t\t\t\ti;\n\n\t\t\t// remove all the items that were added as includes\n\t\t\tarr = modules.domUtils.getNodesByAttribute(rootNode, 'data-include');\n\t\t\ti = arr.length;\n\t\t\twhile(i--) {\n\t\t\t\tmodules.domUtils.removeChild(rootNode,arr[i]);\n\t\t\t}\n\t\t};\n\n\n\t}\n\n\n\t// check parser module is loaded\n\tif(modules.Parser){\n\t\n\t\t/**\n\t\t * finds rel=* structures\n\t\t *\n\t\t * @param  {DOM node} rootNode\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.findRels = function(rootNode) {\n\t\t\tvar out = {\n\t\t\t\t\t'items': [],\n\t\t\t\t\t'rels': {},\n\t\t\t\t\t'rel-urls': {}\n\t\t\t\t},\n\t\t\t\tx,\n\t\t\t\ti,\n\t\t\t\ty,\n\t\t\t\tz,\n\t\t\t\trelList,\n\t\t\t\titems,\n\t\t\t\titem,\n\t\t\t\tvalue,\n\t\t\t\tarr;\n\t\n\t\t\tarr = modules.domUtils.getNodesByAttribute(rootNode, 'rel');\n\t\t\tx = 0;\n\t\t\ti = arr.length;\n\t\t\twhile(x < i) {\n\t\t\t\trelList = modules.domUtils.getAttribute(arr[x], 'rel');\n\t\n\t\t\t\tif(relList) {\n\t\t\t\t\titems = relList.split(' ');\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// add rels\n\t\t\t\t\tz = 0;\n\t\t\t\t\ty = items.length;\n\t\t\t\t\twhile(z < y) {\n\t\t\t\t\t\titem = modules.utils.trim(items[z]);\n\t\n\t\t\t\t\t\t// get rel value\n\t\t\t\t\t\tvalue = modules.domUtils.getAttrValFromTagList(arr[x], ['a', 'area'], 'href');\n\t\t\t\t\t\tif(!value) {\n\t\t\t\t\t\t\tvalue = modules.domUtils.getAttrValFromTagList(arr[x], ['link'], 'href');\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// create the key\n\t\t\t\t\t\tif(!out.rels[item]) {\n\t\t\t\t\t\t\tout.rels[item] = [];\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif(typeof this.options.baseUrl === 'string' && typeof value === 'string') {\n\t\t\t\t\t\n\t\t\t\t\t\t\tvar resolved = modules.url.resolve(value, this.options.baseUrl);\n\t\t\t\t\t\t\t// do not add duplicate rels - based on resolved URLs\n\t\t\t\t\t\t\tif(out.rels[item].indexOf(resolved) === -1){\n\t\t\t\t\t\t\t\tout.rels[item].push( resolved );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tz++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tvar url = null;\n\t\t\t\t\tif(modules.domUtils.hasAttribute(arr[x], 'href')){\n\t\t\t\t\t\turl = modules.domUtils.getAttribute(arr[x], 'href');\n\t\t\t\t\t\tif(url){\n\t\t\t\t\t\t\turl = modules.url.resolve(url, this.options.baseUrl );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t\n\t\t\t\t\t// add to rel-urls\n\t\t\t\t\tvar relUrl = this.getRelProperties(arr[x]);\n\t\t\t\t\trelUrl.rels = items;\n\t\t\t\t\t// // do not add duplicate rel-urls - based on resolved URLs\n\t\t\t\t\tif(url && out['rel-urls'][url] === undefined){\n\t\t\t\t\t\tout['rel-urls'][url] = relUrl;\n\t\t\t\t\t}\n\t\n\t\t\t\n\t\t\t\t}\n\t\t\t\tx++;\n\t\t\t}\n\t\t\treturn out;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * gets the properties of a rel=*\n\t\t *\n\t\t * @param  {DOM node} node\n\t\t * @return {Object}\n\t\t */\n\t\tmodules.Parser.prototype.getRelProperties = function(node){\n\t\t\tvar obj = {};\n\t\t\t\n\t\t\tif(modules.domUtils.hasAttribute(node, 'media')){\n\t\t\t\tobj.media = modules.domUtils.getAttribute(node, 'media');\n\t\t\t}\n\t\t\tif(modules.domUtils.hasAttribute(node, 'type')){\n\t\t\t\tobj.type = modules.domUtils.getAttribute(node, 'type');\n\t\t\t}\n\t\t\tif(modules.domUtils.hasAttribute(node, 'hreflang')){\n\t\t\t\tobj.hreflang = modules.domUtils.getAttribute(node, 'hreflang');\n\t\t\t}\n\t\t\tif(modules.domUtils.hasAttribute(node, 'title')){\n\t\t\t\tobj.title = modules.domUtils.getAttribute(node, 'title');\n\t\t\t}\n\t\t\tif(modules.utils.trim(this.getPValue(node, false)) !== ''){\n\t\t\t\tobj.text = this.getPValue(node, false);\n\t\t\t}\t\n\t\t\t\n\t\t\treturn obj;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * finds any alt rel=* mappings for a given node/microformat\n\t\t *\n\t\t * @param  {DOM node} node\n\t\t * @param  {String} ufName\n\t\t * @return {String || undefined}\n\t\t */\n\t\tmodules.Parser.prototype.findRelImpied = function(node, ufName) {\n\t\t\tvar out,\n\t\t\t\tmap,\n\t\t\t\ti;\n\t\n\t\t\tmap = this.getMapping(ufName);\n\t\t\tif(map) {\n\t\t\t\tfor(var key in map.properties) {\n\t\t\t\t\tif (map.properties.hasOwnProperty(key)) {\n\t\t\t\t\t\tvar prop = map.properties[key],\n\t\t\t\t\t\t\tpropName = (prop.map) ? prop.map : 'p-' + key,\n\t\t\t\t\t\t\trelCount = 0;\n\t\t\n\t\t\t\t\t\t// is property an alt rel=* mapping \n\t\t\t\t\t\tif(prop.relAlt && modules.domUtils.hasAttribute(node, 'rel')) {\n\t\t\t\t\t\t\ti = prop.relAlt.length;\n\t\t\t\t\t\t\twhile(i--) {\n\t\t\t\t\t\t\t\tif(modules.domUtils.hasAttributeValue(node, 'rel', prop.relAlt[i])) {\n\t\t\t\t\t\t\t\t\trelCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(relCount === prop.relAlt.length) {\n\t\t\t\t\t\t\t\tout = propName;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * returns whether a node or its children has rel=* microformat\n\t\t *\n\t\t * @param  {DOM node} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tmodules.Parser.prototype.hasRel = function(node) {\n\t\t\treturn (this.countRels(node) > 0);\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * returns the number of rel=* microformats\n\t\t *\n\t\t * @param  {DOM node} node\n\t\t * @return {Int}\n\t\t */\n\t\tmodules.Parser.prototype.countRels = function(node) {\n\t\t\tif(node){\n\t\t\t\treturn modules.domUtils.getNodesByAttribute(node, 'rel').length;\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\t\n\t\n\t\t\n\t}\n\n\n\tmodules.utils = {\n\n\t\t/**\n\t\t * is the object a string\n\t\t *\n\t\t * @param  {Object} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tisString: function( obj ) {\n\t\t\treturn typeof( obj ) === 'string';\n\t\t},\n\n\t\t/**\n\t\t * is the object a number\n\t\t *\n\t\t * @param  {Object} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tisNumber: function( obj ) {\n\t\t\treturn !isNaN(parseFloat( obj )) && isFinite( obj );\n\t\t},\n\n\n\t\t/**\n\t\t * is the object an array\n\t\t *\n\t\t * @param  {Object} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tisArray: function( obj ) {\n\t\t\treturn obj && !( obj.propertyIsEnumerable( 'length' ) ) && typeof obj === 'object' && typeof obj.length === 'number';\n\t\t},\n\n\n\t\t/**\n\t\t * is the object a function\n\t\t *\n\t\t * @param  {Object} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tisFunction: function(obj) {\n\t\t\treturn !!(obj && obj.constructor && obj.call && obj.apply);\n\t\t},\n\n\n\t\t/**\n\t\t * does the text start with a test string\n\t\t *\n\t\t * @param  {String} text\n\t\t * @param  {String} test\n\t\t * @return {Boolean}\n\t\t */\n\t\tstartWith: function( text, test ) {\n\t\t\treturn(text.indexOf(test) === 0);\n\t\t},\n\n\n\t\t/**\n\t\t * is string all lowerCase - just checks letters\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Boolean}\n\t\t */\n\t\tisLowerCase: function( text ) {\n\t\t\treturn text === text.toLowerCase();\n\t\t},\n\n\n\n\t\t/**\n\t\t * removes spaces at front and back of text\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {String}\n\t\t */\n\t\ttrim: function( text ) {\n\t\t\tif(text && this.isString(text)){\n\t\t\t\treturn (text.trim())? text.trim() : text.replace(/^\\s+|\\s+$/g, '');\n\t\t\t}else{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * replaces a character in text\n\t\t *\n\t\t * @param  {String} text\n\t\t * @param  {Int} index\n\t\t * @param  {String} character\n\t\t * @return {String}\n\t\t */\n\t\treplaceCharAt: function( text, index, character ) {\n\t\t\tif(text && text.length > index){\n\t\t\t   return text.substr(0, index) + character + text.substr(index+character.length);\n\t\t\t}else{\n\t\t\t\treturn text;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * removes whitespace, tabs and returns from start and end of text\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {String}\n\t\t */\n\t\ttrimWhitespace: function( text ){\n\t\t\tif(text && text.length){\n\t\t\t\tvar i = text.length,\n\t\t\t\t\tx = 0;\n\n\t\t\t\t// turn all whitespace chars at end into spaces\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif(this.isOnlyWhiteSpace(text[i])){\n\t\t\t\t\t\ttext = this.replaceCharAt( text, i, ' ' );\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// turn all whitespace chars at start into spaces\n\t\t\t\ti = text.length;\n\t\t\t\twhile (x < i) {\n\t\t\t\t\tif(this.isOnlyWhiteSpace(text[x])){\n\t\t\t\t\t\ttext = this.replaceCharAt( text, i, ' ' );\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.trim(text);\n\t\t},\n\n\n\t\t/**\n\t\t * does text only contain whitespace characters\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Boolean}\n\t\t */\n\t\tisOnlyWhiteSpace: function( text ){\n\t\t\treturn !(/[^\\t\\n\\r ]/.test( text ));\n\t\t},\n\n\n\t\t/**\n\t\t * removes whitespace from text (leaves a single space)\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Sring}\n\t\t */\n\t\tcollapseWhiteSpace: function( text ){\n\t\t\treturn text.replace(/[\\t\\n\\r ]+/g, ' ');\n\t\t},\n\n\n\t\t/**\n\t\t * does an object have any of its own properties\n\t\t *\n\t\t * @param  {Object} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\thasProperties: function( obj ) {\n\t\t\tvar key;\n\t\t\tfor(key in obj) {\n\t\t\t\tif( obj.hasOwnProperty( key ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\n\t\t/**\n\t\t * a sort function - to sort objects in an array by a given property\n\t\t *\n\t\t * @param  {String} property\n\t\t * @param  {Boolean} reverse\n\t\t * @return {Int}\n\t\t */\n\t\tsortObjects: function(property, reverse) {\n\t\t\treverse = (reverse) ? -1 : 1;\n\t\t\treturn function (a, b) {\n\t\t\t\ta = a[property];\n\t\t\t\tb = b[property];\n\t\t\t\tif (a < b) {\n\t\t\t\t\treturn reverse * -1;\n\t\t\t\t}\n\t\t\t\tif (a > b) {\n\t\t\t\t\treturn reverse * 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\n\t};\n\n\n\tmodules.domUtils = {\n\n\t\t// blank objects for DOM\n\t\tdocument: null,\n\t\trootNode: null,\n\n\n\t     /**\n\t\t * gets DOMParser object\n\t\t *\n         * @return {Object || undefined}\n\t\t */\n        getDOMParser: function () {\n            if (typeof DOMParser === undefined) {\n                try {\n                    return Components.classes[\"@mozilla.org/xmlextras/domparser;1\"]\n                        .createInstance(Components.interfaces.nsIDOMParser);\n                } catch (e) {\n                    return;\n                }\n            } else {\n                return new DOMParser();\n            }\n        },\n\n\n\t     /**\n\t\t * configures what are the base DOM objects for parsing\n\t\t *\n\t\t * @param  {Object} options\n\t\t * @return {DOM Node} node\n\t\t */\n\t\tgetDOMContext: function( options ){\n\n\t\t\t// if a node is passed\n\t\t\tif(options.node){\n\t\t\t\tthis.rootNode = options.node;\n\t\t\t}\n\n\n\t\t\t// if a html string is passed\n\t\t\tif(options.html){\n\t\t\t\t//var domParser = new DOMParser();\n                var domParser = this.getDOMParser();\n       \t\t\tthis.rootNode = domParser.parseFromString( options.html, 'text/html' );\n\t\t\t}\n\n\n\t\t\t// find top level document from rootnode\n\t\t\tif(this.rootNode !== null){\n\t\t\t\tif(this.rootNode.nodeType === 9){\n\t\t\t\t\tthis.document = this.rootNode;\n\t\t\t\t\tthis.rootNode = modules.domUtils.querySelector(this.rootNode, 'html');\n\t\t\t\t}else{\n\t\t\t\t\t// if it's DOM node get parent DOM Document\n\t\t\t\t\tthis.document = modules.domUtils.ownerDocument(this.rootNode);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// use global document object\n\t\t\tif(!this.rootNode && document){\n\t\t\t\tthis.rootNode = modules.domUtils.querySelector(document, 'html');\n\t\t\t\tthis.document = document;\n\t\t\t}\n\n\n\t\t\tif(this.rootNode && this.document){\n\t\t\t\treturn {document: this.document, rootNode: this.rootNode};\n\t\t\t}\n\n\t\t\treturn {document: null, rootNode: null};\n\t\t},\n\n\n\n\t\t/**\n\t\t* gets the first DOM node\n\t\t*\n\t\t* @param  {Dom Document}\n\t\t* @return {DOM Node} node\n\t\t*/\n\t\tgetTopMostNode: function( node ){\n\t\t\t//var doc = this.ownerDocument(node);\n\t\t\t//if(doc && doc.nodeType && doc.nodeType === 9 && doc.documentElement){\n\t\t\t//\treturn doc.documentElement;\n\t\t\t//}\n\t\t\treturn node;\n\t\t},\n\n\n\n\t\t /**\n\t\t * abstracts DOM ownerDocument\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {Dom Document}\n\t\t */\n\t\townerDocument: function(node){\n\t\t\treturn node.ownerDocument;\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM textContent\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\ttextContent: function(node){\n\t\t\tif(node.textContent){\n\t\t\t\treturn node.textContent;\n\t\t\t}else if(node.innerText){\n\t\t\t\treturn node.innerText;\n\t\t\t}\n\t\t\treturn '';\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM innerHTML\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\tinnerHTML: function(node){\n\t\t\treturn node.innerHTML;\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM hasAttribute\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @return {Boolean}\n\t\t */\n\t\thasAttribute: function(node, attributeName) {\n\t\t\tif(node.hasAttribute){\n\t\t\t\treturn node.hasAttribute(attributeName);\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * does an attribute contain a value\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @param  {String} value\n\t\t * @return {Boolean}\n\t\t */\n\t\thasAttributeValue: function(node, attributeName, value) {\n\t\t\treturn (this.getAttributeList(node, attributeName).indexOf(value) > -1);\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM getAttribute\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @return {String || null}\n\t\t */\n\t\tgetAttribute: function(node, attributeName) {\n\t\t\treturn node.getAttribute(attributeName);\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM setAttribute\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @param  {String} attributeValue\n\t\t */\n\t\tsetAttribute: function(node, attributeName, attributeValue){\n\t\t\tnode.setAttribute(attributeName, attributeValue);\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM removeAttribute\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t */\n\t\tremoveAttribute: function(node, attributeName) {\n\t\t\tnode.removeAttribute(attributeName);\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM getElementById\n\t\t *\n\t\t * @param  {DOM Node || DOM Document} node\n\t\t * @param  {String} id\n\t\t * @return {DOM Node}\n\t\t */\n\t\tgetElementById: function(docNode, id) {\n\t\t\treturn docNode.querySelector( '#' + id );\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM querySelector\n\t\t *\n\t\t * @param  {DOM Node || DOM Document} node\n\t\t * @param  {String} selector\n\t\t * @return {DOM Node}\n\t\t */\n\t\tquerySelector: function(docNode, selector) {\n\t\t\treturn docNode.querySelector( selector );\n\t\t},\n\n\n\t\t/**\n\t\t * get value of a Node attribute as an array\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @return {Array}\n\t\t */\n\t\tgetAttributeList: function(node, attributeName) {\n\t\t\tvar out = [],\n\t\t\t\tattList;\n\n\t\t\tattList = node.getAttribute(attributeName);\n\t\t\tif(attList && attList !== '') {\n\t\t\t\tif(attList.indexOf(' ') > -1) {\n\t\t\t\t\tout = attList.split(' ');\n\t\t\t\t} else {\n\t\t\t\t\tout.push(attList);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * gets all child nodes with a given attribute\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @return {NodeList}\n\t\t */\n\t\tgetNodesByAttribute: function(node, attributeName) {\n\t\t\tvar selector = '[' + attributeName + ']';\n\t\t\treturn node.querySelectorAll(selector);\n\t\t},\n\n\n\t\t/**\n\t\t * gets all child nodes with a given attribute containing a given value\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} attributeName\n\t\t * @return {DOM NodeList}\n\t\t */\n\t\tgetNodesByAttributeValue: function(rootNode, name, value) {\n\t\t\tvar arr = [],\n\t\t\t\tx = 0,\n\t\t\t\ti,\n\t\t\t\tout = [];\n\n\t\t\tarr = this.getNodesByAttribute(rootNode, name);\n\t\t\tif(arr) {\n\t\t\t\ti = arr.length;\n\t\t\t\twhile(x < i) {\n\t\t\t\t\tif(this.hasAttributeValue(arr[x], name, value)) {\n\t\t\t\t\t\tout.push(arr[x]);\n\t\t\t\t\t}\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * gets attribute value from controlled list of tags\n\t\t *\n\t\t * @param  {Array} tagNames\n\t\t * @param  {String} attributeName\n\t\t * @return {String || null}\n\t\t */\n\t\tgetAttrValFromTagList: function(node, tagNames, attributeName) {\n\t\t\tvar i = tagNames.length;\n\n\t\t\twhile(i--) {\n\t\t\t\tif(node.tagName.toLowerCase() === tagNames[i]) {\n\t\t\t\t\tvar attrValue = this.getAttribute(node, attributeName);\n\t\t\t\t\tif(attrValue && attrValue !== '') {\n\t\t\t\t\t\treturn attrValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\n\n\t   /**\n\t\t * get node if it has no siblings. CSS equivalent is :only-child\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t * @param  {Array} tagNames\n\t\t * @return {DOM Node || null}\n\t\t */\n\t\tgetSingleDescendant: function(node){\n\t\t\treturn this.getDescendant( node, null, false );\n\t\t},\n\n\n        /**\n\t\t * get node if it has no siblings of the same type. CSS equivalent is :only-of-type\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t * @param  {Array} tagNames\n\t\t * @return {DOM Node || null}\n\t\t */\n\t\tgetSingleDescendantOfType: function(node, tagNames){\n\t\t\treturn this.getDescendant( node, tagNames, true );\n\t\t},\n\n\n\t    /**\n\t\t * get child node limited by presence of siblings - either CSS :only-of-type or :only-child\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t * @param  {Array} tagNames\n\t\t * @return {DOM Node || null}\n\t\t */\n\t\tgetDescendant: function( node, tagNames, onlyOfType ){\n\t\t\tvar i = node.children.length,\n\t\t\t\tcountAll = 0,\n\t\t\t\tcountOfType = 0,\n\t\t\t\tchild,\n\t\t\t\tout = null;\n\n\t\t\twhile(i--) {\n\t\t\t\tchild = node.children[i];\n\t\t\t\tif(child.nodeType === 1) {\n\t\t\t\t\tif(tagNames){\n\t\t\t\t\t\t// count just only-of-type\n\t\t\t\t\t\tif(this.hasTagName(child, tagNames)){\n\t\t\t\t\t\t\tout = child;\n\t\t\t\t\t\t\tcountOfType++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\t// count all elements\n\t\t\t\t\t\tout = child;\n\t\t\t\t\t\tcountAll++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(onlyOfType === true){\n\t\t\t\treturn (countOfType === 1)? out : null;\n\t\t\t}else{\n\t\t\t\treturn (countAll === 1)? out : null;\n\t\t\t}\n\t\t},\n\n\n\t   /**\n\t\t * is a node one of a list of tags\n\t\t *\n\t\t * @param  {DOM Node} rootNode\n\t\t * @param  {Array} tagNames\n\t\t * @return {Boolean}\n\t\t */\n\t\thasTagName: function(node, tagNames){\n\t\t\tvar i = tagNames.length;\n\t\t\twhile(i--) {\n\t\t\t\tif(node.tagName.toLowerCase() === tagNames[i]) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\n\t   /**\n\t\t * abstracts DOM appendChild\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {DOM Node} childNode\n\t\t * @return {DOM Node}\n\t\t */\n\t\tappendChild: function(node, childNode){\n\t\t\treturn node.appendChild(childNode);\n\t\t},\n\n\n\t   /**\n\t\t * abstracts DOM removeChild\n\t\t *\n\t\t * @param  {DOM Node} childNode\n\t\t * @return {DOM Node || null}\n\t\t */\n\t\tremoveChild: function(childNode){\n\t\t\tif (childNode.parentNode) {\n\t\t\t\treturn childNode.parentNode.removeChild(childNode);\n\t\t\t}else{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * abstracts DOM cloneNode\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {DOM Node}\n\t\t */\n\t\tclone: function(node) {\n\t\t\tvar newNode = node.cloneNode(true);\n\t\t\tif(this.hasAttribute(node, 'id')){\n\t\t\t\tthis.removeAttribute(node, 'id')\n\t\t\t}\n\t\t\treturn newNode;\n\t\t},\n\n\n\t\t/**\n\t\t * removes all the descendant tags by name\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {Array} tagNames\n\t\t * @return {DOM Node}\n\t\t */\n\t\tremoveDescendantsByTagName: function(node, tagNames) {\n\t\t\tfor (var i = 0; i < tagNames.length; i++) {\n\t\t\t\tif(node.getElementsByTagName){\n\t\t\t\t\tvar elements = node.getElementsByTagName(tagNames[i]);\n\t\t\t\t\twhile (elements[0]) {\n\t\t\t\t\t\telements[0].parentNode.removeChild(elements[0])\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn node;\n\t\t},\n\n\n\t\t/**\n\t\t * gets the text of a node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\tgetElementText: function( node ){\n\t\t\tif(node && node.data){\n\t\t\t\treturn node.data;\n\t\t\t}else{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * gets the attributes of a node - ordered by sequence in html\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {Array}\n\t\t */\n\t\tgetOrderedAttributes: function( node ){\n\t\t\tvar nodeStr = node.outerHTML,\n\t\t\t\tattrs = [];\n\n\t\t\tfor (var i = 0; i < node.attributes.length; i++) {\n\t\t\t\tvar attr = node.attributes[i];\n\t\t\t\t\tattr.indexNum = nodeStr.indexOf(attr.name);\n\n\t\t\t\tattrs.push( attr );\n\t\t\t}\n\t\t\treturn attrs.sort( modules.utils.sortObjects( 'indexNum' ) );\n\t\t},\n\n\n\t\t/**\n\t\t * decodes html entities in given text\n\t\t *\n\t\t * @param  {DOM Document} doc\n\t\t * @param  String} text\n\t\t * @return {String}\n\t\t */\n\t\tdecodeEntities: function( doc, text ){\n\t\t\t//return text;\n\t\t\treturn doc.createTextNode( text ).nodeValue;\n\t\t},\n\n\n\t\t/**\n\t\t * clones a DOM document\n\t\t *\n\t\t * @param  {DOM Document} document\n\t\t * @return {DOM Document}\n\t\t */\n\t\tcloneDocument: function( document ){\n\t\t\tvar newNode,\n\t\t\t\tnewDocument = null;\n\n\t\t\tif( this.canCloneDocument( document )){\n\t\t\t\tnewDocument = document.implementation.createHTMLDocument('');\n\t\t\t\tnewNode = newDocument.importNode( document.documentElement, true );\n\t\t\t\tnewDocument.replaceChild(newNode, newDocument.querySelector('html'));\n\t\t\t}\n\t\t\treturn (newNode && newNode.nodeType && newNode.nodeType === 1)? newDocument : document;\n\t\t},\n\n\n\t\t/**\n\t\t * can environment clone a DOM document\n\t\t *\n\t\t * @param  {DOM Document} document\n\t\t * @return {Boolean}\n\t\t */\n\t\tcanCloneDocument: function( document ){\n\t\t\treturn (document && document.importNode && document.implementation && document.implementation.createHTMLDocument);\n\t\t},\n\n\n\t\t/**\n\t\t * get the child index of a node. Used to create a node path\n\t\t *\n\t\t *   @param  {DOM Node} node\n\t\t *   @return {Int}\n\t\t */\n\t\tgetChildIndex: function (node) {\n\t\t  \tvar parent = node.parentNode,\n\t\t  \t\ti = -1,\n\t\t  \t\tchild;\n\t  \t\twhile (parent && (child = parent.childNodes[++i])){\n\t\t\t\t if (child === node){\n\t\t\t\t\t return i;\n\t\t\t\t }\n\t\t\t}\n\t  \t\treturn -1;\n\t\t},\n\n\n\t\t/**\n\t\t * get a node's path\n\t\t *\n\t\t *   @param  {DOM Node} node\n\t\t *   @return {Array}\n\t\t */\n\t\tgetNodePath: function  (node) {\n\t\t  \tvar parent = node.parentNode,\n\t\t\t  \tpath = [],\n\t\t\t  \tindex = this.getChildIndex(node);\n\n\t\t  if(parent && (path = this.getNodePath(parent))){\n\t\t\t   if(index > -1){\n\t\t\t\t   path.push(index);\n\t\t\t   }\n\t\t  }\n\t\t  return path;\n\t\t},\n\n\n\t\t/**\n\t\t * get a node's path\n\t\t *\n\t\t *   @param  {DOM Node} node\n\t\t *   @param  {String} attributeName\n\t\t *   @return {String || null}\n\t\t */\n\t\tgetFirstAncestorAttribute: function  (node, attributeName) {\n\t\t\tif(!node){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(this.hasAttribute(node, attributeName)){\n\t\t\t\treturn this.getAttribute(node, attributeName);\n\t\t\t}else{\n\t\t\t\tvar parent = node.parentNode;\n\t\t\t\tif(parent){\n\t\t\t\t\treturn this.getFirstAncestorAttribute(parent, attributeName);\n\t\t\t\t}else{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * get a node from a path.\n\t\t *\n\t\t *   @param  {DOM document} document\n\t\t *   @param  {Array} path\n\t\t *   @return {DOM Node}\n\t\t */\n\t\tgetNodeByPath: function (document, path) {\n\t\t  \tvar node = document.documentElement,\n\t\t  \t\ti = 0,\n\t\t  \t\tindex;\n\t\t  while ((index = path[++i]) > -1){\n\t\t\t  node = node.childNodes[index];\n\t\t  }\n\t\t  return node;\n\t\t},\n\n\n\t\t/**\n\t\t* get an array/nodeList of child nodes\n\t\t*\n\t\t*   @param  {DOM node} node\n\t\t*   @return {Array}\n\t\t*/\n\t\tgetChildren: function( node ){\n\t\t\treturn node.children;\n\t\t},\n\n\n\t\t/**\n\t\t* create a node\n\t\t*\n\t\t*   @param  {String} tagName\n\t\t*   @return {DOM node}\n\t\t*/\n\t\tcreateNode: function( tagName ){\n\t\t\treturn this.document.createElement(tagName);\n\t\t},\n\n\n\t\t/**\n\t\t* create a node with text content\n\t\t*\n\t\t*   @param  {String} tagName\n\t\t*   @param  {String} text\n\t\t*   @return {DOM node}\n\t\t*/\n\t\tcreateNodeWithText: function( tagName, text ){\n\t\t\tvar node = this.document.createElement(tagName);\n\t\t\tnode.innerHTML = text;\n\t\t\treturn node;\n\t\t}\n\n\n\n\t};\n\n\n\tmodules.url = {\n\n\n\t\t/**\n\t\t * creates DOM objects needed to resolve URLs\n\t\t */\n        init: function(){\n            //this._domParser = new DOMParser();\n            this._domParser = modules.domUtils.getDOMParser();\n            // do not use a head tag it does not work with IE9\n            this._html = '<base id=\"base\" href=\"\"></base><a id=\"link\" href=\"\"></a>';\n            this._nodes = this._domParser.parseFromString( this._html, 'text/html' );\n            this._baseNode =  modules.domUtils.getElementById(this._nodes,'base');\n            this._linkNode =  modules.domUtils.getElementById(this._nodes,'link');\n        },\n\n\n\t\t/**\n\t\t * resolves url to absolute version using baseUrl\n\t\t *\n\t\t * @param  {String} url\n\t\t * @param  {String} baseUrl\n\t\t * @return {String}\n\t\t */\n\t\tresolve: function(url, baseUrl) {\n\t\t\t// use modern URL web API where we can\n\t\t\tif(modules.utils.isString(url) && modules.utils.isString(baseUrl) && url.indexOf('://') === -1){\n\t\t\t\t// this try catch is required as IE has an URL object but no constuctor support\n\t\t\t\t// http://glennjones.net/articles/the-problem-with-window-url\n\t\t\t\ttry {\n\t\t\t\t\tvar resolved = new URL(url, baseUrl).toString();\n\t\t\t\t\t// deal with early Webkit not throwing an error - for Safari\n\t\t\t\t\tif(resolved === '[object URL]'){\n\t\t\t\t\t\tresolved = URI.resolve(baseUrl, url);\n\t\t\t\t\t}\n\t\t\t\t\treturn resolved;\n\t\t\t\t}catch(e){\n                    // otherwise fallback to DOM\n                    if(this._domParser === undefined){\n                        this.init();\n                    }\n\n                    // do not use setAttribute it does not work with IE9\n                    this._baseNode.href = baseUrl;\n                    this._linkNode.href = url;\n\n                    // dont use getAttribute as it returns orginal value not resolved\n                    return this._linkNode.href;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(modules.utils.isString(url)){\n\t\t\t\t\treturn url;\n\t\t\t\t}\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\n\t};\n\n\n\t/**\n\t * constructor\n\t * parses text to find just the date element of an ISO date/time string i.e. 2008-05-01\n\t *\n\t * @param  {String} dateString\n\t * @param  {String} format\n\t * @return {String}\n\t */\n\tmodules.ISODate = function ( dateString, format ) {\n\t\tthis.clear();\n\n\t\tthis.format = (format)? format : 'auto'; // auto or W3C or RFC3339 or HTML5\n\t\tthis.setFormatSep();\n\n\t\t// optional should be full iso date/time string\n\t\tif(arguments[0]) {\n\t\t\tthis.parse(dateString, this.format);\n\t\t}\n\t};\n\n\n\tmodules.ISODate.prototype = {\n\n\n\t\t/**\n\t\t * clear all states\n\t\t *\n\t\t */\n\t\tclear: function(){\n\t\t\tthis.clearDate();\n\t\t\tthis.clearTime();\n\t\t\tthis.clearTimeZone();\n\t\t\tthis.setAutoProfileState();\n\t\t},\n\n\n\t\t/**\n\t\t * clear date states\n\t\t *\n\t\t */\n\t\tclearDate: function(){\n\t\t\tthis.dY = -1;\n\t\t\tthis.dM = -1;\n\t\t\tthis.dD = -1;\n\t\t\tthis.dDDD = -1;\n\t\t},\n\n\n\t\t/**\n\t\t * clear time states\n\t\t *\n\t\t */\n\t\tclearTime: function(){\n\t\t\tthis.tH = -1;\n\t\t\tthis.tM = -1;\n\t\t\tthis.tS = -1;\n\t\t\tthis.tD = -1;\n\t\t},\n\n\n\t\t/**\n\t\t * clear timezone states\n\t\t *\n\t\t */\n\t\tclearTimeZone: function(){\n\t\t\tthis.tzH = -1;\n\t\t\tthis.tzM = -1;\n\t\t\tthis.tzPN = '+';\n\t\t\tthis.z = false;\n\t\t},\n\n\n\t\t/**\n\t\t * resets the auto profile state\n\t\t *\n\t\t */\n\t\tsetAutoProfileState: function(){\n\t\t\tthis.autoProfile = {\n\t\t\t   sep: 'T',\n\t\t\t   dsep: '-',\n\t\t\t   tsep: ':',\n\t\t\t   tzsep: ':',\n\t\t\t   tzZulu: 'Z'\n\t\t\t};\n\t\t},\n\n\n\t\t/**\n\t\t * parses text to find ISO date/time string i.e. 2008-05-01T15:45:19Z\n\t\t *\n\t\t * @param  {String} dateString\n\t\t * @param  {String} format\n\t\t * @return {String}\n\t\t */\n\t\tparse: function( dateString, format ) {\n\n\t\t\tthis.clear();\n\t\t\tthis.setFormat(format);\n\n\t\t\tvar parts = [],\n\t\t\t\ttzArray = [],\n\t\t\t\tposition = 0,\n\t\t\t\tdatePart = '',\n\t\t\t\ttimePart = '',\n\t\t\t\ttimeZonePart = '';\n\n\n\t\t\t// discover date time separtor for auto profile\n\t\t\t// Set to 'T' by default\n\t\t\tif(dateString.indexOf('t') > -1) {\n\t\t\t\tthis.autoProfile.sep = 't';\n\t\t\t}\n\t\t\tif(dateString.indexOf('z') > -1) {\n\t\t\t\tthis.autoProfile.tzZulu = 'z';\n\t\t\t}\n\t\t\tif(dateString.indexOf('Z') > -1) {\n\t\t\t\tthis.autoProfile.tzZulu = 'Z';\n\t\t\t}\n\t\t\tif(dateString.toUpperCase().indexOf('T') === -1) {\n\t\t\t\tthis.autoProfile.sep = ' ';\n\t\t\t}\n\n\n\t\t\tdateString = dateString.toUpperCase().replace(' ','T');\n\n\t\t\t// break on 'T' divider or space\n\t\t\tif(dateString.indexOf('T') > -1) {\n\t\t\t\tparts = dateString.split('T');\n\t\t\t\tdatePart = parts[0];\n\t\t\t\ttimePart = parts[1];\n\n\t\t\t\t// zulu UTC\n\t\t\t\tif(timePart.indexOf( 'Z' ) > -1) {\n\t\t\t\t\tthis.z = true;\n\t\t\t\t}\n\n\t\t\t\t// timezone\n\t\t\t\tif(timePart.indexOf( '+' ) > -1 || timePart.indexOf( '-' ) > -1) {\n\t\t\t\t\ttzArray = timePart.split( 'Z' ); // incase of incorrect use of Z\n\t\t\t\t\ttimePart = tzArray[0];\n\t\t\t\t\ttimeZonePart = tzArray[1];\n\n\t\t\t\t\t// timezone\n\t\t\t\t\tif(timePart.indexOf( '+' ) > -1 || timePart.indexOf( '-' ) > -1) {\n\t\t\t\t\t\tposition = 0;\n\n\t\t\t\t\t\tif(timePart.indexOf( '+' ) > -1) {\n\t\t\t\t\t\t\tposition = timePart.indexOf( '+' );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tposition = timePart.indexOf( '-' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttimeZonePart = timePart.substring( position, timePart.length );\n\t\t\t\t\t\ttimePart = timePart.substring( 0, position );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tdatePart = dateString;\n\t\t\t}\n\n\t\t\tif(datePart !== '') {\n\t\t\t\tthis.parseDate( datePart );\n\t\t\t\tif(timePart !== '') {\n\t\t\t\t\tthis.parseTime( timePart );\n\t\t\t\t\tif(timeZonePart !== '') {\n\t\t\t\t\t\tthis.parseTimeZone( timeZonePart );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.toString( this.format );\n\t\t},\n\n\n\t\t/**\n\t\t * parses text to find just the date element of an ISO date/time string i.e. 2008-05-01\n\t\t *\n\t\t * @param  {String} dateString\n\t\t * @param  {String} format\n\t\t * @return {String}\n\t\t */\n\t\tparseDate: function( dateString, format ) {\n\n\t\t\tthis.setFormat(format);\n\t\t\tthis.clearDate();\n\t\t\tvar parts = [];\n\n\t\t\t// discover timezone separtor for auto profile // default is ':'\n\t\t\tif(dateString.indexOf('-') === -1) {\n\t\t\t\tthis.autoProfile.tsep = '';\n\t\t\t}\n\n\t\t\t// YYYY-DDD\n\t\t\tparts = dateString.match( /(\\d\\d\\d\\d)-(\\d\\d\\d)/ );\n\t\t\tif(parts) {\n\t\t\t\tif(parts[1]) {\n\t\t\t\t\tthis.dY = parts[1];\n\t\t\t\t}\n\t\t\t\tif(parts[2]) {\n\t\t\t\t\tthis.dDDD = parts[2];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(this.dDDD === -1) {\n\t\t\t\t// YYYY-MM-DD ie 2008-05-01 and YYYYMMDD ie 20080501\n\t\t\t\tparts = dateString.match( /(\\d\\d\\d\\d)?-?(\\d\\d)?-?(\\d\\d)?/ );\n\t\t\t\tif(parts[1]) {\n\t\t\t\t\tthis.dY = parts[1];\n\t\t\t\t}\n\t\t\t\tif(parts[2]) {\n\t\t\t\t\tthis.dM = parts[2];\n\t\t\t\t}\n\t\t\t\tif(parts[3]) {\n\t\t\t\t\tthis.dD = parts[3];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.toString(this.format);\n\t\t},\n\n\n\t\t/**\n\t\t * parses text to find just the time element of an ISO date/time string i.e. 13:30:45\n\t\t *\n\t\t * @param  {String} timeString\n\t\t * @param  {String} format\n\t\t * @return {String}\n\t\t */\n\t\tparseTime: function( timeString, format ) {\n\n\t\t\tthis.setFormat(format);\n\t\t\tthis.clearTime();\n\t\t\tvar parts = [];\n\n\t\t\t// discover date separtor for auto profile // default is ':'\n\t\t\tif(timeString.indexOf(':') === -1) {\n\t\t\t\tthis.autoProfile.tsep = '';\n\t\t\t}\n\n\t\t\t// finds timezone HH:MM:SS and HHMMSS  ie 13:30:45, 133045 and 13:30:45.0135\n\t\t\tparts = timeString.match( /(\\d\\d)?:?(\\d\\d)?:?(\\d\\d)?.?([0-9]+)?/ );\n\t\t\tif(parts[1]) {\n\t\t\t\tthis.tH = parts[1];\n\t\t\t}\n\t\t\tif(parts[2]) {\n\t\t\t\tthis.tM = parts[2];\n\t\t\t}\n\t\t\tif(parts[3]) {\n\t\t\t\tthis.tS = parts[3];\n\t\t\t}\n\t\t\tif(parts[4]) {\n\t\t\t\tthis.tD = parts[4];\n\t\t\t}\n\t\t\treturn this.toTimeString(this.format);\n\t\t},\n\n\n\t\t/**\n\t\t * parses text to find just the time element of an ISO date/time string i.e. +08:00\n\t\t *\n\t\t * @param  {String} timeString\n\t\t * @param  {String} format\n\t\t * @return {String}\n\t\t */\n\t\tparseTimeZone: function( timeString, format ) {\n\n\t\t\tthis.setFormat(format);\n\t\t\tthis.clearTimeZone();\n\t\t\tvar parts = [];\n\n\t\t\tif(timeString.toLowerCase() === 'z'){\n\t\t\t\tthis.z = true;\n\t\t\t\t// set case for z\n\t\t\t\tthis.autoProfile.tzZulu = (timeString === 'z')? 'z' : 'Z';\n\t\t\t}else{\n\n\t\t\t\t// discover timezone separtor for auto profile // default is ':'\n\t\t\t\tif(timeString.indexOf(':') === -1) {\n\t\t\t\t\tthis.autoProfile.tzsep = '';\n\t\t\t\t}\n\n\t\t\t\t// finds timezone +HH:MM and +HHMM  ie +13:30 and +1330\n\t\t\t\tparts = timeString.match( /([\\-\\+]{1})?(\\d\\d)?:?(\\d\\d)?/ );\n\t\t\t\tif(parts[1]) {\n\t\t\t\t\tthis.tzPN = parts[1];\n\t\t\t\t}\n\t\t\t\tif(parts[2]) {\n\t\t\t\t\tthis.tzH = parts[2];\n\t\t\t\t}\n\t\t\t\tif(parts[3]) {\n\t\t\t\t\tthis.tzM = parts[3];\n\t\t\t\t}\n\n\n\t\t\t}\n\t\t\tthis.tzZulu = 'z';\n\t\t\treturn this.toTimeString( this.format );\n\t\t},\n\n\n\t\t/**\n\t\t * returns ISO date/time string in W3C Note, RFC 3339, HTML5, or auto profile\n\t\t *\n\t\t * @param  {String} format\n\t\t * @return {String}\n\t\t */\n\t\ttoString: function( format ) {\n\n\t\t\tthis.setFormat(format);\n\t\t\tvar output = '';\n\n\t\t\tif(this.dY  > -1) {\n\t\t\t\toutput = this.dY;\n\t\t\t\tif(this.dM > 0 && this.dM < 13) {\n\t\t\t\t\toutput += this.dsep + this.dM;\n\t\t\t\t\tif(this.dD > 0 && this.dD < 32) {\n\t\t\t\t\t\toutput += this.dsep + this.dD;\n\t\t\t\t\t\tif(this.tH > -1 && this.tH < 25) {\n\t\t\t\t\t\t\toutput += this.sep + this.toTimeString( this.format );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(this.dDDD > -1) {\n\t\t\t\t\toutput += this.dsep + this.dDDD;\n\t\t\t\t}\n\t\t\t} else if(this.tH > -1) {\n\t\t\t\toutput += this.toTimeString( this.format );\n\t\t\t}\n\n\t\t\treturn output;\n\t\t},\n\n\n\t\t/**\n\t\t * returns just the time string element of an ISO date/time\n\t\t * in W3C Note, RFC 3339, HTML5, or auto profile\n\t\t *\n\t\t * @param  {String} format\n\t\t * @return {String}\n\t\t */\n\t\ttoTimeString: function( format ) {\n\n\t\t\tthis.setFormat(format);\n\t\t\tvar out = '';\n\n\t\t\t// time can only be created with a full date\n\t\t\tif(this.tH) {\n\t\t\t\tif(this.tH > -1 && this.tH < 25) {\n\t\t\t\t\tout += this.tH;\n\t\t\t\t\tif(this.tM > -1 && this.tM < 61){\n\t\t\t\t\t\tout += this.tsep + this.tM;\n\t\t\t\t\t\tif(this.tS > -1 && this.tS < 61){\n\t\t\t\t\t\t\tout += this.tsep + this.tS;\n\t\t\t\t\t\t\tif(this.tD > -1){\n\t\t\t\t\t\t\t\tout += '.' + this.tD;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\n\t\t\t\t\t// time zone offset\n\t\t\t\t\tif(this.z) {\n\t\t\t\t\t\tout += this.tzZulu;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(this.tzH && this.tzH > -1 && this.tzH < 25) {\n\t\t\t\t\t\t\tout += this.tzPN + this.tzH;\n\t\t\t\t\t\t\tif(this.tzM > -1 && this.tzM < 61){\n\t\t\t\t\t\t\t\tout += this.tzsep + this.tzM;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * set the current profile to W3C Note, RFC 3339, HTML5, or auto profile\n\t\t *\n\t\t * @param  {String} format\n\t\t */\n\t\tsetFormat: function( format ){\n\t\t\tif(format){\n\t\t\t\tthis.format = format;\n\t\t\t}\n\t\t\tthis.setFormatSep();\n\t\t},\n\n\n\t\t/**\n\t\t * set the current profile to W3C Note, RFC 3339, HTML5, or auto profile\n\t\t *\n\t\t */\n\t\tsetFormatSep: function() {\n\t\t\tswitch( this.format.toLowerCase() ) {\n\t\t\t\tcase 'microformat2':\n\t\t\t\t\tthis.sep = ' ';\n\t\t\t\t\tthis.dsep = '-';\n\t\t\t\t\tthis.tsep = ':';\n\t\t\t\t\tthis.tzsep = '';\n\t\t\t\t\tthis.tzZulu = 'Z';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rfc3339':\n\t\t\t\t\tthis.sep = 'T';\n\t\t\t\t\tthis.dsep = '';\n\t\t\t\t\tthis.tsep = '';\n\t\t\t\t\tthis.tzsep = '';\n\t\t\t\t\tthis.tzZulu = 'Z';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'w3c':\n\t\t\t\t\tthis.sep = 'T';\n\t\t\t\t\tthis.dsep = '-';\n\t\t\t\t\tthis.tsep = ':';\n\t\t\t\t\tthis.tzsep = ':';\n\t\t\t\t\tthis.tzZulu = 'Z';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'html5':\n\t\t\t\t\tthis.sep = ' ';\n\t\t\t\t\tthis.dsep = '-';\n\t\t\t\t\tthis.tsep = ':';\n\t\t\t\t\tthis.tzsep = ':';\n\t\t\t\t\tthis.tzZulu = 'Z';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// auto - defined by format of input string\n\t\t\t\t\tthis.sep = this.autoProfile.sep;\n\t\t\t\t\tthis.dsep = this.autoProfile.dsep;\n\t\t\t\t\tthis.tsep = this.autoProfile.tsep;\n\t\t\t\t\tthis.tzsep = this.autoProfile.tzsep;\n\t\t\t\t\tthis.tzZulu = this.autoProfile.tzZulu;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * does current data contain a full date i.e. 2015-03-23\n\t\t *\n\t\t * @return {Boolean}\n\t\t */\n\t\thasFullDate: function() {\n\t\t\treturn(this.dY !== -1 && this.dM !== -1 && this.dD !== -1);\n\t\t},\n\n\n\t\t/**\n\t\t * does current data contain a minimum date which is just a year number i.e. 2015\n\t\t *\n\t\t * @return {Boolean}\n\t\t */\n\t\thasDate: function() {\n\t\t\treturn(this.dY !== -1);\n\t\t},\n\n\n\t\t/**\n\t\t * does current data contain a minimum time which is just a hour number i.e. 13\n\t\t *\n\t\t * @return {Boolean}\n\t\t */\n\t\thasTime: function() {\n\t\t\treturn(this.tH !== -1);\n\t\t},\n\n\t\t/**\n\t\t * does current data contain a minimum timezone i.e. -1 || +1 || z\n\t\t *\n\t\t * @return {Boolean}\n\t\t */\n\t\thasTimeZone: function() {\n\t\t\treturn(this.tzH !== -1);\n\t\t}\n\n\t};\n\n\tmodules.ISODate.prototype.constructor = modules.ISODate;\n\n\n\tmodules.dates = {\n\n\n\t\t/**\n\t\t * does text contain am\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Boolean}\n\t\t */\n\t\thasAM: function( text ) {\n\t\t\ttext = text.toLowerCase();\n\t\t\treturn(text.indexOf('am') > -1 || text.indexOf('a.m.') > -1);\n\t\t},\n\n\n\t\t/**\n\t\t * does text contain pm\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Boolean}\n\t\t */\n\t\thasPM: function( text ) {\n\t\t\ttext = text.toLowerCase();\n\t\t\treturn(text.indexOf('pm') > -1 || text.indexOf('p.m.') > -1);\n\t\t},\n\n\n\t\t/**\n\t\t * remove am and pm from text and return it\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {String}\n\t\t */\n\t\tremoveAMPM: function( text ) {\n\t\t\treturn text.replace('pm', '').replace('p.m.', '').replace('am', '').replace('a.m.', '');\n\t\t},\n\n\n\t   /**\n\t\t * simple test of whether ISO date string is a duration  i.e.  PY17M or PW12\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Boolean}\n\t\t */\n\t\tisDuration: function( text ) {\n\t\t\tif(modules.utils.isString( text )){\n\t\t\t\ttext = text.toLowerCase();\n\t\t\t\tif(modules.utils.startWith(text, 'p') ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\n\t   /**\n\t\t * is text a time or timezone\n\t\t * i.e. HH-MM-SS or z+-HH-MM-SS 08:43 | 15:23:00:0567 | 10:34pm | 10:34 p.m. | +01:00:00 | -02:00 | z15:00 | 0843\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Boolean}\n\t\t */\n\t\tisTime: function( text ) {\n\t\t\tif(modules.utils.isString(text)){\n\t\t\t\ttext = text.toLowerCase();\n\t\t\t\ttext = modules.utils.trim( text );\n\t\t\t\t// start with timezone char\n\t\t\t\tif( text.match(':') && ( modules.utils.startWith(text, 'z') || modules.utils.startWith(text, '-')  || modules.utils.startWith(text, '+') )) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// has ante meridiem or post meridiem\n\t\t\t\tif( text.match(/^[0-9]/) &&\n\t\t\t\t\t( this.hasAM(text) || this.hasPM(text) )) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// contains time delimiter but not datetime delimiter\n\t\t\t\tif( text.match(':') && !text.match(/t|\\s/) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// if it's a number of 2, 4 or 6 chars\n\t\t\t\tif(modules.utils.isNumber(text)){\n\t\t\t\t\tif(text.length === 2 || text.length === 4 || text.length === 6){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\n\t\t/**\n\t\t * parses a time from text and returns 24hr time string\n\t\t * i.e. 5:34am = 05:34:00 and 1:52:04p.m. = 13:52:04\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {String}\n\t\t */\n\t\tparseAmPmTime: function( text ) {\n\t\t\tvar out = text,\n\t\t\t\ttimes = [];\n\n\t\t\t// if the string has a text : or am or pm\n\t\t\tif(modules.utils.isString(out)) {\n\t\t\t\t//text = text.toLowerCase();\n\t\t\t\ttext = text.replace(/[ ]+/g, '');\n\n\t\t\t\tif(text.match(':') || this.hasAM(text) || this.hasPM(text)) {\n\n\t\t\t\t\tif(text.match(':')) {\n\t\t\t\t\t\ttimes = text.split(':');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// single number text i.e. 5pm\n\t\t\t\t\t\ttimes[0] = text;\n\t\t\t\t\t\ttimes[0] = this.removeAMPM(times[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// change pm hours to 24hr number\n\t\t\t\t\tif(this.hasPM(text)) {\n\t\t\t\t\t\tif(times[0] < 12) {\n\t\t\t\t\t\t\ttimes[0] = parseInt(times[0], 10) + 12;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// add leading zero's where needed\n\t\t\t\t\tif(times[0] && times[0].length === 1) {\n\t\t\t\t\t\ttimes[0] = '0' + times[0];\n\t\t\t\t\t}\n\n\t\t\t\t\t// rejoin text elements together\n\t\t\t\t\tif(times[0]) {\n\t\t\t\t\t\ttext = times.join(':');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// remove am/pm strings\n\t\t\treturn this.removeAMPM(text);\n\t\t},\n\n\n\t   /**\n\t\t * overlays a time on a date to return the union of the two\n\t\t *\n\t\t * @param  {String} date\n\t\t * @param  {String} time\n\t\t * @param  {String} format ( Modules.ISODate profile format )\n\t\t * @return {Object} Modules.ISODate\n\t\t */\n\t\tdateTimeUnion: function(date, time, format) {\n\t\t\tvar isodate = new modules.ISODate(date, format),\n\t\t\t\tisotime = new modules.ISODate();\n\n\t\t\tisotime.parseTime(this.parseAmPmTime(time), format);\n\t\t\tif(isodate.hasFullDate() && isotime.hasTime()) {\n\t\t\t\tisodate.tH = isotime.tH;\n\t\t\t\tisodate.tM = isotime.tM;\n\t\t\t\tisodate.tS = isotime.tS;\n\t\t\t\tisodate.tD = isotime.tD;\n\t\t\t\treturn isodate;\n\t\t\t} else {\n\t\t\t\tif(isodate.hasFullDate()){\n\t\t\t\t\treturn isodate;\n\t\t\t\t}\n\t\t\t\treturn new modules.ISODate();\n\t\t\t}\n\t\t},\n\n\n\t   /**\n\t\t * concatenate an array of date and time text fragments to create an ISODate object\n\t\t * used for microformat value and value-title rules\n\t\t *\n\t\t * @param  {Array} arr ( Array of Strings )\n\t\t * @param  {String} format ( Modules.ISODate profile format )\n\t\t * @return {Object} Modules.ISODate\n\t\t */\n\t\tconcatFragments: function (arr, format) {\n\t\t\tvar out = new modules.ISODate(),\n\t\t\t\ti = 0,\n\t\t\t\tvalue = '';\n\n\t\t\t// if the fragment already contains a full date just return it once\n\t\t\tif(arr[0].toUpperCase().match('T')) {\n\t\t\t\treturn new modules.ISODate(arr[0], format);\n\t\t\t}else{\n\t\t\t\tfor(i = 0; i < arr.length; i++) {\n\t\t\t\t\tvalue = arr[i];\n\n\t\t\t\t\t// date pattern\n\t\t\t\t\tif( value.charAt(4) === '-' && out.hasFullDate() === false ){\n\t\t\t\t\t\tout.parseDate(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t// time pattern\n\t\t\t\t\tif( (value.indexOf(':') > -1 || modules.utils.isNumber( this.parseAmPmTime(value) )) && out.hasTime() === false ) {\n\t\t\t\t\t\t// split time and timezone\n\t\t\t\t\t\tvar items = this.splitTimeAndZone(value);\n\t\t\t\t\t\tvalue = items[0];\n\n\t\t\t\t\t\t// parse any use of am/pm\n\t\t\t\t\t\tvalue = this.parseAmPmTime(value);\n\t\t\t\t\t\tout.parseTime(value);\n\n\t\t\t\t\t\t// parse any timezone\n\t\t\t\t\t\tif(items.length > 1){\n\t\t\t\t\t\t\tout.parseTimeZone(items[1], format);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// timezone pattern\n\t\t\t\t\tif(value.charAt(0) === '-' || value.charAt(0) === '+' || value.toUpperCase() === 'Z') {\n\t\t\t\t\t\tif( out.hasTimeZone() === false ){\n\t\t\t\t\t\t\tout.parseTimeZone(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// alway imply minutes\n\t\t\t\tif(out.tM === -1){\n\t\t\t\t\tout.tM = '00';\n\t\t\t\t}\n\t\t\t\treturn out;\n\t\t\t}\n\t\t},\n\n\n\t   /**\n\t\t * parses text by splitting it into an array of time and timezone strings\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {Array} Modules.ISODate\n\t\t */\n\t\tsplitTimeAndZone: function ( text ){\n\t\t   var out = [text],\n\t\t\t   chars = ['-','+','z','Z'],\n\t\t\t   i = chars.length;\n\n\t\t\twhile (i--) {\n\t\t\t  if(text.indexOf(chars[i]) > -1){\n\t\t\t\t  out[0] = text.slice( 0, text.indexOf(chars[i]) );\n\t\t\t\t  out.push( text.slice( text.indexOf(chars[i]) ) );\n\t\t\t\t  break;\n\t\t\t   }\n\t\t\t}\n\t\t   return out;\n\t\t}\n\n\t};\n\n\n\tmodules.text = {\n\n\t\t// normalised or whitespace or whitespacetrimmed\n\t\ttextFormat: 'whitespacetrimmed',\n\n\t\t// block level tags, used to add line returns\n\t\tblockLevelTags: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'hr', 'pre', 'table',\n\t\t\t'address', 'article', 'aside', 'blockquote', 'caption', 'col', 'colgroup', 'dd', 'div',\n\t\t\t'dt', 'dir', 'fieldset', 'figcaption', 'figure', 'footer', 'form',  'header', 'hgroup', 'hr',\n\t\t\t'li', 'map', 'menu', 'nav', 'optgroup', 'option', 'section', 'tbody', 'testarea',\n\t\t\t'tfoot', 'th', 'thead', 'tr', 'td', 'ul', 'ol', 'dl', 'details'],\n\n\t\t// tags to exclude\n\t\texcludeTags: ['noframe', 'noscript', 'template', 'script', 'style', 'frames', 'frameset'],\n\n\n\t\t/**\n\t\t * parses the text from the DOM Node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @param  {String} textFormat\n\t\t * @return {String}\n\t\t */\n\t\tparse: function(doc, node, textFormat){\n\t\t\tvar out;\n\t\t\tthis.textFormat = (textFormat)? textFormat : this.textFormat;\n\t\t\tif(this.textFormat === 'normalised'){\n\t\t\t\tout = this.walkTreeForText( node );\n\t\t\t\tif(out !== undefined){\n\t\t\t\t\treturn this.normalise( doc, out );\n\t\t\t\t}else{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tvar clonedNode = modules.domUtils.clone(node);\n\t\t\t\tvar trimmedNode = modules.domUtils.removeDescendantsByTagName( clonedNode, this.excludeTags );\n\n\t\t\t   return this.formatText( doc, modules.domUtils.textContent(trimmedNode), this.textFormat );\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * parses the text from a html string\n\t\t *\n\t\t * @param  {DOM Document} doc\n\t\t * @param  {String} text\n\t\t * @param  {String} textFormat\n\t\t * @return {String}\n\t\t */\n\t\tparseText: function( doc, text, textFormat ){\n\t\t   var node = modules.domUtils.createNodeWithText( 'div', text );\n\t\t   return this.parse( doc, node, textFormat );\n\t\t},\n\n\n\t\t/**\n\t\t * parses the text from a html string - only for whitespace or whitespacetrimmed formats\n\t\t *\n\t\t * @param  {String} text\n\t\t * @param  {String} textFormat\n\t\t * @return {String}\n\t\t */\n\t\tformatText: function( doc, text, textFormat ){\n\t\t   this.textFormat = (textFormat)? textFormat : this.textFormat;\n\t\t   if(text){\n\t\t\t  var out = text\n\t\t\t  if(this.textFormat === 'whitespacetrimmed') {\n\t\t\t\t out = modules.utils.trimWhitespace( out );\n\t\t\t  }\n\t\t\t  return out;\n\t\t   }else{\n\t\t\t  return '';\n\t\t   }\n\t\t},\n\n\n\t\t/**\n\t\t * normalises whitespace in given text\n\t\t *\n\t\t * @param  {String} text\n\t\t * @return {String}\n\t\t */\n\t\tnormalise: function( doc, text ){\n\t\t\ttext = text.replace( /&nbsp;/g, ' ') ;    // exchanges html entity for space into space char\n\t\t\ttext = modules.utils.collapseWhiteSpace( text );     // removes linefeeds, tabs and addtional spaces\n\t\t\ttext = modules.domUtils.decodeEntities( doc, text );  // decode HTML entities\n\t\t\ttext = text.replace( '–', '-' );          // correct dash decoding\n\t\t\treturn modules.utils.trim( text );\n\t\t},\n\n\n\t\t/**\n\t\t * walks DOM tree parsing the text from DOM Nodes\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\twalkTreeForText: function( node ) {\n\t\t\tvar out = '',\n\t\t\t\tj = 0;\n\n\t\t\tif(node.tagName && this.excludeTags.indexOf( node.tagName.toLowerCase() ) > -1){\n\t\t\t\treturn out;\n\t\t\t}\n\n\t\t\t// if node is a text node get its text\n\t\t\tif(node.nodeType && node.nodeType === 3){\n\t\t\t\tout += modules.domUtils.getElementText( node );\n\t\t\t}\n\n\t\t\t// get the text of the child nodes\n\t\t\tif(node.childNodes && node.childNodes.length > 0){\n\t\t\t\tfor (j = 0; j < node.childNodes.length; j++) {\n\t\t\t\t\tvar text = this.walkTreeForText( node.childNodes[j] );\n\t\t\t\t\tif(text !== undefined){\n\t\t\t\t\t\tout += text;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if it's a block level tag add an additional space at the end\n\t\t\tif(node.tagName && this.blockLevelTags.indexOf( node.tagName.toLowerCase() ) !== -1){\n\t\t\t\tout += ' ';\n\t\t\t}\n\n\t\t\treturn (out === '')? undefined : out ;\n\t\t}\n\n\t};\n\n\n\tmodules.html = {\n\n\t\t// elements which are self-closing\n\t\tselfClosingElt: ['area', 'base', 'br', 'col', 'hr', 'img', 'input', 'link', 'meta', 'param', 'command', 'keygen', 'source'],\n\n\n\t\t/**\n\t\t * parse the html string from DOM Node\n\t\t *\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\tparse: function( node ){\n\t\t\tvar out = '',\n\t\t\t\tj = 0;\n\n\t\t\t// we do not want the outer container\n\t\t\tif(node.childNodes && node.childNodes.length > 0){\n\t\t\t\tfor (j = 0; j < node.childNodes.length; j++) {\n\t\t\t\t\tvar text = this.walkTreeForHtml( node.childNodes[j] );\n\t\t\t\t\tif(text !== undefined){\n\t\t\t\t\t\tout += text;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn out;\n\t\t},\n\n\n\t\t/**\n\t\t * walks the DOM tree parsing the html string from the nodes\n\t\t *\n\t\t * @param  {DOM Document} doc\n\t\t * @param  {DOM Node} node\n\t\t * @return {String}\n\t\t */\n\t\twalkTreeForHtml: function( node ) {\n\t\t\tvar out = '',\n\t\t\t\tj = 0;\n\n\t\t\t// if node is a text node get its text\n\t\t\tif(node.nodeType && node.nodeType === 3){\n\t\t\t\t//out += modules.domUtils.getElementText( node );\n\t\t\t\tvar containerNode = modules.domUtils.createNode('div');\n\t\t\t\tmodules.domUtils.appendChild(containerNode, modules.domUtils.clone(node));\n\t\t\t\tout += modules.domUtils.innerHTML(containerNode);\n\t\t\t}\n\n\n\t\t\t// exclude text which has been added with include pattern  -\n\t\t\tif(node.nodeType && node.nodeType === 1 && modules.domUtils.hasAttribute(node, 'data-include') === false){\n\n\t\t\t\t// begin tag\n\t\t\t\tout += '<' + node.tagName.toLowerCase();\n\n\t\t\t\t// add attributes\n\t\t\t\tvar attrs = modules.domUtils.getOrderedAttributes(node);\n\t\t\t\tfor (j = 0; j < attrs.length; j++) {\n\t\t\t\t\tout += ' ' + attrs[j].name +  '=' + '\"' + attrs[j].value + '\"';\n\t\t\t\t}\n\n\t\t\t\tif(this.selfClosingElt.indexOf(node.tagName.toLowerCase()) === -1){\n\t\t\t\t\tout += '>';\n\t\t\t\t}\n\n\t\t\t\t// get the text of the child nodes\n\t\t\t\tif(node.childNodes && node.childNodes.length > 0){\n\n\t\t\t\t\tfor (j = 0; j < node.childNodes.length; j++) {\n\t\t\t\t\t\tvar text = this.walkTreeForHtml( node.childNodes[j] );\n\t\t\t\t\t\tif(text !== undefined){\n\t\t\t\t\t\t\tout += text;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// end tag\n\t\t\t\tif(this.selfClosingElt.indexOf(node.tagName.toLowerCase()) > -1){\n\t\t\t\t\tout += ' />';\n\t\t\t\t}else{\n\t\t\t\t\tout += '</' + node.tagName.toLowerCase() + '>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn (out === '')? undefined : out;\n\t\t}\n\n\n\t};\n\n\n\tmodules.maps['h-adr'] = {\n\t\troot: 'adr',\n\t\tname: 'h-adr',\n\t\tproperties: {\n\t\t\t'post-office-box': {},\n\t\t\t'street-address': {},\n\t\t\t'extended-address': {},\n\t\t\t'locality': {},\n\t\t\t'region': {},\n\t\t\t'postal-code': {},\n\t\t\t'country-name': {}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-card'] =  {\n\t\troot: 'vcard',\n\t\tname: 'h-card',\n\t\tproperties: {\n\t\t\t'fn': {\n\t\t\t\t'map': 'p-name'\n\t\t\t},\n\t\t\t'adr': {\n\t\t\t\t'map': 'p-adr',\n\t\t\t\t'uf': ['h-adr']\n\t\t\t},\n\t\t\t'agent': {\n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'bday': {\n\t\t\t\t'map': 'dt-bday'\n\t\t\t},\n\t\t\t'class': {},\n\t\t\t'category': {\n\t\t\t\t'map': 'p-category',\n\t\t\t\t'relAlt': ['tag']\n\t\t\t},\n\t\t\t'email': {\n\t\t\t\t'map': 'u-email'\n\t\t\t},\n\t\t\t'geo': {\n\t\t\t\t'map': 'p-geo', \n\t\t\t\t'uf': ['h-geo']\n\t\t\t},\n\t\t\t'key': {\n\t\t\t\t'map': 'u-key'\n\t\t\t},\n\t\t\t'label': {},\n\t\t\t'logo': {\n\t\t\t\t'map': 'u-logo'\n\t\t\t},\n\t\t\t'mailer': {},\n\t\t\t'honorific-prefix': {},\n\t\t\t'given-name': {},\n\t\t\t'additional-name': {},\n\t\t\t'family-name': {},\n\t\t\t'honorific-suffix': {},\n\t\t\t'nickname': {},\n\t\t\t'note': {}, // could be html i.e. e-note\n\t\t\t'org': {},\n\t\t\t'p-organization-name': {},\n\t\t\t'p-organization-unit': {},\n\t\t\t'photo': {\n\t\t\t\t'map': 'u-photo'\n\t\t\t},\n\t\t\t'rev': {\n\t\t\t\t'map': 'dt-rev'\n\t\t\t},\n\t\t\t'role': {},\n\t\t\t'sequence': {},\n\t\t\t'sort-string': {},\n\t\t\t'sound': {\n\t\t\t\t'map': 'u-sound'\n\t\t\t},\n\t\t\t'title': {\n\t\t\t\t'map': 'p-job-title'\n\t\t\t},\n\t\t\t'tel': {},\n\t\t\t'tz': {},\n\t\t\t'uid': {\n\t\t\t\t'map': 'u-uid'\n\t\t\t},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url'\n\t\t\t}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-entry'] = {\n\t\troot: 'hentry',\n\t\tname: 'h-entry',\n\t\tproperties: {\n\t\t\t'entry-title': {\n\t\t\t\t'map': 'p-name'\n\t\t\t},\n\t\t\t'entry-summary': {\n\t\t\t\t'map': 'p-summary'\n\t\t\t},\n\t\t\t'entry-content': {\n\t\t\t\t'map': 'e-content'\n\t\t\t},\n\t\t\t'published': {\n\t\t\t\t'map': 'dt-published'\n\t\t\t},\n\t\t\t'updated': {\n\t\t\t\t'map': 'dt-updated'\n\t\t\t},\n\t\t\t'author': { \n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'category': {\n\t\t\t\t'map': 'p-category',\n\t\t\t\t'relAlt': ['tag']\n\t\t\t},\n\t\t\t'geo': {\n\t\t\t\t'map': 'p-geo', \n\t\t\t\t'uf': ['h-geo']\n\t\t\t},\n\t\t\t'latitude': {},\n\t\t\t'longitude': {},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url',\n\t\t\t\t'relAlt': ['bookmark']\n\t\t\t}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-event'] = {  \n\t\troot: 'vevent',\n\t\tname: 'h-event',\n\t\tproperties: {\n\t\t\t'summary': {\n\t\t\t\t'map': 'p-name'\n\t\t\t},\n\t\t\t'dtstart': {\n\t\t\t\t'map': 'dt-start'\n\t\t\t},\n\t\t\t'dtend': {\n\t\t\t\t'map': 'dt-end'\n\t\t\t},\n\t\t\t'description': {},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url'\n\t\t\t},\n\t\t\t'category': {\n\t\t\t\t'map': 'p-category',\n\t\t\t\t'relAlt': ['tag']\n\t\t\t},\n\t\t\t'location': {\n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'geo': {\n\t\t\t\t'uf': ['h-geo']\n\t\t\t},\n\t\t\t'latitude': {},\n\t\t\t'longitude': {},\n\t\t\t'duration': {\n\t\t\t\t'map': 'dt-duration'\n\t\t\t},\n\t\t\t'contact': {\n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'organizer': {\n\t\t\t\t'uf': ['h-card']},\n\t\t\t'attendee': {\n\t\t\t\t'uf': ['h-card']},\n\t\t\t'uid': {\n\t\t\t\t'map': 'u-uid'\n\t\t\t},\n\t\t\t'attach': {\n\t\t\t\t'map': 'u-attach'\n\t\t\t},\n\t\t\t'status': {},\n\t\t\t'rdate': {}, \n\t\t\t'rrule': {}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-feed'] = {\n\t\troot: 'hfeed',\n\t\tname: 'h-feed',\n\t\tproperties: {\n\t\t\t'category': {\n\t\t\t\t'map': 'p-category',\n\t\t\t\t'relAlt': ['tag']\n\t\t\t},\n\t\t\t'summary': {\n\t\t\t\t'map': 'p-summary'\n\t\t\t},\n\t\t\t'author': { \n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url'\n\t\t\t},\n\t\t\t'photo': {\n\t\t\t\t'map': 'u-photo'\n\t\t\t},\n\t\t}\n\t};\n\n\n\tmodules.maps['h-geo'] = {\n\t\troot: 'geo',\n\t\tname: 'h-geo',\n\t\tproperties: {\n\t\t\t'latitude': {},\n\t\t\t'longitude': {}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-item'] = {\n\t\troot: 'item',\n\t\tname: 'h-item',\n\t\tsubTree: false,\n\t\tproperties: {\n\t\t\t'fn': {\n\t\t\t\t'map': 'p-name'\n\t\t\t},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url'\n\t\t\t},\n\t\t\t'photo': {\n\t\t\t\t'map': 'u-photo'\n\t\t\t}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-listing'] = {\n\t\t\troot: 'hlisting',\n\t\t\tname: 'h-listing',\n\t\t\tproperties: {\n\t\t\t\t'version': {},\n\t\t\t\t'lister': {\n\t\t\t\t\t'uf': ['h-card']\n\t\t\t\t},\n\t\t\t\t'dtlisted': {\n\t\t\t\t\t'map': 'dt-listed'\n\t\t\t\t},\n\t\t\t\t'dtexpired': {\n\t\t\t\t\t'map': 'dt-expired'\n\t\t\t\t},\n\t\t\t\t'location': {},\n\t\t\t\t'price': {},\n\t\t\t\t'item': {\n\t\t\t\t\t'uf': ['h-card','a-adr','h-geo']\n\t\t\t\t},\n\t\t\t\t'summary': {\n\t\t\t\t\t'map': 'p-name'\n\t\t\t\t},\n\t\t\t\t'description': {\n\t\t\t\t\t'map': 'e-description'\n\t\t\t\t},\n\t\t\t\t'listing': {}\n\t\t\t}\n\t\t};\n\n\n\tmodules.maps['h-news'] = {\n\t\t\troot: 'hnews',\n\t\t\tname: 'h-news',\n\t\t\tproperties: {\n\t\t\t\t'entry': {\n\t\t\t\t\t'uf': ['h-entry']\n\t\t\t\t},\n\t\t\t\t'geo': {\n\t\t\t\t\t'uf': ['h-geo']\n\t\t\t\t},\n\t\t\t\t'latitude': {},\n\t\t\t\t'longitude': {},\n\t\t\t\t'source-org': {\n\t\t\t\t\t'uf': ['h-card']\n\t\t\t\t},\n\t\t\t\t'dateline': {\n\t\t\t\t\t'uf': ['h-card']\n\t\t\t\t},\n\t\t\t\t'item-license': {\n\t\t\t\t\t'map': 'u-item-license'\n\t\t\t\t},\n\t\t\t\t'principles': {\n\t\t\t\t\t'map': 'u-principles', \n\t\t\t\t\t'relAlt': ['principles']\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n\tmodules.maps['h-org'] = {\n\t\troot: 'h-x-org',  // drop this from v1 as it causes issue with fn org hcard pattern\n\t\tname: 'h-org',\n\t\tchildStructure: true,\n\t\tproperties: {\n\t\t\t'organization-name': {},\n\t\t\t'organization-unit': {}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-product'] = {\n\t\t\troot: 'hproduct',\n\t\t\tname: 'h-product',\n\t\t\tproperties: {\n\t\t\t\t'brand': {\n\t\t\t\t\t'uf': ['h-card']\n\t\t\t\t},\n\t\t\t\t'category': {\n\t\t\t\t\t'map': 'p-category',\n\t\t\t\t\t'relAlt': ['tag']\n\t\t\t\t},\n\t\t\t\t'price': {},\n\t\t\t\t'description': {\n\t\t\t\t\t'map': 'e-description'\n\t\t\t\t},\n\t\t\t\t'fn': {\n\t\t\t\t\t'map': 'p-name'\n\t\t\t\t},\n\t\t\t\t'photo': {\n\t\t\t\t\t'map': 'u-photo'\n\t\t\t\t},\n\t\t\t\t'url': {\n\t\t\t\t\t'map': 'u-url'\n\t\t\t\t},\n\t\t\t\t'review': {\n\t\t\t\t\t'uf': ['h-review', 'h-review-aggregate']\n\t\t\t\t},\n\t\t\t\t'listing': {\n\t\t\t\t\t'uf': ['h-listing']\n\t\t\t\t},\n\t\t\t\t'identifier': {\n\t\t\t\t\t'map': 'u-identifier'\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n\tmodules.maps['h-recipe'] = {\n\t\t\troot: 'hrecipe',\n\t\t\tname: 'h-recipe',\n\t\t\tproperties: {\n\t\t\t\t'fn': {\n\t\t\t\t\t'map': 'p-name'\n\t\t\t\t},\n\t\t\t\t'ingredient': {\n\t\t\t\t\t'map': 'e-ingredient'\n\t\t\t\t},\n\t\t\t\t'yield': {},\n\t\t\t\t'instructions': {\n\t\t\t\t\t'map': 'e-instructions'\n\t\t\t\t},\n\t\t\t\t'duration': {\n\t\t\t\t\t'map': 'dt-duration'\n\t\t\t\t},\n\t\t\t\t'photo': {\n\t\t\t\t\t'map': 'u-photo'\n\t\t\t\t},\n\t\t\t\t'summary': {},\n\t\t\t\t'author': {\n\t\t\t\t\t'uf': ['h-card']\n\t\t\t\t},\n\t\t\t\t'published': {\n\t\t\t\t\t'map': 'dt-published'\n\t\t\t\t},\n\t\t\t\t'nutrition': {},\n\t\t\t\t'category': {\n\t\t\t\t\t'map': 'p-category',\n\t\t\t\t\t'relAlt': ['tag']\n\t\t\t\t},\n\t\t\t}\n\t\t};\n\n\n\tmodules.maps['h-resume'] = {\n\t\troot: 'hresume',\n\t\tname: 'h-resume',\n\t\tproperties: {\n\t\t\t'summary': {},\n\t\t\t'contact': {\n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'education': {\n\t\t\t\t'uf': ['h-card', 'h-event']\n\t\t\t},\n\t\t\t'experience': {\n\t\t\t\t'uf': ['h-card', 'h-event']\n\t\t\t},\n\t\t\t'skill': {},\n\t\t\t'affiliation': {\n\t\t\t\t'uf': ['h-card']\n\t\t\t}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-review-aggregate'] = {\n\t\troot: 'hreview-aggregate',\n\t\tname: 'h-review-aggregate',\n\t\tproperties: {\n\t\t\t'summary': {\n\t\t\t\t'map': 'p-name'\n\t\t\t},\n\t\t\t'item': {\n\t\t\t\t'map': 'p-item',\n\t\t\t\t'uf': ['h-item', 'h-geo', 'h-adr', 'h-card', 'h-event', 'h-product']\n\t\t\t},\n\t\t\t'rating': {},\n\t\t\t'average': {},\n\t\t\t'best': {},\n\t\t\t'worst': {},       \n\t\t\t'count': {},\n\t\t\t'votes': {},\n\t\t\t'category': {\n\t\t\t\t'map': 'p-category',\n\t\t\t\t'relAlt': ['tag']\n\t\t\t},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url',\n\t\t\t\t'relAlt': ['self', 'bookmark']\n\t\t\t}\n\t\t}\n\t};\n\n\n\tmodules.maps['h-review'] = {\n\t\troot: 'hreview',\n\t\tname: 'h-review',\n\t\tproperties: {\n\t\t\t'summary': {\n\t\t\t\t'map': 'p-name'\n\t\t\t},\n\t\t\t'description': {\n\t\t\t\t'map': 'e-description'\n\t\t\t},\n\t\t\t'item': {\n\t\t\t\t'map': 'p-item',\n\t\t\t\t'uf': ['h-item', 'h-geo', 'h-adr', 'h-card', 'h-event', 'h-product']\n\t\t\t},\n\t\t\t'reviewer': {\n\t\t\t\t'uf': ['h-card']\n\t\t\t},\n\t\t\t'dtreviewer': {\n\t\t\t\t'map': 'dt-reviewer'\n\t\t\t},\n\t\t\t'rating': {},\n\t\t\t'best': {},\n\t\t\t'worst': {},\n\t\t\t'category': {\n\t\t\t\t'map': 'p-category',\n\t\t\t\t'relAlt': ['tag']\n\t\t\t},\n\t\t\t'url': {\n\t\t\t\t'map': 'u-url',\n\t\t\t\t'relAlt': ['self', 'bookmark']\n\t\t\t}\n\t\t}\n\t};\n\n\n\tmodules.rels = {\n\t\t// xfn\n\t\t'friend': [ 'yes','external'], \n\t\t'acquaintance': [ 'yes','external'],  \n\t\t'contact': [ 'yes','external'], \n\t\t'met': [ 'yes','external'], \n\t\t'co-worker': [ 'yes','external'],  \n\t\t'colleague': [ 'yes','external'], \n\t\t'co-resident': [ 'yes','external'],  \n\t\t'neighbor': [ 'yes','external'], \n\t\t'child': [ 'yes','external'],  \n\t\t'parent': [ 'yes','external'],  \n\t\t'sibling': [ 'yes','external'],  \n\t\t'spouse': [ 'yes','external'],  \n\t\t'kin': [ 'yes','external'], \n\t\t'muse': [ 'yes','external'],  \n\t\t'crush': [ 'yes','external'],  \n\t\t'date': [ 'yes','external'],  \n\t\t'sweetheart': [ 'yes','external'], \n\t\t'me': [ 'yes','external'], \n\t\n\t\t// other rel=* \n\t\t'license': [ 'yes','yes'],\n\t\t'nofollow': [ 'no','external'],\n\t\t'tag': [ 'no','yes'],\n\t\t'self': [ 'no','external'],\n\t\t'bookmark': [ 'no','external'],\n\t\t'author': [ 'no','external'],\n\t\t'home': [ 'no','external'],\n\t\t'directory': [ 'no','external'],\n\t\t'enclosure': [ 'no','external'],\n\t\t'pronunciation': [ 'no','external'],\n\t\t'payment': [ 'no','external'],\n\t\t'principles': [ 'no','external']\n\t\n\t};\n\n\n\n    var External = {\n        version: modules.version,\n        livingStandard: modules.livingStandard\n    };\n    \n    \n    External.get = function(options){\n    \tvar parser = new modules.Parser();\n        addV1(parser, options);\n    \treturn parser.get( options );\n    };\n    \n    \n    External.getParent = function(node, options){\n    \tvar parser = new modules.Parser();\n        addV1(parser, options);\n    \treturn parser.getParent( node, options );\n    };\n    \n    \n    External.count = function(options){\n    \tvar parser = new modules.Parser();\n        addV1(parser, options);\n    \treturn parser.count( options );\n    };\n    \n    \n    External.isMicroformat = function( node, options ){\n    \tvar parser = new modules.Parser();\n        addV1(parser, options);\n    \treturn parser.isMicroformat( node, options );\n    };\n    \n    \n    External.hasMicroformats = function( node, options ){\n    \tvar parser = new modules.Parser();\n        addV1(parser, options);\n    \treturn parser.hasMicroformats( node, options );\n    };\n    \n    \n    function addV1(parser, options){\n\t\tif(options && options.maps){\n\t\t\tif(Array.isArray(options.maps)){\n\t\t\t\tparser.add(options.maps);\n\t\t\t}else{\n\t\t\t\tparser.add([options.maps]);\n\t\t\t}\n\t\t}\n    }\n    \n    \n    return External;\n    \n    \n}));\n\n// Based on https://gist.github.com/1129031 By Eli Grey, http://eligrey.com - Public domain.\n\n// DO NOT use https://developer.mozilla.org/en-US/docs/Web/API/DOMParser example polyfill\n// as it does not work with earlier versions of Chrome\n\n\n(function(DOMParser) {var DOMParser_proto;\n    var real_parseFromString;\n    var textHTML;         // Flag for text/html support\n    var textXML;          // Flag for text/xml support\n    var htmlElInnerHTML;  // Flag for support for setting html element's innerHTML\n\n    // Stop here if DOMParser not defined\n    if (!DOMParser) {\n        return;\n    }\n\n    // Firefox, Opera and IE throw errors on unsupported types\n    try {\n        // WebKit returns null on unsupported types\n        textHTML = !!(new DOMParser()).parseFromString('', 'text/html');\n\n    } catch (er) {\n      textHTML = false;\n    }\n\n    // If text/html supported, don't need to do anything.\n    if (textHTML) {\n        return;\n    }\n\n    // Next try setting innerHTML of a created document\n    // IE 9 and lower will throw an error (can't set innerHTML of its HTML element)\n    try {\n      var doc = document.implementation.createHTMLDocument('');\n      doc.documentElement.innerHTML = '<title></title><div></div>';\n      htmlElInnerHTML = true;\n\n    } catch (er) {\n      htmlElInnerHTML = false;\n    }\n\n    // If if that failed, try text/xml\n    if (!htmlElInnerHTML) {\n\n        try {\n            textXML = !!(new DOMParser()).parseFromString('', 'text/xml');\n\n        } catch (er) {\n            textHTML = false;\n        }\n    }\n\n    // Mess with DOMParser.prototype (less than optimal...) if one of the above worked\n    // Assume can write to the prototype, if not, make this a stand alone function\n    if (DOMParser.prototype && (htmlElInnerHTML || textXML)) {\n        DOMParser_proto = DOMParser.prototype;\n        real_parseFromString = DOMParser_proto.parseFromString;\n\n        DOMParser_proto.parseFromString = function (markup, type) {\n\n            // Only do this if type is text/html\n            if (/^\\s*text\\/html\\s*(?:;|$)/i.test(type)) {\n                var doc, doc_el, first_el;\n\n                // Use innerHTML if supported\n                if (htmlElInnerHTML) {\n                    doc = document.implementation.createHTMLDocument('');\n                    doc_el = doc.documentElement;\n                    doc_el.innerHTML = markup;\n                    first_el = doc_el.firstElementChild;\n\n                // Otherwise use XML method\n                } else if (textXML) {\n\n                    // Make sure markup is wrapped in HTML tags\n                    // Should probably allow for a DOCTYPE\n                    if (!(/^<html.*html>$/i.test(markup))) {\n                        markup = '<html>' + markup + '<\\/html>';\n                    }\n                    doc = (new DOMParser()).parseFromString(markup, 'text/xml');\n                    doc_el = doc.documentElement;\n                    first_el = doc_el.firstElementChild;\n                }\n\n                // Is this an entire document or a fragment?\n                if (doc_el.childElementCount === 1 && first_el.localName.toLowerCase() === 'html') {\n                    doc.replaceChild(first_el, doc_el);\n                }\n\n                return doc;\n\n            // If not text/html, send as-is to host method\n            } else {\n                return real_parseFromString.apply(this, arguments);\n            }\n        };\n    }\n}(DOMParser));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/microformat-shiv/microformat-shiv.js\n// module id = 7\n// module chunks = 2"],"sourceRoot":""}